
hexapod_ver_2.8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ccc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c0  20000000  00004ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  200000c0  00004d8c  000200c0  2**2
                  ALLOC
  3 .stack        00002004  200002f4  00004fc0  000200c0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002785b  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002aba  00000000  00000000  0004799c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008dee  00000000  00000000  0004a456  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000016b8  00000000  00000000  00053244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001560  00000000  00000000  000548fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001af0c  00000000  00000000  00055e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012190  00000000  00000000  00070d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e581  00000000  00000000  00082ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005350  00000000  00000000  0011147c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 22 00 20 29 01 00 00 21 02 00 00 21 02 00 00     .". )...!...!...
	...
      2c:	21 02 00 00 00 00 00 00 00 00 00 00 21 02 00 00     !...........!...
      3c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      4c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      5c:	21 02 00 00 21 02 00 00 d9 3d 00 00 21 02 00 00     !...!....=..!...
      6c:	21 02 00 00 21 02 00 00 f5 3d 00 00 11 3e 00 00     !...!....=...>..
      7c:	c9 43 00 00 21 02 00 00 21 02 00 00 21 02 00 00     .C..!...!...!...
      8c:	19 49 00 00 35 49 00 00 21 02 00 00 21 02 00 00     .I..5I..!...!...
      9c:	25 27 00 00 21 02 00 00 21 02 00 00 21 02 00 00     %'..!...!...!...
      ac:	21 02 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000c0 	.word	0x200000c0
      d4:	00000000 	.word	0x00000000
      d8:	00004ccc 	.word	0x00004ccc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c4 	.word	0x200000c4
     108:	00004ccc 	.word	0x00004ccc
     10c:	00004ccc 	.word	0x00004ccc
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	system_init();
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11a:	4798      	blx	r3
}
     11c:	46c0      	nop			; (mov r8, r8)
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	00000fc9 	.word	0x00000fc9

00000128 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     12e:	4b2f      	ldr	r3, [pc, #188]	; (1ec <Reset_Handler+0xc4>)
     130:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     132:	4b2f      	ldr	r3, [pc, #188]	; (1f0 <Reset_Handler+0xc8>)
     134:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     136:	687a      	ldr	r2, [r7, #4]
     138:	683b      	ldr	r3, [r7, #0]
     13a:	429a      	cmp	r2, r3
     13c:	d00c      	beq.n	158 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     13e:	e007      	b.n	150 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     140:	683b      	ldr	r3, [r7, #0]
     142:	1d1a      	adds	r2, r3, #4
     144:	603a      	str	r2, [r7, #0]
     146:	687a      	ldr	r2, [r7, #4]
     148:	1d11      	adds	r1, r2, #4
     14a:	6079      	str	r1, [r7, #4]
     14c:	6812      	ldr	r2, [r2, #0]
     14e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     150:	683a      	ldr	r2, [r7, #0]
     152:	4b28      	ldr	r3, [pc, #160]	; (1f4 <Reset_Handler+0xcc>)
     154:	429a      	cmp	r2, r3
     156:	d3f3      	bcc.n	140 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     158:	4b27      	ldr	r3, [pc, #156]	; (1f8 <Reset_Handler+0xd0>)
     15a:	603b      	str	r3, [r7, #0]
     15c:	e004      	b.n	168 <Reset_Handler+0x40>
                *pDest++ = 0;
     15e:	683b      	ldr	r3, [r7, #0]
     160:	1d1a      	adds	r2, r3, #4
     162:	603a      	str	r2, [r7, #0]
     164:	2200      	movs	r2, #0
     166:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     168:	683a      	ldr	r2, [r7, #0]
     16a:	4b24      	ldr	r3, [pc, #144]	; (1fc <Reset_Handler+0xd4>)
     16c:	429a      	cmp	r2, r3
     16e:	d3f6      	bcc.n	15e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     170:	4b23      	ldr	r3, [pc, #140]	; (200 <Reset_Handler+0xd8>)
     172:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     174:	4b23      	ldr	r3, [pc, #140]	; (204 <Reset_Handler+0xdc>)
     176:	687a      	ldr	r2, [r7, #4]
     178:	21ff      	movs	r1, #255	; 0xff
     17a:	438a      	bics	r2, r1
     17c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17e:	4a22      	ldr	r2, [pc, #136]	; (208 <Reset_Handler+0xe0>)
     180:	2390      	movs	r3, #144	; 0x90
     182:	005b      	lsls	r3, r3, #1
     184:	2102      	movs	r1, #2
     186:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     188:	4a20      	ldr	r2, [pc, #128]	; (20c <Reset_Handler+0xe4>)
     18a:	78d3      	ldrb	r3, [r2, #3]
     18c:	2103      	movs	r1, #3
     18e:	438b      	bics	r3, r1
     190:	1c19      	adds	r1, r3, #0
     192:	2302      	movs	r3, #2
     194:	430b      	orrs	r3, r1
     196:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     198:	4a1c      	ldr	r2, [pc, #112]	; (20c <Reset_Handler+0xe4>)
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	210c      	movs	r1, #12
     19e:	438b      	bics	r3, r1
     1a0:	1c19      	adds	r1, r3, #0
     1a2:	2308      	movs	r3, #8
     1a4:	430b      	orrs	r3, r1
     1a6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a8:	4a19      	ldr	r2, [pc, #100]	; (210 <Reset_Handler+0xe8>)
     1aa:	7b93      	ldrb	r3, [r2, #14]
     1ac:	2130      	movs	r1, #48	; 0x30
     1ae:	438b      	bics	r3, r1
     1b0:	1c19      	adds	r1, r3, #0
     1b2:	2320      	movs	r3, #32
     1b4:	430b      	orrs	r3, r1
     1b6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b8:	4a15      	ldr	r2, [pc, #84]	; (210 <Reset_Handler+0xe8>)
     1ba:	7b93      	ldrb	r3, [r2, #14]
     1bc:	210c      	movs	r1, #12
     1be:	438b      	bics	r3, r1
     1c0:	1c19      	adds	r1, r3, #0
     1c2:	2308      	movs	r3, #8
     1c4:	430b      	orrs	r3, r1
     1c6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1c8:	4a11      	ldr	r2, [pc, #68]	; (210 <Reset_Handler+0xe8>)
     1ca:	7b93      	ldrb	r3, [r2, #14]
     1cc:	2103      	movs	r1, #3
     1ce:	438b      	bics	r3, r1
     1d0:	1c19      	adds	r1, r3, #0
     1d2:	2302      	movs	r3, #2
     1d4:	430b      	orrs	r3, r1
     1d6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1d8:	4a0e      	ldr	r2, [pc, #56]	; (214 <Reset_Handler+0xec>)
     1da:	6853      	ldr	r3, [r2, #4]
     1dc:	2180      	movs	r1, #128	; 0x80
     1de:	430b      	orrs	r3, r1
     1e0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1e2:	4b0d      	ldr	r3, [pc, #52]	; (218 <Reset_Handler+0xf0>)
     1e4:	4798      	blx	r3

        /* Branch to main function */
        main();
     1e6:	4b0d      	ldr	r3, [pc, #52]	; (21c <Reset_Handler+0xf4>)
     1e8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1ea:	e7fe      	b.n	1ea <Reset_Handler+0xc2>
     1ec:	00004ccc 	.word	0x00004ccc
     1f0:	20000000 	.word	0x20000000
     1f4:	200000c0 	.word	0x200000c0
     1f8:	200000c0 	.word	0x200000c0
     1fc:	200002f4 	.word	0x200002f4
     200:	00000000 	.word	0x00000000
     204:	e000ed00 	.word	0xe000ed00
     208:	41007000 	.word	0x41007000
     20c:	41005000 	.word	0x41005000
     210:	41004800 	.word	0x41004800
     214:	41004000 	.word	0x41004000
     218:	00004af5 	.word	0x00004af5
     21c:	00004a41 	.word	0x00004a41

00000220 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     220:	b580      	push	{r7, lr}
     222:	af00      	add	r7, sp, #0
        while (1) {
     224:	e7fe      	b.n	224 <Dummy_Handler+0x4>

00000226 <hri_gclk_write_CLKCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
     226:	b580      	push	{r7, lr}
     228:	b082      	sub	sp, #8
     22a:	af00      	add	r7, sp, #0
     22c:	6078      	str	r0, [r7, #4]
     22e:	000a      	movs	r2, r1
     230:	1cbb      	adds	r3, r7, #2
     232:	801a      	strh	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     234:	687b      	ldr	r3, [r7, #4]
     236:	1cba      	adds	r2, r7, #2
     238:	8812      	ldrh	r2, [r2, #0]
     23a:	805a      	strh	r2, [r3, #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	46bd      	mov	sp, r7
     240:	b002      	add	sp, #8
     242:	bd80      	pop	{r7, pc}

00000244 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     244:	b580      	push	{r7, lr}
     246:	b084      	sub	sp, #16
     248:	af00      	add	r7, sp, #0
     24a:	60f8      	str	r0, [r7, #12]
     24c:	607a      	str	r2, [r7, #4]
     24e:	230b      	movs	r3, #11
     250:	18fb      	adds	r3, r7, r3
     252:	1c0a      	adds	r2, r1, #0
     254:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     256:	230b      	movs	r3, #11
     258:	18fb      	adds	r3, r7, r3
     25a:	781b      	ldrb	r3, [r3, #0]
     25c:	68fa      	ldr	r2, [r7, #12]
     25e:	01db      	lsls	r3, r3, #7
     260:	18d3      	adds	r3, r2, r3
     262:	3308      	adds	r3, #8
     264:	687a      	ldr	r2, [r7, #4]
     266:	601a      	str	r2, [r3, #0]
}
     268:	46c0      	nop			; (mov r8, r8)
     26a:	46bd      	mov	sp, r7
     26c:	b004      	add	sp, #16
     26e:	bd80      	pop	{r7, pc}

00000270 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
     276:	60f8      	str	r0, [r7, #12]
     278:	607a      	str	r2, [r7, #4]
     27a:	230b      	movs	r3, #11
     27c:	18fb      	adds	r3, r7, r3
     27e:	1c0a      	adds	r2, r1, #0
     280:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     282:	230b      	movs	r3, #11
     284:	18fb      	adds	r3, r7, r3
     286:	781b      	ldrb	r3, [r3, #0]
     288:	68fa      	ldr	r2, [r7, #12]
     28a:	01db      	lsls	r3, r3, #7
     28c:	18d3      	adds	r3, r2, r3
     28e:	3304      	adds	r3, #4
     290:	687a      	ldr	r2, [r7, #4]
     292:	601a      	str	r2, [r3, #0]
}
     294:	46c0      	nop			; (mov r8, r8)
     296:	46bd      	mov	sp, r7
     298:	b004      	add	sp, #16
     29a:	bd80      	pop	{r7, pc}

0000029c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     29c:	b580      	push	{r7, lr}
     29e:	b084      	sub	sp, #16
     2a0:	af00      	add	r7, sp, #0
     2a2:	60f8      	str	r0, [r7, #12]
     2a4:	607a      	str	r2, [r7, #4]
     2a6:	230b      	movs	r3, #11
     2a8:	18fb      	adds	r3, r7, r3
     2aa:	1c0a      	adds	r2, r1, #0
     2ac:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2ae:	230b      	movs	r3, #11
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	68fa      	ldr	r2, [r7, #12]
     2b6:	01db      	lsls	r3, r3, #7
     2b8:	18d3      	adds	r3, r2, r3
     2ba:	3318      	adds	r3, #24
     2bc:	687a      	ldr	r2, [r7, #4]
     2be:	601a      	str	r2, [r3, #0]
}
     2c0:	46c0      	nop			; (mov r8, r8)
     2c2:	46bd      	mov	sp, r7
     2c4:	b004      	add	sp, #16
     2c6:	bd80      	pop	{r7, pc}

000002c8 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2c8:	b580      	push	{r7, lr}
     2ca:	b084      	sub	sp, #16
     2cc:	af00      	add	r7, sp, #0
     2ce:	60f8      	str	r0, [r7, #12]
     2d0:	607a      	str	r2, [r7, #4]
     2d2:	230b      	movs	r3, #11
     2d4:	18fb      	adds	r3, r7, r3
     2d6:	1c0a      	adds	r2, r1, #0
     2d8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2da:	230b      	movs	r3, #11
     2dc:	18fb      	adds	r3, r7, r3
     2de:	781b      	ldrb	r3, [r3, #0]
     2e0:	68fa      	ldr	r2, [r7, #12]
     2e2:	01db      	lsls	r3, r3, #7
     2e4:	18d3      	adds	r3, r2, r3
     2e6:	3314      	adds	r3, #20
     2e8:	687a      	ldr	r2, [r7, #4]
     2ea:	601a      	str	r2, [r3, #0]
}
     2ec:	46c0      	nop			; (mov r8, r8)
     2ee:	46bd      	mov	sp, r7
     2f0:	b004      	add	sp, #16
     2f2:	bd80      	pop	{r7, pc}

000002f4 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     2f4:	b590      	push	{r4, r7, lr}
     2f6:	b085      	sub	sp, #20
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
     2fc:	000c      	movs	r4, r1
     2fe:	0010      	movs	r0, r2
     300:	0019      	movs	r1, r3
     302:	1cfb      	adds	r3, r7, #3
     304:	1c22      	adds	r2, r4, #0
     306:	701a      	strb	r2, [r3, #0]
     308:	1cbb      	adds	r3, r7, #2
     30a:	1c02      	adds	r2, r0, #0
     30c:	701a      	strb	r2, [r3, #0]
     30e:	1c7b      	adds	r3, r7, #1
     310:	1c0a      	adds	r2, r1, #0
     312:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     314:	1cfb      	adds	r3, r7, #3
     316:	7819      	ldrb	r1, [r3, #0]
     318:	1cbb      	adds	r3, r7, #2
     31a:	781a      	ldrb	r2, [r3, #0]
     31c:	230f      	movs	r3, #15
     31e:	18fb      	adds	r3, r7, r3
     320:	6878      	ldr	r0, [r7, #4]
     322:	2430      	movs	r4, #48	; 0x30
     324:	01c9      	lsls	r1, r1, #7
     326:	1841      	adds	r1, r0, r1
     328:	188a      	adds	r2, r1, r2
     32a:	1912      	adds	r2, r2, r4
     32c:	7812      	ldrb	r2, [r2, #0]
     32e:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     330:	230f      	movs	r3, #15
     332:	18fb      	adds	r3, r7, r3
     334:	220f      	movs	r2, #15
     336:	18ba      	adds	r2, r7, r2
     338:	7812      	ldrb	r2, [r2, #0]
     33a:	210f      	movs	r1, #15
     33c:	438a      	bics	r2, r1
     33e:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     340:	1c7b      	adds	r3, r7, #1
     342:	781b      	ldrb	r3, [r3, #0]
     344:	220f      	movs	r2, #15
     346:	4013      	ands	r3, r2
     348:	b2d9      	uxtb	r1, r3
     34a:	230f      	movs	r3, #15
     34c:	18fb      	adds	r3, r7, r3
     34e:	220f      	movs	r2, #15
     350:	18ba      	adds	r2, r7, r2
     352:	7812      	ldrb	r2, [r2, #0]
     354:	430a      	orrs	r2, r1
     356:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     358:	1cfb      	adds	r3, r7, #3
     35a:	781a      	ldrb	r2, [r3, #0]
     35c:	1cbb      	adds	r3, r7, #2
     35e:	781b      	ldrb	r3, [r3, #0]
     360:	6879      	ldr	r1, [r7, #4]
     362:	2030      	movs	r0, #48	; 0x30
     364:	01d2      	lsls	r2, r2, #7
     366:	188a      	adds	r2, r1, r2
     368:	18d3      	adds	r3, r2, r3
     36a:	181b      	adds	r3, r3, r0
     36c:	220f      	movs	r2, #15
     36e:	18ba      	adds	r2, r7, r2
     370:	7812      	ldrb	r2, [r2, #0]
     372:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     374:	46c0      	nop			; (mov r8, r8)
     376:	46bd      	mov	sp, r7
     378:	b005      	add	sp, #20
     37a:	bd90      	pop	{r4, r7, pc}

0000037c <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     37c:	b590      	push	{r4, r7, lr}
     37e:	b085      	sub	sp, #20
     380:	af00      	add	r7, sp, #0
     382:	6078      	str	r0, [r7, #4]
     384:	000c      	movs	r4, r1
     386:	0010      	movs	r0, r2
     388:	0019      	movs	r1, r3
     38a:	1cfb      	adds	r3, r7, #3
     38c:	1c22      	adds	r2, r4, #0
     38e:	701a      	strb	r2, [r3, #0]
     390:	1cbb      	adds	r3, r7, #2
     392:	1c02      	adds	r2, r0, #0
     394:	701a      	strb	r2, [r3, #0]
     396:	1c7b      	adds	r3, r7, #1
     398:	1c0a      	adds	r2, r1, #0
     39a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     39c:	1cfb      	adds	r3, r7, #3
     39e:	7819      	ldrb	r1, [r3, #0]
     3a0:	1cbb      	adds	r3, r7, #2
     3a2:	781a      	ldrb	r2, [r3, #0]
     3a4:	230f      	movs	r3, #15
     3a6:	18fb      	adds	r3, r7, r3
     3a8:	6878      	ldr	r0, [r7, #4]
     3aa:	2430      	movs	r4, #48	; 0x30
     3ac:	01c9      	lsls	r1, r1, #7
     3ae:	1841      	adds	r1, r0, r1
     3b0:	188a      	adds	r2, r1, r2
     3b2:	1912      	adds	r2, r2, r4
     3b4:	7812      	ldrb	r2, [r2, #0]
     3b6:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b8:	230f      	movs	r3, #15
     3ba:	18fb      	adds	r3, r7, r3
     3bc:	220f      	movs	r2, #15
     3be:	18ba      	adds	r2, r7, r2
     3c0:	7812      	ldrb	r2, [r2, #0]
     3c2:	210f      	movs	r1, #15
     3c4:	400a      	ands	r2, r1
     3c6:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     3c8:	1c7b      	adds	r3, r7, #1
     3ca:	781b      	ldrb	r3, [r3, #0]
     3cc:	011b      	lsls	r3, r3, #4
     3ce:	b2d9      	uxtb	r1, r3
     3d0:	230f      	movs	r3, #15
     3d2:	18fb      	adds	r3, r7, r3
     3d4:	220f      	movs	r2, #15
     3d6:	18ba      	adds	r2, r7, r2
     3d8:	7812      	ldrb	r2, [r2, #0]
     3da:	430a      	orrs	r2, r1
     3dc:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3de:	1cfb      	adds	r3, r7, #3
     3e0:	781a      	ldrb	r2, [r3, #0]
     3e2:	1cbb      	adds	r3, r7, #2
     3e4:	781b      	ldrb	r3, [r3, #0]
     3e6:	6879      	ldr	r1, [r7, #4]
     3e8:	2030      	movs	r0, #48	; 0x30
     3ea:	01d2      	lsls	r2, r2, #7
     3ec:	188a      	adds	r2, r1, r2
     3ee:	18d3      	adds	r3, r2, r3
     3f0:	181b      	adds	r3, r3, r0
     3f2:	220f      	movs	r2, #15
     3f4:	18ba      	adds	r2, r7, r2
     3f6:	7812      	ldrb	r2, [r2, #0]
     3f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	46bd      	mov	sp, r7
     3fe:	b005      	add	sp, #20
     400:	bd90      	pop	{r4, r7, pc}

00000402 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     402:	b590      	push	{r4, r7, lr}
     404:	b085      	sub	sp, #20
     406:	af00      	add	r7, sp, #0
     408:	6078      	str	r0, [r7, #4]
     40a:	000c      	movs	r4, r1
     40c:	0010      	movs	r0, r2
     40e:	0019      	movs	r1, r3
     410:	1cfb      	adds	r3, r7, #3
     412:	1c22      	adds	r2, r4, #0
     414:	701a      	strb	r2, [r3, #0]
     416:	1cbb      	adds	r3, r7, #2
     418:	1c02      	adds	r2, r0, #0
     41a:	701a      	strb	r2, [r3, #0]
     41c:	1c7b      	adds	r3, r7, #1
     41e:	1c0a      	adds	r2, r1, #0
     420:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     422:	1cfb      	adds	r3, r7, #3
     424:	7819      	ldrb	r1, [r3, #0]
     426:	1cbb      	adds	r3, r7, #2
     428:	781a      	ldrb	r2, [r3, #0]
     42a:	230f      	movs	r3, #15
     42c:	18fb      	adds	r3, r7, r3
     42e:	6878      	ldr	r0, [r7, #4]
     430:	2440      	movs	r4, #64	; 0x40
     432:	01c9      	lsls	r1, r1, #7
     434:	1841      	adds	r1, r0, r1
     436:	188a      	adds	r2, r1, r2
     438:	1912      	adds	r2, r2, r4
     43a:	7812      	ldrb	r2, [r2, #0]
     43c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     43e:	230f      	movs	r3, #15
     440:	18fb      	adds	r3, r7, r3
     442:	220f      	movs	r2, #15
     444:	18ba      	adds	r2, r7, r2
     446:	7812      	ldrb	r2, [r2, #0]
     448:	2101      	movs	r1, #1
     44a:	438a      	bics	r2, r1
     44c:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44e:	1c7b      	adds	r3, r7, #1
     450:	7819      	ldrb	r1, [r3, #0]
     452:	230f      	movs	r3, #15
     454:	18fb      	adds	r3, r7, r3
     456:	220f      	movs	r2, #15
     458:	18ba      	adds	r2, r7, r2
     45a:	7812      	ldrb	r2, [r2, #0]
     45c:	430a      	orrs	r2, r1
     45e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     460:	1cfb      	adds	r3, r7, #3
     462:	781a      	ldrb	r2, [r3, #0]
     464:	1cbb      	adds	r3, r7, #2
     466:	781b      	ldrb	r3, [r3, #0]
     468:	6879      	ldr	r1, [r7, #4]
     46a:	2040      	movs	r0, #64	; 0x40
     46c:	01d2      	lsls	r2, r2, #7
     46e:	188a      	adds	r2, r1, r2
     470:	18d3      	adds	r3, r2, r3
     472:	181b      	adds	r3, r3, r0
     474:	220f      	movs	r2, #15
     476:	18ba      	adds	r2, r7, r2
     478:	7812      	ldrb	r2, [r2, #0]
     47a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     47c:	46c0      	nop			; (mov r8, r8)
     47e:	46bd      	mov	sp, r7
     480:	b005      	add	sp, #20
     482:	bd90      	pop	{r4, r7, pc}

00000484 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     484:	b5b0      	push	{r4, r5, r7, lr}
     486:	b082      	sub	sp, #8
     488:	af00      	add	r7, sp, #0
     48a:	6078      	str	r0, [r7, #4]
     48c:	0008      	movs	r0, r1
     48e:	0011      	movs	r1, r2
     490:	1cfb      	adds	r3, r7, #3
     492:	1c02      	adds	r2, r0, #0
     494:	701a      	strb	r2, [r3, #0]
     496:	1cbb      	adds	r3, r7, #2
     498:	1c0a      	adds	r2, r1, #0
     49a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     49c:	1cfb      	adds	r3, r7, #3
     49e:	781a      	ldrb	r2, [r3, #0]
     4a0:	1cbb      	adds	r3, r7, #2
     4a2:	781b      	ldrb	r3, [r3, #0]
     4a4:	1cf9      	adds	r1, r7, #3
     4a6:	7808      	ldrb	r0, [r1, #0]
     4a8:	1cb9      	adds	r1, r7, #2
     4aa:	7809      	ldrb	r1, [r1, #0]
     4ac:	687c      	ldr	r4, [r7, #4]
     4ae:	2540      	movs	r5, #64	; 0x40
     4b0:	01c0      	lsls	r0, r0, #7
     4b2:	1820      	adds	r0, r4, r0
     4b4:	1841      	adds	r1, r0, r1
     4b6:	1949      	adds	r1, r1, r5
     4b8:	7809      	ldrb	r1, [r1, #0]
     4ba:	b2c9      	uxtb	r1, r1
     4bc:	2004      	movs	r0, #4
     4be:	4301      	orrs	r1, r0
     4c0:	b2cc      	uxtb	r4, r1
     4c2:	6879      	ldr	r1, [r7, #4]
     4c4:	2040      	movs	r0, #64	; 0x40
     4c6:	01d2      	lsls	r2, r2, #7
     4c8:	188a      	adds	r2, r1, r2
     4ca:	18d3      	adds	r3, r2, r3
     4cc:	181b      	adds	r3, r3, r0
     4ce:	1c22      	adds	r2, r4, #0
     4d0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	46bd      	mov	sp, r7
     4d6:	b002      	add	sp, #8
     4d8:	bdb0      	pop	{r4, r5, r7, pc}

000004da <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4da:	b5b0      	push	{r4, r5, r7, lr}
     4dc:	b082      	sub	sp, #8
     4de:	af00      	add	r7, sp, #0
     4e0:	6078      	str	r0, [r7, #4]
     4e2:	0008      	movs	r0, r1
     4e4:	0011      	movs	r1, r2
     4e6:	1cfb      	adds	r3, r7, #3
     4e8:	1c02      	adds	r2, r0, #0
     4ea:	701a      	strb	r2, [r3, #0]
     4ec:	1cbb      	adds	r3, r7, #2
     4ee:	1c0a      	adds	r2, r1, #0
     4f0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f2:	1cfb      	adds	r3, r7, #3
     4f4:	781a      	ldrb	r2, [r3, #0]
     4f6:	1cbb      	adds	r3, r7, #2
     4f8:	781b      	ldrb	r3, [r3, #0]
     4fa:	1cf9      	adds	r1, r7, #3
     4fc:	7808      	ldrb	r0, [r1, #0]
     4fe:	1cb9      	adds	r1, r7, #2
     500:	7809      	ldrb	r1, [r1, #0]
     502:	687c      	ldr	r4, [r7, #4]
     504:	2540      	movs	r5, #64	; 0x40
     506:	01c0      	lsls	r0, r0, #7
     508:	1820      	adds	r0, r4, r0
     50a:	1841      	adds	r1, r0, r1
     50c:	1949      	adds	r1, r1, r5
     50e:	7809      	ldrb	r1, [r1, #0]
     510:	b2c9      	uxtb	r1, r1
     512:	2004      	movs	r0, #4
     514:	4381      	bics	r1, r0
     516:	b2cc      	uxtb	r4, r1
     518:	6879      	ldr	r1, [r7, #4]
     51a:	2040      	movs	r0, #64	; 0x40
     51c:	01d2      	lsls	r2, r2, #7
     51e:	188a      	adds	r2, r1, r2
     520:	18d3      	adds	r3, r2, r3
     522:	181b      	adds	r3, r3, r0
     524:	1c22      	adds	r2, r4, #0
     526:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     528:	46c0      	nop			; (mov r8, r8)
     52a:	46bd      	mov	sp, r7
     52c:	b002      	add	sp, #8
     52e:	bdb0      	pop	{r4, r5, r7, pc}

00000530 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     530:	b580      	push	{r7, lr}
     532:	b084      	sub	sp, #16
     534:	af00      	add	r7, sp, #0
     536:	60f8      	str	r0, [r7, #12]
     538:	607a      	str	r2, [r7, #4]
     53a:	230b      	movs	r3, #11
     53c:	18fb      	adds	r3, r7, r3
     53e:	1c0a      	adds	r2, r1, #0
     540:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     542:	230b      	movs	r3, #11
     544:	18fb      	adds	r3, r7, r3
     546:	781b      	ldrb	r3, [r3, #0]
     548:	68fa      	ldr	r2, [r7, #12]
     54a:	01db      	lsls	r3, r3, #7
     54c:	18d3      	adds	r3, r2, r3
     54e:	3328      	adds	r3, #40	; 0x28
     550:	687a      	ldr	r2, [r7, #4]
     552:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     554:	46c0      	nop			; (mov r8, r8)
     556:	46bd      	mov	sp, r7
     558:	b004      	add	sp, #16
     55a:	bd80      	pop	{r7, pc}

0000055c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     55c:	b580      	push	{r7, lr}
     55e:	b082      	sub	sp, #8
     560:	af00      	add	r7, sp, #0
     562:	6039      	str	r1, [r7, #0]
     564:	0011      	movs	r1, r2
     566:	1dfb      	adds	r3, r7, #7
     568:	1c02      	adds	r2, r0, #0
     56a:	701a      	strb	r2, [r3, #0]
     56c:	1dbb      	adds	r3, r7, #6
     56e:	1c0a      	adds	r2, r1, #0
     570:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     572:	1dbb      	adds	r3, r7, #6
     574:	781b      	ldrb	r3, [r3, #0]
     576:	2b01      	cmp	r3, #1
     578:	d023      	beq.n	5c2 <_gpio_set_direction+0x66>
     57a:	2b02      	cmp	r3, #2
     57c:	d03f      	beq.n	5fe <_gpio_set_direction+0xa2>
     57e:	2b00      	cmp	r3, #0
     580:	d15d      	bne.n	63e <_gpio_set_direction+0xe2>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     582:	683a      	ldr	r2, [r7, #0]
     584:	1dfb      	adds	r3, r7, #7
     586:	7819      	ldrb	r1, [r3, #0]
     588:	23c0      	movs	r3, #192	; 0xc0
     58a:	05db      	lsls	r3, r3, #23
     58c:	0018      	movs	r0, r3
     58e:	4b31      	ldr	r3, [pc, #196]	; (654 <_gpio_set_direction+0xf8>)
     590:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     592:	683b      	ldr	r3, [r7, #0]
     594:	041b      	lsls	r3, r3, #16
     596:	0c1b      	lsrs	r3, r3, #16
     598:	2280      	movs	r2, #128	; 0x80
     59a:	05d2      	lsls	r2, r2, #23
     59c:	431a      	orrs	r2, r3
     59e:	1dfb      	adds	r3, r7, #7
     5a0:	781b      	ldrb	r3, [r3, #0]
     5a2:	482d      	ldr	r0, [pc, #180]	; (658 <_gpio_set_direction+0xfc>)
     5a4:	0019      	movs	r1, r3
     5a6:	4b2d      	ldr	r3, [pc, #180]	; (65c <_gpio_set_direction+0x100>)
     5a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     5aa:	683b      	ldr	r3, [r7, #0]
     5ac:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     5ae:	22c0      	movs	r2, #192	; 0xc0
     5b0:	0612      	lsls	r2, r2, #24
     5b2:	431a      	orrs	r2, r3
     5b4:	1dfb      	adds	r3, r7, #7
     5b6:	781b      	ldrb	r3, [r3, #0]
     5b8:	4827      	ldr	r0, [pc, #156]	; (658 <_gpio_set_direction+0xfc>)
     5ba:	0019      	movs	r1, r3
     5bc:	4b27      	ldr	r3, [pc, #156]	; (65c <_gpio_set_direction+0x100>)
     5be:	4798      	blx	r3
		break;
     5c0:	e043      	b.n	64a <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5c2:	683a      	ldr	r2, [r7, #0]
     5c4:	1dfb      	adds	r3, r7, #7
     5c6:	7819      	ldrb	r1, [r3, #0]
     5c8:	23c0      	movs	r3, #192	; 0xc0
     5ca:	05db      	lsls	r3, r3, #23
     5cc:	0018      	movs	r0, r3
     5ce:	4b21      	ldr	r3, [pc, #132]	; (654 <_gpio_set_direction+0xf8>)
     5d0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     5d2:	683b      	ldr	r3, [r7, #0]
     5d4:	041b      	lsls	r3, r3, #16
     5d6:	0c1b      	lsrs	r3, r3, #16
     5d8:	4a21      	ldr	r2, [pc, #132]	; (660 <_gpio_set_direction+0x104>)
     5da:	431a      	orrs	r2, r3
     5dc:	1dfb      	adds	r3, r7, #7
     5de:	781b      	ldrb	r3, [r3, #0]
     5e0:	481d      	ldr	r0, [pc, #116]	; (658 <_gpio_set_direction+0xfc>)
     5e2:	0019      	movs	r1, r3
     5e4:	4b1d      	ldr	r3, [pc, #116]	; (65c <_gpio_set_direction+0x100>)
     5e6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     5e8:	683b      	ldr	r3, [r7, #0]
     5ea:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     5ec:	4a1d      	ldr	r2, [pc, #116]	; (664 <_gpio_set_direction+0x108>)
     5ee:	431a      	orrs	r2, r3
     5f0:	1dfb      	adds	r3, r7, #7
     5f2:	781b      	ldrb	r3, [r3, #0]
     5f4:	4818      	ldr	r0, [pc, #96]	; (658 <_gpio_set_direction+0xfc>)
     5f6:	0019      	movs	r1, r3
     5f8:	4b18      	ldr	r3, [pc, #96]	; (65c <_gpio_set_direction+0x100>)
     5fa:	4798      	blx	r3
		break;
     5fc:	e025      	b.n	64a <_gpio_set_direction+0xee>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     5fe:	683a      	ldr	r2, [r7, #0]
     600:	1dfb      	adds	r3, r7, #7
     602:	7819      	ldrb	r1, [r3, #0]
     604:	23c0      	movs	r3, #192	; 0xc0
     606:	05db      	lsls	r3, r3, #23
     608:	0018      	movs	r0, r3
     60a:	4b17      	ldr	r3, [pc, #92]	; (668 <_gpio_set_direction+0x10c>)
     60c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     60e:	683b      	ldr	r3, [r7, #0]
     610:	041b      	lsls	r3, r3, #16
     612:	0c1b      	lsrs	r3, r3, #16
     614:	2280      	movs	r2, #128	; 0x80
     616:	05d2      	lsls	r2, r2, #23
     618:	431a      	orrs	r2, r3
     61a:	1dfb      	adds	r3, r7, #7
     61c:	781b      	ldrb	r3, [r3, #0]
     61e:	480e      	ldr	r0, [pc, #56]	; (658 <_gpio_set_direction+0xfc>)
     620:	0019      	movs	r1, r3
     622:	4b0e      	ldr	r3, [pc, #56]	; (65c <_gpio_set_direction+0x100>)
     624:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     626:	683b      	ldr	r3, [r7, #0]
     628:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     62a:	22c0      	movs	r2, #192	; 0xc0
     62c:	0612      	lsls	r2, r2, #24
     62e:	431a      	orrs	r2, r3
     630:	1dfb      	adds	r3, r7, #7
     632:	781b      	ldrb	r3, [r3, #0]
     634:	4808      	ldr	r0, [pc, #32]	; (658 <_gpio_set_direction+0xfc>)
     636:	0019      	movs	r1, r3
     638:	4b08      	ldr	r3, [pc, #32]	; (65c <_gpio_set_direction+0x100>)
     63a:	4798      	blx	r3
		break;
     63c:	e005      	b.n	64a <_gpio_set_direction+0xee>

	default:
		ASSERT(false);
     63e:	4b0b      	ldr	r3, [pc, #44]	; (66c <_gpio_set_direction+0x110>)
     640:	2245      	movs	r2, #69	; 0x45
     642:	0019      	movs	r1, r3
     644:	2000      	movs	r0, #0
     646:	4b0a      	ldr	r3, [pc, #40]	; (670 <_gpio_set_direction+0x114>)
     648:	4798      	blx	r3
	}
}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	46bd      	mov	sp, r7
     64e:	b002      	add	sp, #8
     650:	bd80      	pop	{r7, pc}
     652:	46c0      	nop			; (mov r8, r8)
     654:	00000271 	.word	0x00000271
     658:	41004400 	.word	0x41004400
     65c:	00000531 	.word	0x00000531
     660:	40020000 	.word	0x40020000
     664:	c0020000 	.word	0xc0020000
     668:	00000245 	.word	0x00000245
     66c:	00004b3c 	.word	0x00004b3c
     670:	00001cf7 	.word	0x00001cf7

00000674 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     674:	b580      	push	{r7, lr}
     676:	b082      	sub	sp, #8
     678:	af00      	add	r7, sp, #0
     67a:	6039      	str	r1, [r7, #0]
     67c:	0011      	movs	r1, r2
     67e:	1dfb      	adds	r3, r7, #7
     680:	1c02      	adds	r2, r0, #0
     682:	701a      	strb	r2, [r3, #0]
     684:	1dbb      	adds	r3, r7, #6
     686:	1c0a      	adds	r2, r1, #0
     688:	701a      	strb	r2, [r3, #0]
	if (level) {
     68a:	1dbb      	adds	r3, r7, #6
     68c:	781b      	ldrb	r3, [r3, #0]
     68e:	2b00      	cmp	r3, #0
     690:	d008      	beq.n	6a4 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     692:	683a      	ldr	r2, [r7, #0]
     694:	1dfb      	adds	r3, r7, #7
     696:	7819      	ldrb	r1, [r3, #0]
     698:	23c0      	movs	r3, #192	; 0xc0
     69a:	05db      	lsls	r3, r3, #23
     69c:	0018      	movs	r0, r3
     69e:	4b07      	ldr	r3, [pc, #28]	; (6bc <_gpio_set_level+0x48>)
     6a0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     6a2:	e007      	b.n	6b4 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     6a4:	683a      	ldr	r2, [r7, #0]
     6a6:	1dfb      	adds	r3, r7, #7
     6a8:	7819      	ldrb	r1, [r3, #0]
     6aa:	23c0      	movs	r3, #192	; 0xc0
     6ac:	05db      	lsls	r3, r3, #23
     6ae:	0018      	movs	r0, r3
     6b0:	4b03      	ldr	r3, [pc, #12]	; (6c0 <_gpio_set_level+0x4c>)
     6b2:	4798      	blx	r3
}
     6b4:	46c0      	nop			; (mov r8, r8)
     6b6:	46bd      	mov	sp, r7
     6b8:	b002      	add	sp, #8
     6ba:	bd80      	pop	{r7, pc}
     6bc:	0000029d 	.word	0x0000029d
     6c0:	000002c9 	.word	0x000002c9

000006c4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     6c4:	b590      	push	{r4, r7, lr}
     6c6:	b083      	sub	sp, #12
     6c8:	af00      	add	r7, sp, #0
     6ca:	0004      	movs	r4, r0
     6cc:	0008      	movs	r0, r1
     6ce:	0011      	movs	r1, r2
     6d0:	1dfb      	adds	r3, r7, #7
     6d2:	1c22      	adds	r2, r4, #0
     6d4:	701a      	strb	r2, [r3, #0]
     6d6:	1dbb      	adds	r3, r7, #6
     6d8:	1c02      	adds	r2, r0, #0
     6da:	701a      	strb	r2, [r3, #0]
     6dc:	1d7b      	adds	r3, r7, #5
     6de:	1c0a      	adds	r2, r1, #0
     6e0:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     6e2:	1d7b      	adds	r3, r7, #5
     6e4:	781b      	ldrb	r3, [r3, #0]
     6e6:	2b01      	cmp	r3, #1
     6e8:	d00c      	beq.n	704 <_gpio_set_pin_pull_mode+0x40>
     6ea:	2b02      	cmp	r3, #2
     6ec:	d029      	beq.n	742 <_gpio_set_pin_pull_mode+0x7e>
     6ee:	2b00      	cmp	r3, #0
     6f0:	d146      	bne.n	780 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     6f2:	1dbb      	adds	r3, r7, #6
     6f4:	781a      	ldrb	r2, [r3, #0]
     6f6:	1dfb      	adds	r3, r7, #7
     6f8:	781b      	ldrb	r3, [r3, #0]
     6fa:	4827      	ldr	r0, [pc, #156]	; (798 <_gpio_set_pin_pull_mode+0xd4>)
     6fc:	0019      	movs	r1, r3
     6fe:	4b27      	ldr	r3, [pc, #156]	; (79c <_gpio_set_pin_pull_mode+0xd8>)
     700:	4798      	blx	r3
		break;
     702:	e044      	b.n	78e <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     704:	1dbb      	adds	r3, r7, #6
     706:	781b      	ldrb	r3, [r3, #0]
     708:	2201      	movs	r2, #1
     70a:	409a      	lsls	r2, r3
     70c:	1dfb      	adds	r3, r7, #7
     70e:	7819      	ldrb	r1, [r3, #0]
     710:	23c0      	movs	r3, #192	; 0xc0
     712:	05db      	lsls	r3, r3, #23
     714:	0018      	movs	r0, r3
     716:	4b22      	ldr	r3, [pc, #136]	; (7a0 <_gpio_set_pin_pull_mode+0xdc>)
     718:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     71a:	1dbb      	adds	r3, r7, #6
     71c:	781a      	ldrb	r2, [r3, #0]
     71e:	1dfb      	adds	r3, r7, #7
     720:	781b      	ldrb	r3, [r3, #0]
     722:	481d      	ldr	r0, [pc, #116]	; (798 <_gpio_set_pin_pull_mode+0xd4>)
     724:	0019      	movs	r1, r3
     726:	4b1f      	ldr	r3, [pc, #124]	; (7a4 <_gpio_set_pin_pull_mode+0xe0>)
     728:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     72a:	1dbb      	adds	r3, r7, #6
     72c:	781b      	ldrb	r3, [r3, #0]
     72e:	2201      	movs	r2, #1
     730:	409a      	lsls	r2, r3
     732:	1dfb      	adds	r3, r7, #7
     734:	7819      	ldrb	r1, [r3, #0]
     736:	23c0      	movs	r3, #192	; 0xc0
     738:	05db      	lsls	r3, r3, #23
     73a:	0018      	movs	r0, r3
     73c:	4b1a      	ldr	r3, [pc, #104]	; (7a8 <_gpio_set_pin_pull_mode+0xe4>)
     73e:	4798      	blx	r3
		break;
     740:	e025      	b.n	78e <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     742:	1dbb      	adds	r3, r7, #6
     744:	781b      	ldrb	r3, [r3, #0]
     746:	2201      	movs	r2, #1
     748:	409a      	lsls	r2, r3
     74a:	1dfb      	adds	r3, r7, #7
     74c:	7819      	ldrb	r1, [r3, #0]
     74e:	23c0      	movs	r3, #192	; 0xc0
     750:	05db      	lsls	r3, r3, #23
     752:	0018      	movs	r0, r3
     754:	4b12      	ldr	r3, [pc, #72]	; (7a0 <_gpio_set_pin_pull_mode+0xdc>)
     756:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     758:	1dbb      	adds	r3, r7, #6
     75a:	781a      	ldrb	r2, [r3, #0]
     75c:	1dfb      	adds	r3, r7, #7
     75e:	781b      	ldrb	r3, [r3, #0]
     760:	480d      	ldr	r0, [pc, #52]	; (798 <_gpio_set_pin_pull_mode+0xd4>)
     762:	0019      	movs	r1, r3
     764:	4b0f      	ldr	r3, [pc, #60]	; (7a4 <_gpio_set_pin_pull_mode+0xe0>)
     766:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     768:	1dbb      	adds	r3, r7, #6
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	2201      	movs	r2, #1
     76e:	409a      	lsls	r2, r3
     770:	1dfb      	adds	r3, r7, #7
     772:	7819      	ldrb	r1, [r3, #0]
     774:	23c0      	movs	r3, #192	; 0xc0
     776:	05db      	lsls	r3, r3, #23
     778:	0018      	movs	r0, r3
     77a:	4b0c      	ldr	r3, [pc, #48]	; (7ac <_gpio_set_pin_pull_mode+0xe8>)
     77c:	4798      	blx	r3
		break;
     77e:	e006      	b.n	78e <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     780:	4b0b      	ldr	r3, [pc, #44]	; (7b0 <_gpio_set_pin_pull_mode+0xec>)
     782:	2288      	movs	r2, #136	; 0x88
     784:	0019      	movs	r1, r3
     786:	2000      	movs	r0, #0
     788:	4b0a      	ldr	r3, [pc, #40]	; (7b4 <_gpio_set_pin_pull_mode+0xf0>)
     78a:	4798      	blx	r3
		break;
     78c:	46c0      	nop			; (mov r8, r8)
	}
}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	46bd      	mov	sp, r7
     792:	b003      	add	sp, #12
     794:	bd90      	pop	{r4, r7, pc}
     796:	46c0      	nop			; (mov r8, r8)
     798:	41004400 	.word	0x41004400
     79c:	000004db 	.word	0x000004db
     7a0:	00000271 	.word	0x00000271
     7a4:	00000485 	.word	0x00000485
     7a8:	0000029d 	.word	0x0000029d
     7ac:	000002c9 	.word	0x000002c9
     7b0:	00004b3c 	.word	0x00004b3c
     7b4:	00001cf7 	.word	0x00001cf7

000007b8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     7b8:	b590      	push	{r4, r7, lr}
     7ba:	b085      	sub	sp, #20
     7bc:	af00      	add	r7, sp, #0
     7be:	6078      	str	r0, [r7, #4]
     7c0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	095a      	lsrs	r2, r3, #5
     7c6:	230f      	movs	r3, #15
     7c8:	18fb      	adds	r3, r7, r3
     7ca:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     7cc:	687b      	ldr	r3, [r7, #4]
     7ce:	b2da      	uxtb	r2, r3
     7d0:	230e      	movs	r3, #14
     7d2:	18fb      	adds	r3, r7, r3
     7d4:	211f      	movs	r1, #31
     7d6:	400a      	ands	r2, r1
     7d8:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     7da:	683b      	ldr	r3, [r7, #0]
     7dc:	3301      	adds	r3, #1
     7de:	d10a      	bne.n	7f6 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     7e0:	230e      	movs	r3, #14
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	781a      	ldrb	r2, [r3, #0]
     7e6:	230f      	movs	r3, #15
     7e8:	18fb      	adds	r3, r7, r3
     7ea:	7819      	ldrb	r1, [r3, #0]
     7ec:	481b      	ldr	r0, [pc, #108]	; (85c <_gpio_set_pin_function+0xa4>)
     7ee:	2300      	movs	r3, #0
     7f0:	4c1b      	ldr	r4, [pc, #108]	; (860 <_gpio_set_pin_function+0xa8>)
     7f2:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     7f4:	e02e      	b.n	854 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     7f6:	230e      	movs	r3, #14
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	781a      	ldrb	r2, [r3, #0]
     7fc:	230f      	movs	r3, #15
     7fe:	18fb      	adds	r3, r7, r3
     800:	7819      	ldrb	r1, [r3, #0]
     802:	4816      	ldr	r0, [pc, #88]	; (85c <_gpio_set_pin_function+0xa4>)
     804:	2301      	movs	r3, #1
     806:	4c16      	ldr	r4, [pc, #88]	; (860 <_gpio_set_pin_function+0xa8>)
     808:	47a0      	blx	r4
		if (pin & 1) {
     80a:	230e      	movs	r3, #14
     80c:	18fb      	adds	r3, r7, r3
     80e:	781b      	ldrb	r3, [r3, #0]
     810:	2201      	movs	r2, #1
     812:	4013      	ands	r3, r2
     814:	d00f      	beq.n	836 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     816:	230e      	movs	r3, #14
     818:	18fb      	adds	r3, r7, r3
     81a:	781b      	ldrb	r3, [r3, #0]
     81c:	085b      	lsrs	r3, r3, #1
     81e:	b2da      	uxtb	r2, r3
     820:	683b      	ldr	r3, [r7, #0]
     822:	b2d8      	uxtb	r0, r3
     824:	230f      	movs	r3, #15
     826:	18fb      	adds	r3, r7, r3
     828:	7819      	ldrb	r1, [r3, #0]
     82a:	4c0c      	ldr	r4, [pc, #48]	; (85c <_gpio_set_pin_function+0xa4>)
     82c:	0003      	movs	r3, r0
     82e:	0020      	movs	r0, r4
     830:	4c0c      	ldr	r4, [pc, #48]	; (864 <_gpio_set_pin_function+0xac>)
     832:	47a0      	blx	r4
}
     834:	e00e      	b.n	854 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     836:	230e      	movs	r3, #14
     838:	18fb      	adds	r3, r7, r3
     83a:	781b      	ldrb	r3, [r3, #0]
     83c:	085b      	lsrs	r3, r3, #1
     83e:	b2da      	uxtb	r2, r3
     840:	683b      	ldr	r3, [r7, #0]
     842:	b2d8      	uxtb	r0, r3
     844:	230f      	movs	r3, #15
     846:	18fb      	adds	r3, r7, r3
     848:	7819      	ldrb	r1, [r3, #0]
     84a:	4c04      	ldr	r4, [pc, #16]	; (85c <_gpio_set_pin_function+0xa4>)
     84c:	0003      	movs	r3, r0
     84e:	0020      	movs	r0, r4
     850:	4c05      	ldr	r4, [pc, #20]	; (868 <_gpio_set_pin_function+0xb0>)
     852:	47a0      	blx	r4
}
     854:	46c0      	nop			; (mov r8, r8)
     856:	46bd      	mov	sp, r7
     858:	b005      	add	sp, #20
     85a:	bd90      	pop	{r4, r7, pc}
     85c:	41004400 	.word	0x41004400
     860:	00000403 	.word	0x00000403
     864:	0000037d 	.word	0x0000037d
     868:	000002f5 	.word	0x000002f5

0000086c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     86c:	b580      	push	{r7, lr}
     86e:	b082      	sub	sp, #8
     870:	af00      	add	r7, sp, #0
     872:	0002      	movs	r2, r0
     874:	1dfb      	adds	r3, r7, #7
     876:	701a      	strb	r2, [r3, #0]
     878:	1dbb      	adds	r3, r7, #6
     87a:	1c0a      	adds	r2, r1, #0
     87c:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     87e:	1dfb      	adds	r3, r7, #7
     880:	781b      	ldrb	r3, [r3, #0]
     882:	095b      	lsrs	r3, r3, #5
     884:	b2d8      	uxtb	r0, r3
     886:	1dfb      	adds	r3, r7, #7
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	221f      	movs	r2, #31
     88c:	4013      	ands	r3, r2
     88e:	b2d9      	uxtb	r1, r3
     890:	1dbb      	adds	r3, r7, #6
     892:	781b      	ldrb	r3, [r3, #0]
     894:	001a      	movs	r2, r3
     896:	4b03      	ldr	r3, [pc, #12]	; (8a4 <gpio_set_pin_pull_mode+0x38>)
     898:	4798      	blx	r3
}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	46bd      	mov	sp, r7
     89e:	b002      	add	sp, #8
     8a0:	bd80      	pop	{r7, pc}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	000006c5 	.word	0x000006c5

000008a8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     8a8:	b580      	push	{r7, lr}
     8aa:	b082      	sub	sp, #8
     8ac:	af00      	add	r7, sp, #0
     8ae:	6078      	str	r0, [r7, #4]
     8b0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     8b2:	683a      	ldr	r2, [r7, #0]
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	0011      	movs	r1, r2
     8b8:	0018      	movs	r0, r3
     8ba:	4b03      	ldr	r3, [pc, #12]	; (8c8 <gpio_set_pin_function+0x20>)
     8bc:	4798      	blx	r3
}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	46bd      	mov	sp, r7
     8c2:	b002      	add	sp, #8
     8c4:	bd80      	pop	{r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	000007b9 	.word	0x000007b9

000008cc <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b082      	sub	sp, #8
     8d0:	af00      	add	r7, sp, #0
     8d2:	0002      	movs	r2, r0
     8d4:	1dfb      	adds	r3, r7, #7
     8d6:	701a      	strb	r2, [r3, #0]
     8d8:	1dbb      	adds	r3, r7, #6
     8da:	1c0a      	adds	r2, r1, #0
     8dc:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     8de:	1dfb      	adds	r3, r7, #7
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	095b      	lsrs	r3, r3, #5
     8e4:	b2d8      	uxtb	r0, r3
     8e6:	1dfb      	adds	r3, r7, #7
     8e8:	781b      	ldrb	r3, [r3, #0]
     8ea:	221f      	movs	r2, #31
     8ec:	4013      	ands	r3, r2
     8ee:	2201      	movs	r2, #1
     8f0:	409a      	lsls	r2, r3
     8f2:	0011      	movs	r1, r2
     8f4:	1dbb      	adds	r3, r7, #6
     8f6:	781b      	ldrb	r3, [r3, #0]
     8f8:	001a      	movs	r2, r3
     8fa:	4b03      	ldr	r3, [pc, #12]	; (908 <gpio_set_pin_direction+0x3c>)
     8fc:	4798      	blx	r3
}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	46bd      	mov	sp, r7
     902:	b002      	add	sp, #8
     904:	bd80      	pop	{r7, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	0000055d 	.word	0x0000055d

0000090c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     90c:	b580      	push	{r7, lr}
     90e:	b082      	sub	sp, #8
     910:	af00      	add	r7, sp, #0
     912:	0002      	movs	r2, r0
     914:	1dfb      	adds	r3, r7, #7
     916:	701a      	strb	r2, [r3, #0]
     918:	1dbb      	adds	r3, r7, #6
     91a:	1c0a      	adds	r2, r1, #0
     91c:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     91e:	1dfb      	adds	r3, r7, #7
     920:	781b      	ldrb	r3, [r3, #0]
     922:	095b      	lsrs	r3, r3, #5
     924:	b2d8      	uxtb	r0, r3
     926:	1dfb      	adds	r3, r7, #7
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	221f      	movs	r2, #31
     92c:	4013      	ands	r3, r2
     92e:	2201      	movs	r2, #1
     930:	409a      	lsls	r2, r3
     932:	0011      	movs	r1, r2
     934:	1dbb      	adds	r3, r7, #6
     936:	781b      	ldrb	r3, [r3, #0]
     938:	001a      	movs	r2, r3
     93a:	4b03      	ldr	r3, [pc, #12]	; (948 <gpio_set_pin_level+0x3c>)
     93c:	4798      	blx	r3
}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	46bd      	mov	sp, r7
     942:	b002      	add	sp, #8
     944:	bd80      	pop	{r7, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	00000675 	.word	0x00000675

0000094c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     94c:	b580      	push	{r7, lr}
     94e:	af00      	add	r7, sp, #0
	_init_chip();
     950:	4b02      	ldr	r3, [pc, #8]	; (95c <init_mcu+0x10>)
     952:	4798      	blx	r3
}
     954:	46c0      	nop			; (mov r8, r8)
     956:	46bd      	mov	sp, r7
     958:	bd80      	pop	{r7, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	00002815 	.word	0x00002815

00000960 <_gclk_enable_channel>:
 *
 * \param[in] channel The channel to enable clock for
 * \param[in] source The clock source for the given channel
 */
static inline void _gclk_enable_channel(const uint8_t channel, const uint8_t source)
{
     960:	b580      	push	{r7, lr}
     962:	b082      	sub	sp, #8
     964:	af00      	add	r7, sp, #0
     966:	0002      	movs	r2, r0
     968:	1dfb      	adds	r3, r7, #7
     96a:	701a      	strb	r2, [r3, #0]
     96c:	1dbb      	adds	r3, r7, #6
     96e:	1c0a      	adds	r2, r1, #0
     970:	701a      	strb	r2, [r3, #0]

	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(channel) | GCLK_CLKCTRL_GEN(source) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
     972:	1dfb      	adds	r3, r7, #7
     974:	781b      	ldrb	r3, [r3, #0]
     976:	b29b      	uxth	r3, r3
     978:	223f      	movs	r2, #63	; 0x3f
     97a:	4013      	ands	r3, r2
     97c:	b29a      	uxth	r2, r3
     97e:	1dbb      	adds	r3, r7, #6
     980:	781b      	ldrb	r3, [r3, #0]
     982:	b29b      	uxth	r3, r3
     984:	021b      	lsls	r3, r3, #8
     986:	b299      	uxth	r1, r3
     988:	23f0      	movs	r3, #240	; 0xf0
     98a:	011b      	lsls	r3, r3, #4
     98c:	400b      	ands	r3, r1
     98e:	b29b      	uxth	r3, r3
     990:	4313      	orrs	r3, r2
     992:	b29b      	uxth	r3, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
     994:	2280      	movs	r2, #128	; 0x80
     996:	01d2      	lsls	r2, r2, #7
     998:	4313      	orrs	r3, r2
     99a:	b29b      	uxth	r3, r3
     99c:	4a04      	ldr	r2, [pc, #16]	; (9b0 <_gclk_enable_channel+0x50>)
     99e:	0019      	movs	r1, r3
     9a0:	0010      	movs	r0, r2
     9a2:	4b04      	ldr	r3, [pc, #16]	; (9b4 <_gclk_enable_channel+0x54>)
     9a4:	4798      	blx	r3
}
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	46bd      	mov	sp, r7
     9aa:	b002      	add	sp, #8
     9ac:	bd80      	pop	{r7, pc}
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	40000c00 	.word	0x40000c00
     9b4:	00000227 	.word	0x00000227

000009b8 <_pm_get_ahb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_ahb_index(const void *const module)
{
     9b8:	b580      	push	{r7, lr}
     9ba:	b082      	sub	sp, #8
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	2b01      	cmp	r3, #1
     9c4:	d101      	bne.n	9ca <_pm_get_ahb_index+0x12>
		return 0;
     9c6:	2300      	movs	r3, #0
     9c8:	e023      	b.n	a12 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	2b02      	cmp	r3, #2
     9ce:	d101      	bne.n	9d4 <_pm_get_ahb_index+0x1c>
		return 1;
     9d0:	2301      	movs	r3, #1
     9d2:	e01e      	b.n	a12 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	2b03      	cmp	r3, #3
     9d8:	d101      	bne.n	9de <_pm_get_ahb_index+0x26>
		return 2;
     9da:	2302      	movs	r3, #2
     9dc:	e019      	b.n	a12 <_pm_get_ahb_index+0x5a>
	}
	if ((uint32_t)module == (uint32_t)DSU) {
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4a0e      	ldr	r2, [pc, #56]	; (a1c <_pm_get_ahb_index+0x64>)
     9e2:	4293      	cmp	r3, r2
     9e4:	d101      	bne.n	9ea <_pm_get_ahb_index+0x32>
		return 3;
     9e6:	2303      	movs	r3, #3
     9e8:	e013      	b.n	a12 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	4a0c      	ldr	r2, [pc, #48]	; (a20 <_pm_get_ahb_index+0x68>)
     9ee:	4293      	cmp	r3, r2
     9f0:	d101      	bne.n	9f6 <_pm_get_ahb_index+0x3e>
		return 4;
     9f2:	2304      	movs	r3, #4
     9f4:	e00d      	b.n	a12 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	4a0a      	ldr	r2, [pc, #40]	; (a24 <_pm_get_ahb_index+0x6c>)
     9fa:	4293      	cmp	r3, r2
     9fc:	d101      	bne.n	a02 <_pm_get_ahb_index+0x4a>
		return 5;
     9fe:	2305      	movs	r3, #5
     a00:	e007      	b.n	a12 <_pm_get_ahb_index+0x5a>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	4a08      	ldr	r2, [pc, #32]	; (a28 <_pm_get_ahb_index+0x70>)
     a06:	4293      	cmp	r3, r2
     a08:	d101      	bne.n	a0e <_pm_get_ahb_index+0x56>
		return 6;
     a0a:	2306      	movs	r3, #6
     a0c:	e001      	b.n	a12 <_pm_get_ahb_index+0x5a>
	}
#endif

	return ERR_INVALID_ARG;
     a0e:	230d      	movs	r3, #13
     a10:	425b      	negs	r3, r3
}
     a12:	0018      	movs	r0, r3
     a14:	46bd      	mov	sp, r7
     a16:	b002      	add	sp, #8
     a18:	bd80      	pop	{r7, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	41002000 	.word	0x41002000
     a20:	41004000 	.word	0x41004000
     a24:	41004800 	.word	0x41004800
     a28:	41005000 	.word	0x41005000

00000a2c <_pm_get_apbb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_apbb_index(const void *const module)
{
     a2c:	b580      	push	{r7, lr}
     a2e:	b082      	sub	sp, #8
     a30:	af00      	add	r7, sp, #0
     a32:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PAC1) {
     a34:	687a      	ldr	r2, [r7, #4]
     a36:	2382      	movs	r3, #130	; 0x82
     a38:	05db      	lsls	r3, r3, #23
     a3a:	429a      	cmp	r2, r3
     a3c:	d101      	bne.n	a42 <_pm_get_apbb_index+0x16>
		return 0;
     a3e:	2300      	movs	r3, #0
     a40:	e01f      	b.n	a82 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DSU) {
     a42:	687b      	ldr	r3, [r7, #4]
     a44:	4a11      	ldr	r2, [pc, #68]	; (a8c <_pm_get_apbb_index+0x60>)
     a46:	4293      	cmp	r3, r2
     a48:	d101      	bne.n	a4e <_pm_get_apbb_index+0x22>
		return 1;
     a4a:	2301      	movs	r3, #1
     a4c:	e019      	b.n	a82 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	4a0f      	ldr	r2, [pc, #60]	; (a90 <_pm_get_apbb_index+0x64>)
     a52:	4293      	cmp	r3, r2
     a54:	d101      	bne.n	a5a <_pm_get_apbb_index+0x2e>
		return 2;
     a56:	2302      	movs	r3, #2
     a58:	e013      	b.n	a82 <_pm_get_apbb_index+0x56>
	}
	if ((uint32_t)module == (uint32_t)PORT) {
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	4a0d      	ldr	r2, [pc, #52]	; (a94 <_pm_get_apbb_index+0x68>)
     a5e:	4293      	cmp	r3, r2
     a60:	d101      	bne.n	a66 <_pm_get_apbb_index+0x3a>
		return 3;
     a62:	2303      	movs	r3, #3
     a64:	e00d      	b.n	a82 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	4a0b      	ldr	r2, [pc, #44]	; (a98 <_pm_get_apbb_index+0x6c>)
     a6a:	4293      	cmp	r3, r2
     a6c:	d101      	bne.n	a72 <_pm_get_apbb_index+0x46>
		return 4;
     a6e:	2304      	movs	r3, #4
     a70:	e007      	b.n	a82 <_pm_get_apbb_index+0x56>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	4a09      	ldr	r2, [pc, #36]	; (a9c <_pm_get_apbb_index+0x70>)
     a76:	4293      	cmp	r3, r2
     a78:	d101      	bne.n	a7e <_pm_get_apbb_index+0x52>
		return 5;
     a7a:	2305      	movs	r3, #5
     a7c:	e001      	b.n	a82 <_pm_get_apbb_index+0x56>
	}
#endif

	return ERR_INVALID_ARG;
     a7e:	230d      	movs	r3, #13
     a80:	425b      	negs	r3, r3
}
     a82:	0018      	movs	r0, r3
     a84:	46bd      	mov	sp, r7
     a86:	b002      	add	sp, #8
     a88:	bd80      	pop	{r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	41002000 	.word	0x41002000
     a90:	41004000 	.word	0x41004000
     a94:	41004400 	.word	0x41004400
     a98:	41004800 	.word	0x41004800
     a9c:	41005000 	.word	0x41005000

00000aa0 <_pm_enable_bus_clock>:
 *
 * \param[in] bus A bus to enable clock on
 * \param[in] module A hardware module to enable clock for
 */
static inline void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
     aa0:	b580      	push	{r7, lr}
     aa2:	b084      	sub	sp, #16
     aa4:	af00      	add	r7, sp, #0
     aa6:	0002      	movs	r2, r0
     aa8:	6039      	str	r1, [r7, #0]
     aaa:	1dfb      	adds	r3, r7, #7
     aac:	701a      	strb	r2, [r3, #0]
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00) >> 10;
     aae:	683b      	ldr	r3, [r7, #0]
     ab0:	0a9b      	lsrs	r3, r3, #10
     ab2:	223f      	movs	r2, #63	; 0x3f
     ab4:	4013      	ands	r3, r2
     ab6:	60fb      	str	r3, [r7, #12]

	switch (bus) {
     ab8:	1dfb      	adds	r3, r7, #7
     aba:	781b      	ldrb	r3, [r3, #0]
     abc:	2b01      	cmp	r3, #1
     abe:	d01e      	beq.n	afe <_pm_enable_bus_clock+0x5e>
     ac0:	dc02      	bgt.n	ac8 <_pm_enable_bus_clock+0x28>
     ac2:	2b00      	cmp	r3, #0
     ac4:	d005      	beq.n	ad2 <_pm_enable_bus_clock+0x32>
     ac6:	e044      	b.n	b52 <_pm_enable_bus_clock+0xb2>
     ac8:	2b02      	cmp	r3, #2
     aca:	d022      	beq.n	b12 <_pm_enable_bus_clock+0x72>
     acc:	2b03      	cmp	r3, #3
     ace:	d036      	beq.n	b3e <_pm_enable_bus_clock+0x9e>
     ad0:	e03f      	b.n	b52 <_pm_enable_bus_clock+0xb2>
	case PM_BUS_AHB:
		if (_pm_get_ahb_index(module) >= 0) {
     ad2:	683b      	ldr	r3, [r7, #0]
     ad4:	0018      	movs	r0, r3
     ad6:	4b26      	ldr	r3, [pc, #152]	; (b70 <_pm_enable_bus_clock+0xd0>)
     ad8:	4798      	blx	r3
     ada:	1e03      	subs	r3, r0, #0
     adc:	db40      	blt.n	b60 <_pm_enable_bus_clock+0xc0>
			peripheral = (uint32_t)_pm_get_ahb_index(module);
     ade:	683b      	ldr	r3, [r7, #0]
     ae0:	0018      	movs	r0, r3
     ae2:	4b23      	ldr	r3, [pc, #140]	; (b70 <_pm_enable_bus_clock+0xd0>)
     ae4:	4798      	blx	r3
     ae6:	0003      	movs	r3, r0
     ae8:	60fb      	str	r3, [r7, #12]
			PM->AHBMASK.reg |= 1 << peripheral;
     aea:	4b22      	ldr	r3, [pc, #136]	; (b74 <_pm_enable_bus_clock+0xd4>)
     aec:	4a21      	ldr	r2, [pc, #132]	; (b74 <_pm_enable_bus_clock+0xd4>)
     aee:	6952      	ldr	r2, [r2, #20]
     af0:	2001      	movs	r0, #1
     af2:	68f9      	ldr	r1, [r7, #12]
     af4:	4088      	lsls	r0, r1
     af6:	0001      	movs	r1, r0
     af8:	430a      	orrs	r2, r1
     afa:	615a      	str	r2, [r3, #20]
		}
		break;
     afc:	e030      	b.n	b60 <_pm_enable_bus_clock+0xc0>
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
     afe:	4b1d      	ldr	r3, [pc, #116]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b00:	4a1c      	ldr	r2, [pc, #112]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b02:	6992      	ldr	r2, [r2, #24]
     b04:	2001      	movs	r0, #1
     b06:	68f9      	ldr	r1, [r7, #12]
     b08:	4088      	lsls	r0, r1
     b0a:	0001      	movs	r1, r0
     b0c:	430a      	orrs	r2, r1
     b0e:	619a      	str	r2, [r3, #24]
		break;
     b10:	e029      	b.n	b66 <_pm_enable_bus_clock+0xc6>
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
     b12:	683b      	ldr	r3, [r7, #0]
     b14:	0018      	movs	r0, r3
     b16:	4b18      	ldr	r3, [pc, #96]	; (b78 <_pm_enable_bus_clock+0xd8>)
     b18:	4798      	blx	r3
     b1a:	1e03      	subs	r3, r0, #0
     b1c:	db22      	blt.n	b64 <_pm_enable_bus_clock+0xc4>
			peripheral = (uint32_t)_pm_get_apbb_index(module);
     b1e:	683b      	ldr	r3, [r7, #0]
     b20:	0018      	movs	r0, r3
     b22:	4b15      	ldr	r3, [pc, #84]	; (b78 <_pm_enable_bus_clock+0xd8>)
     b24:	4798      	blx	r3
     b26:	0003      	movs	r3, r0
     b28:	60fb      	str	r3, [r7, #12]
			PM->APBBMASK.reg |= 1 << peripheral;
     b2a:	4b12      	ldr	r3, [pc, #72]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b2c:	4a11      	ldr	r2, [pc, #68]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b2e:	69d2      	ldr	r2, [r2, #28]
     b30:	2001      	movs	r0, #1
     b32:	68f9      	ldr	r1, [r7, #12]
     b34:	4088      	lsls	r0, r1
     b36:	0001      	movs	r1, r0
     b38:	430a      	orrs	r2, r1
     b3a:	61da      	str	r2, [r3, #28]
		}
		break;
     b3c:	e012      	b.n	b64 <_pm_enable_bus_clock+0xc4>
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     b3e:	4b0d      	ldr	r3, [pc, #52]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b40:	4a0c      	ldr	r2, [pc, #48]	; (b74 <_pm_enable_bus_clock+0xd4>)
     b42:	6a12      	ldr	r2, [r2, #32]
     b44:	2001      	movs	r0, #1
     b46:	68f9      	ldr	r1, [r7, #12]
     b48:	4088      	lsls	r0, r1
     b4a:	0001      	movs	r1, r0
     b4c:	430a      	orrs	r2, r1
     b4e:	621a      	str	r2, [r3, #32]
		break;
     b50:	e009      	b.n	b66 <_pm_enable_bus_clock+0xc6>
	default:
		ASSERT(false);
     b52:	4b0a      	ldr	r3, [pc, #40]	; (b7c <_pm_enable_bus_clock+0xdc>)
     b54:	229b      	movs	r2, #155	; 0x9b
     b56:	0019      	movs	r1, r3
     b58:	2000      	movs	r0, #0
     b5a:	4b09      	ldr	r3, [pc, #36]	; (b80 <_pm_enable_bus_clock+0xe0>)
     b5c:	4798      	blx	r3
		break;
     b5e:	e002      	b.n	b66 <_pm_enable_bus_clock+0xc6>
		break;
     b60:	46c0      	nop			; (mov r8, r8)
     b62:	e000      	b.n	b66 <_pm_enable_bus_clock+0xc6>
		break;
     b64:	46c0      	nop			; (mov r8, r8)
	}
}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	46bd      	mov	sp, r7
     b6a:	b004      	add	sp, #16
     b6c:	bd80      	pop	{r7, pc}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	000009b9 	.word	0x000009b9
     b74:	40000400 	.word	0x40000400
     b78:	00000a2d 	.word	0x00000a2d
     b7c:	00004b58 	.word	0x00004b58
     b80:	00001cf7 	.word	0x00001cf7

00000b84 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     b84:	b590      	push	{r4, r7, lr}
     b86:	b085      	sub	sp, #20
     b88:	af04      	add	r7, sp, #16
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
     b8a:	4b14      	ldr	r3, [pc, #80]	; (bdc <ADC_0_init+0x58>)
     b8c:	0019      	movs	r1, r3
     b8e:	2003      	movs	r0, #3
     b90:	4b13      	ldr	r3, [pc, #76]	; (be0 <ADC_0_init+0x5c>)
     b92:	4798      	blx	r3
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
     b94:	2100      	movs	r1, #0
     b96:	201e      	movs	r0, #30
     b98:	4b12      	ldr	r3, [pc, #72]	; (be4 <ADC_0_init+0x60>)
     b9a:	4798      	blx	r3
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     b9c:	4a12      	ldr	r2, [pc, #72]	; (be8 <ADC_0_init+0x64>)
     b9e:	490f      	ldr	r1, [pc, #60]	; (bdc <ADC_0_init+0x58>)
     ba0:	4812      	ldr	r0, [pc, #72]	; (bec <ADC_0_init+0x68>)
     ba2:	2300      	movs	r3, #0
     ba4:	9302      	str	r3, [sp, #8]
     ba6:	4b12      	ldr	r3, [pc, #72]	; (bf0 <ADC_0_init+0x6c>)
     ba8:	9301      	str	r3, [sp, #4]
     baa:	2301      	movs	r3, #1
     bac:	9300      	str	r3, [sp, #0]
     bae:	2300      	movs	r3, #0
     bb0:	4c10      	ldr	r4, [pc, #64]	; (bf4 <ADC_0_init+0x70>)
     bb2:	47a0      	blx	r4
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     bb4:	4a10      	ldr	r2, [pc, #64]	; (bf8 <ADC_0_init+0x74>)
     bb6:	480d      	ldr	r0, [pc, #52]	; (bec <ADC_0_init+0x68>)
     bb8:	2310      	movs	r3, #16
     bba:	2100      	movs	r1, #0
     bbc:	4c0f      	ldr	r4, [pc, #60]	; (bfc <ADC_0_init+0x78>)
     bbe:	47a0      	blx	r4

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_OFF);
     bc0:	2100      	movs	r1, #0
     bc2:	2004      	movs	r0, #4
     bc4:	4b0e      	ldr	r3, [pc, #56]	; (c00 <ADC_0_init+0x7c>)
     bc6:	4798      	blx	r3

	gpio_set_pin_function(PA04, PINMUX_PA04B_ADC_AIN4);
     bc8:	4b0e      	ldr	r3, [pc, #56]	; (c04 <ADC_0_init+0x80>)
     bca:	0019      	movs	r1, r3
     bcc:	2004      	movs	r0, #4
     bce:	4b0e      	ldr	r3, [pc, #56]	; (c08 <ADC_0_init+0x84>)
     bd0:	4798      	blx	r3
}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	46bd      	mov	sp, r7
     bd6:	b001      	add	sp, #4
     bd8:	bd90      	pop	{r4, r7, pc}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	42004000 	.word	0x42004000
     be0:	00000aa1 	.word	0x00000aa1
     be4:	00000961 	.word	0x00000961
     be8:	200000ec 	.word	0x200000ec
     bec:	200001b8 	.word	0x200001b8
     bf0:	20000234 	.word	0x20000234
     bf4:	000010d5 	.word	0x000010d5
     bf8:	200000dc 	.word	0x200000dc
     bfc:	000011ed 	.word	0x000011ed
     c00:	000008cd 	.word	0x000008cd
     c04:	00040001 	.word	0x00040001
     c08:	000008a9 	.word	0x000008a9

00000c0c <USART_LORA_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_LORA_CLOCK_init()
{
     c0c:	b580      	push	{r7, lr}
     c0e:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
     c10:	4b05      	ldr	r3, [pc, #20]	; (c28 <USART_LORA_CLOCK_init+0x1c>)
     c12:	0019      	movs	r1, r3
     c14:	2003      	movs	r0, #3
     c16:	4b05      	ldr	r3, [pc, #20]	; (c2c <USART_LORA_CLOCK_init+0x20>)
     c18:	4798      	blx	r3
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
     c1a:	2100      	movs	r1, #0
     c1c:	2014      	movs	r0, #20
     c1e:	4b04      	ldr	r3, [pc, #16]	; (c30 <USART_LORA_CLOCK_init+0x24>)
     c20:	4798      	blx	r3
}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	46bd      	mov	sp, r7
     c26:	bd80      	pop	{r7, pc}
     c28:	42000800 	.word	0x42000800
     c2c:	00000aa1 	.word	0x00000aa1
     c30:	00000961 	.word	0x00000961

00000c34 <USART_LORA_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_LORA_PORT_init()
{
     c34:	b580      	push	{r7, lr}
     c36:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
     c38:	4b06      	ldr	r3, [pc, #24]	; (c54 <USART_LORA_PORT_init+0x20>)
     c3a:	0019      	movs	r1, r3
     c3c:	2005      	movs	r0, #5
     c3e:	4b06      	ldr	r3, [pc, #24]	; (c58 <USART_LORA_PORT_init+0x24>)
     c40:	4798      	blx	r3

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
     c42:	4b06      	ldr	r3, [pc, #24]	; (c5c <USART_LORA_PORT_init+0x28>)
     c44:	0019      	movs	r1, r3
     c46:	2006      	movs	r0, #6
     c48:	4b03      	ldr	r3, [pc, #12]	; (c58 <USART_LORA_PORT_init+0x24>)
     c4a:	4798      	blx	r3
}
     c4c:	46c0      	nop			; (mov r8, r8)
     c4e:	46bd      	mov	sp, r7
     c50:	bd80      	pop	{r7, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	00050003 	.word	0x00050003
     c58:	000008a9 	.word	0x000008a9
     c5c:	00060003 	.word	0x00060003

00000c60 <USART_LORA_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_LORA_init(void)
{
     c60:	b590      	push	{r4, r7, lr}
     c62:	b083      	sub	sp, #12
     c64:	af02      	add	r7, sp, #8
	USART_LORA_CLOCK_init();
     c66:	4b08      	ldr	r3, [pc, #32]	; (c88 <USART_LORA_init+0x28>)
     c68:	4798      	blx	r3
	usart_async_init(&USART_LORA, SERCOM0, USART_LORA_buffer, USART_LORA_BUFFER_SIZE, (void *)NULL);
     c6a:	4a08      	ldr	r2, [pc, #32]	; (c8c <USART_LORA_init+0x2c>)
     c6c:	4908      	ldr	r1, [pc, #32]	; (c90 <USART_LORA_init+0x30>)
     c6e:	4809      	ldr	r0, [pc, #36]	; (c94 <USART_LORA_init+0x34>)
     c70:	2300      	movs	r3, #0
     c72:	9300      	str	r3, [sp, #0]
     c74:	2310      	movs	r3, #16
     c76:	4c08      	ldr	r4, [pc, #32]	; (c98 <USART_LORA_init+0x38>)
     c78:	47a0      	blx	r4
	USART_LORA_PORT_init();
     c7a:	4b08      	ldr	r3, [pc, #32]	; (c9c <USART_LORA_init+0x3c>)
     c7c:	4798      	blx	r3
}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	46bd      	mov	sp, r7
     c82:	b001      	add	sp, #4
     c84:	bd90      	pop	{r4, r7, pc}
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	00000c0d 	.word	0x00000c0d
     c8c:	200000f0 	.word	0x200000f0
     c90:	42000800 	.word	0x42000800
     c94:	200001e4 	.word	0x200001e4
     c98:	000019ad 	.word	0x000019ad
     c9c:	00000c35 	.word	0x00000c35

00000ca0 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     ca0:	b580      	push	{r7, lr}
     ca2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA08,
     ca4:	2100      	movs	r1, #0
     ca6:	2008      	movs	r0, #8
     ca8:	4b09      	ldr	r3, [pc, #36]	; (cd0 <I2C_0_PORT_init+0x30>)
     caa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA08, PINMUX_PA08D_SERCOM2_PAD0);
     cac:	4b09      	ldr	r3, [pc, #36]	; (cd4 <I2C_0_PORT_init+0x34>)
     cae:	0019      	movs	r1, r3
     cb0:	2008      	movs	r0, #8
     cb2:	4b09      	ldr	r3, [pc, #36]	; (cd8 <I2C_0_PORT_init+0x38>)
     cb4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA09,
     cb6:	2100      	movs	r1, #0
     cb8:	2009      	movs	r0, #9
     cba:	4b05      	ldr	r3, [pc, #20]	; (cd0 <I2C_0_PORT_init+0x30>)
     cbc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
     cbe:	4b07      	ldr	r3, [pc, #28]	; (cdc <I2C_0_PORT_init+0x3c>)
     cc0:	0019      	movs	r1, r3
     cc2:	2009      	movs	r0, #9
     cc4:	4b04      	ldr	r3, [pc, #16]	; (cd8 <I2C_0_PORT_init+0x38>)
     cc6:	4798      	blx	r3
}
     cc8:	46c0      	nop			; (mov r8, r8)
     cca:	46bd      	mov	sp, r7
     ccc:	bd80      	pop	{r7, pc}
     cce:	46c0      	nop			; (mov r8, r8)
     cd0:	0000086d 	.word	0x0000086d
     cd4:	00080003 	.word	0x00080003
     cd8:	000008a9 	.word	0x000008a9
     cdc:	00090003 	.word	0x00090003

00000ce0 <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
     ce0:	b580      	push	{r7, lr}
     ce2:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
     ce4:	4b07      	ldr	r3, [pc, #28]	; (d04 <I2C_0_CLOCK_init+0x24>)
     ce6:	0019      	movs	r1, r3
     ce8:	2003      	movs	r0, #3
     cea:	4b07      	ldr	r3, [pc, #28]	; (d08 <I2C_0_CLOCK_init+0x28>)
     cec:	4798      	blx	r3
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
     cee:	2100      	movs	r1, #0
     cf0:	2016      	movs	r0, #22
     cf2:	4b06      	ldr	r3, [pc, #24]	; (d0c <I2C_0_CLOCK_init+0x2c>)
     cf4:	4798      	blx	r3
	_gclk_enable_channel(SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC);
     cf6:	2103      	movs	r1, #3
     cf8:	2013      	movs	r0, #19
     cfa:	4b04      	ldr	r3, [pc, #16]	; (d0c <I2C_0_CLOCK_init+0x2c>)
     cfc:	4798      	blx	r3
}
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	46bd      	mov	sp, r7
     d02:	bd80      	pop	{r7, pc}
     d04:	42001000 	.word	0x42001000
     d08:	00000aa1 	.word	0x00000aa1
     d0c:	00000961 	.word	0x00000961

00000d10 <I2C_0_init>:

void I2C_0_init(void)
{
     d10:	b580      	push	{r7, lr}
     d12:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
     d14:	4b06      	ldr	r3, [pc, #24]	; (d30 <I2C_0_init+0x20>)
     d16:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM2);
     d18:	4a06      	ldr	r2, [pc, #24]	; (d34 <I2C_0_init+0x24>)
     d1a:	4b07      	ldr	r3, [pc, #28]	; (d38 <I2C_0_init+0x28>)
     d1c:	0011      	movs	r1, r2
     d1e:	0018      	movs	r0, r3
     d20:	4b06      	ldr	r3, [pc, #24]	; (d3c <I2C_0_init+0x2c>)
     d22:	4798      	blx	r3
	I2C_0_PORT_init();
     d24:	4b06      	ldr	r3, [pc, #24]	; (d40 <I2C_0_init+0x30>)
     d26:	4798      	blx	r3
}
     d28:	46c0      	nop			; (mov r8, r8)
     d2a:	46bd      	mov	sp, r7
     d2c:	bd80      	pop	{r7, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	00000ce1 	.word	0x00000ce1
     d34:	42001000 	.word	0x42001000
     d38:	200002b8 	.word	0x200002b8
     d3c:	00001571 	.word	0x00001571
     d40:	00000ca1 	.word	0x00000ca1

00000d44 <USART_BT_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_BT_CLOCK_init()
{
     d44:	b580      	push	{r7, lr}
     d46:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
     d48:	4b05      	ldr	r3, [pc, #20]	; (d60 <USART_BT_CLOCK_init+0x1c>)
     d4a:	0019      	movs	r1, r3
     d4c:	2003      	movs	r0, #3
     d4e:	4b05      	ldr	r3, [pc, #20]	; (d64 <USART_BT_CLOCK_init+0x20>)
     d50:	4798      	blx	r3
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
     d52:	2100      	movs	r1, #0
     d54:	2018      	movs	r0, #24
     d56:	4b04      	ldr	r3, [pc, #16]	; (d68 <USART_BT_CLOCK_init+0x24>)
     d58:	4798      	blx	r3
}
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	46bd      	mov	sp, r7
     d5e:	bd80      	pop	{r7, pc}
     d60:	42001800 	.word	0x42001800
     d64:	00000aa1 	.word	0x00000aa1
     d68:	00000961 	.word	0x00000961

00000d6c <USART_BT_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_BT_PORT_init()
{
     d6c:	b580      	push	{r7, lr}
     d6e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13C_SERCOM4_PAD1);
     d70:	4b06      	ldr	r3, [pc, #24]	; (d8c <USART_BT_PORT_init+0x20>)
     d72:	0019      	movs	r1, r3
     d74:	202d      	movs	r0, #45	; 0x2d
     d76:	4b06      	ldr	r3, [pc, #24]	; (d90 <USART_BT_PORT_init+0x24>)
     d78:	4798      	blx	r3

	gpio_set_pin_function(PB14, PINMUX_PB14C_SERCOM4_PAD2);
     d7a:	4b06      	ldr	r3, [pc, #24]	; (d94 <USART_BT_PORT_init+0x28>)
     d7c:	0019      	movs	r1, r3
     d7e:	202e      	movs	r0, #46	; 0x2e
     d80:	4b03      	ldr	r3, [pc, #12]	; (d90 <USART_BT_PORT_init+0x24>)
     d82:	4798      	blx	r3
}
     d84:	46c0      	nop			; (mov r8, r8)
     d86:	46bd      	mov	sp, r7
     d88:	bd80      	pop	{r7, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	002d0002 	.word	0x002d0002
     d90:	000008a9 	.word	0x000008a9
     d94:	002e0002 	.word	0x002e0002

00000d98 <USART_BT_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_BT_init(void)
{
     d98:	b590      	push	{r4, r7, lr}
     d9a:	b083      	sub	sp, #12
     d9c:	af02      	add	r7, sp, #8
	USART_BT_CLOCK_init();
     d9e:	4b08      	ldr	r3, [pc, #32]	; (dc0 <USART_BT_init+0x28>)
     da0:	4798      	blx	r3
	usart_async_init(&USART_BT, SERCOM4, USART_BT_buffer, USART_BT_BUFFER_SIZE, (void *)NULL);
     da2:	4a08      	ldr	r2, [pc, #32]	; (dc4 <USART_BT_init+0x2c>)
     da4:	4908      	ldr	r1, [pc, #32]	; (dc8 <USART_BT_init+0x30>)
     da6:	4809      	ldr	r0, [pc, #36]	; (dcc <USART_BT_init+0x34>)
     da8:	2300      	movs	r3, #0
     daa:	9300      	str	r3, [sp, #0]
     dac:	2310      	movs	r3, #16
     dae:	4c08      	ldr	r4, [pc, #32]	; (dd0 <USART_BT_init+0x38>)
     db0:	47a0      	blx	r4
	USART_BT_PORT_init();
     db2:	4b08      	ldr	r3, [pc, #32]	; (dd4 <USART_BT_init+0x3c>)
     db4:	4798      	blx	r3
}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	46bd      	mov	sp, r7
     dba:	b001      	add	sp, #4
     dbc:	bd90      	pop	{r4, r7, pc}
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	00000d45 	.word	0x00000d45
     dc4:	20000100 	.word	0x20000100
     dc8:	42001800 	.word	0x42001800
     dcc:	20000168 	.word	0x20000168
     dd0:	000019ad 	.word	0x000019ad
     dd4:	00000d6d 	.word	0x00000d6d

00000dd8 <Debug_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void Debug_CLOCK_init()
{
     dd8:	b580      	push	{r7, lr}
     dda:	af00      	add	r7, sp, #0

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
     ddc:	4b05      	ldr	r3, [pc, #20]	; (df4 <Debug_CLOCK_init+0x1c>)
     dde:	0019      	movs	r1, r3
     de0:	2003      	movs	r0, #3
     de2:	4b05      	ldr	r3, [pc, #20]	; (df8 <Debug_CLOCK_init+0x20>)
     de4:	4798      	blx	r3
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
     de6:	2100      	movs	r1, #0
     de8:	2019      	movs	r0, #25
     dea:	4b04      	ldr	r3, [pc, #16]	; (dfc <Debug_CLOCK_init+0x24>)
     dec:	4798      	blx	r3
}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	46bd      	mov	sp, r7
     df2:	bd80      	pop	{r7, pc}
     df4:	42001c00 	.word	0x42001c00
     df8:	00000aa1 	.word	0x00000aa1
     dfc:	00000961 	.word	0x00000961

00000e00 <Debug_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void Debug_PORT_init()
{
     e00:	b580      	push	{r7, lr}
     e02:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB30, PINMUX_PB30D_SERCOM5_PAD0);
     e04:	4b06      	ldr	r3, [pc, #24]	; (e20 <Debug_PORT_init+0x20>)
     e06:	0019      	movs	r1, r3
     e08:	203e      	movs	r0, #62	; 0x3e
     e0a:	4b06      	ldr	r3, [pc, #24]	; (e24 <Debug_PORT_init+0x24>)
     e0c:	4798      	blx	r3

	gpio_set_pin_function(PB31, PINMUX_PB31D_SERCOM5_PAD1);
     e0e:	4b06      	ldr	r3, [pc, #24]	; (e28 <Debug_PORT_init+0x28>)
     e10:	0019      	movs	r1, r3
     e12:	203f      	movs	r0, #63	; 0x3f
     e14:	4b03      	ldr	r3, [pc, #12]	; (e24 <Debug_PORT_init+0x24>)
     e16:	4798      	blx	r3
}
     e18:	46c0      	nop			; (mov r8, r8)
     e1a:	46bd      	mov	sp, r7
     e1c:	bd80      	pop	{r7, pc}
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	003e0003 	.word	0x003e0003
     e24:	000008a9 	.word	0x000008a9
     e28:	003f0003 	.word	0x003f0003

00000e2c <Debug_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void Debug_init(void)
{
     e2c:	b590      	push	{r4, r7, lr}
     e2e:	b083      	sub	sp, #12
     e30:	af02      	add	r7, sp, #8
	Debug_CLOCK_init();
     e32:	4b08      	ldr	r3, [pc, #32]	; (e54 <Debug_init+0x28>)
     e34:	4798      	blx	r3
	usart_async_init(&Debug, SERCOM5, Debug_buffer, DEBUG_BUFFER_SIZE, (void *)NULL);
     e36:	4a08      	ldr	r2, [pc, #32]	; (e58 <Debug_init+0x2c>)
     e38:	4908      	ldr	r1, [pc, #32]	; (e5c <Debug_init+0x30>)
     e3a:	4809      	ldr	r0, [pc, #36]	; (e60 <Debug_init+0x34>)
     e3c:	2300      	movs	r3, #0
     e3e:	9300      	str	r3, [sp, #0]
     e40:	2310      	movs	r3, #16
     e42:	4c08      	ldr	r4, [pc, #32]	; (e64 <Debug_init+0x38>)
     e44:	47a0      	blx	r4
	Debug_PORT_init();
     e46:	4b08      	ldr	r3, [pc, #32]	; (e68 <Debug_init+0x3c>)
     e48:	4798      	blx	r3
}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	46bd      	mov	sp, r7
     e4e:	b001      	add	sp, #4
     e50:	bd90      	pop	{r4, r7, pc}
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	00000dd9 	.word	0x00000dd9
     e58:	20000110 	.word	0x20000110
     e5c:	42001c00 	.word	0x42001c00
     e60:	20000268 	.word	0x20000268
     e64:	000019ad 	.word	0x000019ad
     e68:	00000e01 	.word	0x00000e01

00000e6c <PWM_1_PORT_init>:

void PWM_1_PORT_init(void)
{
     e6c:	b580      	push	{r7, lr}
     e6e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB08, PINMUX_PB08E_TC4_WO0);
     e70:	4b03      	ldr	r3, [pc, #12]	; (e80 <PWM_1_PORT_init+0x14>)
     e72:	0019      	movs	r1, r3
     e74:	2028      	movs	r0, #40	; 0x28
     e76:	4b03      	ldr	r3, [pc, #12]	; (e84 <PWM_1_PORT_init+0x18>)
     e78:	4798      	blx	r3
}
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	46bd      	mov	sp, r7
     e7e:	bd80      	pop	{r7, pc}
     e80:	00280004 	.word	0x00280004
     e84:	000008a9 	.word	0x000008a9

00000e88 <PWM_1_CLOCK_init>:

void PWM_1_CLOCK_init(void)
{
     e88:	b580      	push	{r7, lr}
     e8a:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
     e8c:	4b05      	ldr	r3, [pc, #20]	; (ea4 <PWM_1_CLOCK_init+0x1c>)
     e8e:	0019      	movs	r1, r3
     e90:	2003      	movs	r0, #3
     e92:	4b05      	ldr	r3, [pc, #20]	; (ea8 <PWM_1_CLOCK_init+0x20>)
     e94:	4798      	blx	r3
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);
     e96:	2100      	movs	r1, #0
     e98:	201c      	movs	r0, #28
     e9a:	4b04      	ldr	r3, [pc, #16]	; (eac <PWM_1_CLOCK_init+0x24>)
     e9c:	4798      	blx	r3
}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	46bd      	mov	sp, r7
     ea2:	bd80      	pop	{r7, pc}
     ea4:	42003000 	.word	0x42003000
     ea8:	00000aa1 	.word	0x00000aa1
     eac:	00000961 	.word	0x00000961

00000eb0 <PWM_1_init>:

void PWM_1_init(void)
{
     eb0:	b580      	push	{r7, lr}
     eb2:	af00      	add	r7, sp, #0
	PWM_1_CLOCK_init();
     eb4:	4b07      	ldr	r3, [pc, #28]	; (ed4 <PWM_1_init+0x24>)
     eb6:	4798      	blx	r3
	PWM_1_PORT_init();
     eb8:	4b07      	ldr	r3, [pc, #28]	; (ed8 <PWM_1_init+0x28>)
     eba:	4798      	blx	r3
	pwm_init(&PWM_1, TC4, _tc_get_pwm());
     ebc:	4b07      	ldr	r3, [pc, #28]	; (edc <PWM_1_init+0x2c>)
     ebe:	4798      	blx	r3
     ec0:	0002      	movs	r2, r0
     ec2:	4907      	ldr	r1, [pc, #28]	; (ee0 <PWM_1_init+0x30>)
     ec4:	4b07      	ldr	r3, [pc, #28]	; (ee4 <PWM_1_init+0x34>)
     ec6:	0018      	movs	r0, r3
     ec8:	4b07      	ldr	r3, [pc, #28]	; (ee8 <PWM_1_init+0x38>)
     eca:	4798      	blx	r3
}
     ecc:	46c0      	nop			; (mov r8, r8)
     ece:	46bd      	mov	sp, r7
     ed0:	bd80      	pop	{r7, pc}
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	00000e89 	.word	0x00000e89
     ed8:	00000e6d 	.word	0x00000e6d
     edc:	00004899 	.word	0x00004899
     ee0:	42003000 	.word	0x42003000
     ee4:	2000024c 	.word	0x2000024c
     ee8:	000016d9 	.word	0x000016d9

00000eec <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     eec:	b580      	push	{r7, lr}
     eee:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB10, PINMUX_PB10E_TC5_WO0);
     ef0:	4b03      	ldr	r3, [pc, #12]	; (f00 <PWM_0_PORT_init+0x14>)
     ef2:	0019      	movs	r1, r3
     ef4:	202a      	movs	r0, #42	; 0x2a
     ef6:	4b03      	ldr	r3, [pc, #12]	; (f04 <PWM_0_PORT_init+0x18>)
     ef8:	4798      	blx	r3
}
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	46bd      	mov	sp, r7
     efe:	bd80      	pop	{r7, pc}
     f00:	002a0004 	.word	0x002a0004
     f04:	000008a9 	.word	0x000008a9

00000f08 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     f08:	b580      	push	{r7, lr}
     f0a:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, TC5);
     f0c:	4b05      	ldr	r3, [pc, #20]	; (f24 <PWM_0_CLOCK_init+0x1c>)
     f0e:	0019      	movs	r1, r3
     f10:	2003      	movs	r0, #3
     f12:	4b05      	ldr	r3, [pc, #20]	; (f28 <PWM_0_CLOCK_init+0x20>)
     f14:	4798      	blx	r3
	_gclk_enable_channel(TC5_GCLK_ID, CONF_GCLK_TC5_SRC);
     f16:	2100      	movs	r1, #0
     f18:	201c      	movs	r0, #28
     f1a:	4b04      	ldr	r3, [pc, #16]	; (f2c <PWM_0_CLOCK_init+0x24>)
     f1c:	4798      	blx	r3
}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	46bd      	mov	sp, r7
     f22:	bd80      	pop	{r7, pc}
     f24:	42003400 	.word	0x42003400
     f28:	00000aa1 	.word	0x00000aa1
     f2c:	00000961 	.word	0x00000961

00000f30 <PWM_0_init>:

void PWM_0_init(void)
{
     f30:	b580      	push	{r7, lr}
     f32:	af00      	add	r7, sp, #0
	PWM_0_CLOCK_init();
     f34:	4b07      	ldr	r3, [pc, #28]	; (f54 <PWM_0_init+0x24>)
     f36:	4798      	blx	r3
	PWM_0_PORT_init();
     f38:	4b07      	ldr	r3, [pc, #28]	; (f58 <PWM_0_init+0x28>)
     f3a:	4798      	blx	r3
	pwm_init(&PWM_0, TC5, _tc_get_pwm());
     f3c:	4b07      	ldr	r3, [pc, #28]	; (f5c <PWM_0_init+0x2c>)
     f3e:	4798      	blx	r3
     f40:	0002      	movs	r2, r0
     f42:	4907      	ldr	r1, [pc, #28]	; (f60 <PWM_0_init+0x30>)
     f44:	4b07      	ldr	r3, [pc, #28]	; (f64 <PWM_0_init+0x34>)
     f46:	0018      	movs	r0, r3
     f48:	4b07      	ldr	r3, [pc, #28]	; (f68 <PWM_0_init+0x38>)
     f4a:	4798      	blx	r3
}
     f4c:	46c0      	nop			; (mov r8, r8)
     f4e:	46bd      	mov	sp, r7
     f50:	bd80      	pop	{r7, pc}
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	00000f09 	.word	0x00000f09
     f58:	00000eed 	.word	0x00000eed
     f5c:	00004899 	.word	0x00004899
     f60:	42003400 	.word	0x42003400
     f64:	2000014c 	.word	0x2000014c
     f68:	000016d9 	.word	0x000016d9

00000f6c <TIMER_0_CLOCK_init>:

void TIMER_0_CLOCK_init(void)
{
     f6c:	b580      	push	{r7, lr}
     f6e:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, TCC0);
     f70:	4b05      	ldr	r3, [pc, #20]	; (f88 <TIMER_0_CLOCK_init+0x1c>)
     f72:	0019      	movs	r1, r3
     f74:	2003      	movs	r0, #3
     f76:	4b05      	ldr	r3, [pc, #20]	; (f8c <TIMER_0_CLOCK_init+0x20>)
     f78:	4798      	blx	r3
	_gclk_enable_channel(TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC);
     f7a:	2100      	movs	r1, #0
     f7c:	201a      	movs	r0, #26
     f7e:	4b04      	ldr	r3, [pc, #16]	; (f90 <TIMER_0_CLOCK_init+0x24>)
     f80:	4798      	blx	r3
}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	46bd      	mov	sp, r7
     f86:	bd80      	pop	{r7, pc}
     f88:	42002000 	.word	0x42002000
     f8c:	00000aa1 	.word	0x00000aa1
     f90:	00000961 	.word	0x00000961

00000f94 <TIMER_0_init>:

void TIMER_0_init(void)
{
     f94:	b580      	push	{r7, lr}
     f96:	af00      	add	r7, sp, #0
	TIMER_0_CLOCK_init();
     f98:	4b06      	ldr	r3, [pc, #24]	; (fb4 <TIMER_0_init+0x20>)
     f9a:	4798      	blx	r3
	timer_init(&TIMER_0, TCC0, _tcc_get_timer());
     f9c:	4b06      	ldr	r3, [pc, #24]	; (fb8 <TIMER_0_init+0x24>)
     f9e:	4798      	blx	r3
     fa0:	0002      	movs	r2, r0
     fa2:	4906      	ldr	r1, [pc, #24]	; (fbc <TIMER_0_init+0x28>)
     fa4:	4b06      	ldr	r3, [pc, #24]	; (fc0 <TIMER_0_init+0x2c>)
     fa6:	0018      	movs	r0, r3
     fa8:	4b06      	ldr	r3, [pc, #24]	; (fc4 <TIMER_0_init+0x30>)
     faa:	4798      	blx	r3
}
     fac:	46c0      	nop			; (mov r8, r8)
     fae:	46bd      	mov	sp, r7
     fb0:	bd80      	pop	{r7, pc}
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	00000f6d 	.word	0x00000f6d
     fb8:	00004381 	.word	0x00004381
     fbc:	42002000 	.word	0x42002000
     fc0:	200002d8 	.word	0x200002d8
     fc4:	000017c1 	.word	0x000017c1

00000fc8 <system_init>:

void system_init(void)
{
     fc8:	b580      	push	{r7, lr}
     fca:	af00      	add	r7, sp, #0
	init_mcu();
     fcc:	4b34      	ldr	r3, [pc, #208]	; (10a0 <system_init+0xd8>)
     fce:	4798      	blx	r3

	// GPIO on PA02

	gpio_set_pin_level(PWM_OUT,
     fd0:	2100      	movs	r1, #0
     fd2:	2002      	movs	r0, #2
     fd4:	4b33      	ldr	r3, [pc, #204]	; (10a4 <system_init+0xdc>)
     fd6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PWM_OUT, GPIO_DIRECTION_OUT);
     fd8:	2102      	movs	r1, #2
     fda:	2002      	movs	r0, #2
     fdc:	4b32      	ldr	r3, [pc, #200]	; (10a8 <system_init+0xe0>)
     fde:	4798      	blx	r3

	gpio_set_pin_function(PWM_OUT, GPIO_PIN_FUNCTION_OFF);
     fe0:	2301      	movs	r3, #1
     fe2:	425b      	negs	r3, r3
     fe4:	0019      	movs	r1, r3
     fe6:	2002      	movs	r0, #2
     fe8:	4b30      	ldr	r3, [pc, #192]	; (10ac <system_init+0xe4>)
     fea:	4798      	blx	r3

	// GPIO on PA12

	gpio_set_pin_level(PIN_LED_RED,
     fec:	2100      	movs	r1, #0
     fee:	200c      	movs	r0, #12
     ff0:	4b2c      	ldr	r3, [pc, #176]	; (10a4 <system_init+0xdc>)
     ff2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PIN_LED_RED, GPIO_DIRECTION_OUT);
     ff4:	2102      	movs	r1, #2
     ff6:	200c      	movs	r0, #12
     ff8:	4b2b      	ldr	r3, [pc, #172]	; (10a8 <system_init+0xe0>)
     ffa:	4798      	blx	r3

	gpio_set_pin_function(PIN_LED_RED, GPIO_PIN_FUNCTION_OFF);
     ffc:	2301      	movs	r3, #1
     ffe:	425b      	negs	r3, r3
    1000:	0019      	movs	r1, r3
    1002:	200c      	movs	r0, #12
    1004:	4b29      	ldr	r3, [pc, #164]	; (10ac <system_init+0xe4>)
    1006:	4798      	blx	r3

	// GPIO on PA13

	gpio_set_pin_level(PIN_LED_BLUE,
    1008:	2100      	movs	r1, #0
    100a:	200d      	movs	r0, #13
    100c:	4b25      	ldr	r3, [pc, #148]	; (10a4 <system_init+0xdc>)
    100e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PIN_LED_BLUE, GPIO_DIRECTION_OUT);
    1010:	2102      	movs	r1, #2
    1012:	200d      	movs	r0, #13
    1014:	4b24      	ldr	r3, [pc, #144]	; (10a8 <system_init+0xe0>)
    1016:	4798      	blx	r3

	gpio_set_pin_function(PIN_LED_BLUE, GPIO_PIN_FUNCTION_OFF);
    1018:	2301      	movs	r3, #1
    101a:	425b      	negs	r3, r3
    101c:	0019      	movs	r1, r3
    101e:	200d      	movs	r0, #13
    1020:	4b22      	ldr	r3, [pc, #136]	; (10ac <system_init+0xe4>)
    1022:	4798      	blx	r3

	// GPIO on PA15

	// Set pin direction to input
	gpio_set_pin_direction(PIN_BT_WAKE, GPIO_DIRECTION_IN);
    1024:	2101      	movs	r1, #1
    1026:	200f      	movs	r0, #15
    1028:	4b1f      	ldr	r3, [pc, #124]	; (10a8 <system_init+0xe0>)
    102a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PIN_BT_WAKE,
    102c:	2100      	movs	r1, #0
    102e:	200f      	movs	r0, #15
    1030:	4b1f      	ldr	r3, [pc, #124]	; (10b0 <system_init+0xe8>)
    1032:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PIN_BT_WAKE, GPIO_PIN_FUNCTION_OFF);
    1034:	2301      	movs	r3, #1
    1036:	425b      	negs	r3, r3
    1038:	0019      	movs	r1, r3
    103a:	200f      	movs	r0, #15
    103c:	4b1b      	ldr	r3, [pc, #108]	; (10ac <system_init+0xe4>)
    103e:	4798      	blx	r3

	// GPIO on PB15

	gpio_set_pin_level(PIN_LED_GREEN,
    1040:	2100      	movs	r1, #0
    1042:	202f      	movs	r0, #47	; 0x2f
    1044:	4b17      	ldr	r3, [pc, #92]	; (10a4 <system_init+0xdc>)
    1046:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PIN_LED_GREEN, GPIO_DIRECTION_OUT);
    1048:	2102      	movs	r1, #2
    104a:	202f      	movs	r0, #47	; 0x2f
    104c:	4b16      	ldr	r3, [pc, #88]	; (10a8 <system_init+0xe0>)
    104e:	4798      	blx	r3

	gpio_set_pin_function(PIN_LED_GREEN, GPIO_PIN_FUNCTION_OFF);
    1050:	2301      	movs	r3, #1
    1052:	425b      	negs	r3, r3
    1054:	0019      	movs	r1, r3
    1056:	202f      	movs	r0, #47	; 0x2f
    1058:	4b14      	ldr	r3, [pc, #80]	; (10ac <system_init+0xe4>)
    105a:	4798      	blx	r3

	// GPIO on PB17

	gpio_set_pin_level(PIN_BT_RST,
    105c:	2101      	movs	r1, #1
    105e:	2031      	movs	r0, #49	; 0x31
    1060:	4b10      	ldr	r3, [pc, #64]	; (10a4 <system_init+0xdc>)
    1062:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(PIN_BT_RST, GPIO_DIRECTION_OUT);
    1064:	2102      	movs	r1, #2
    1066:	2031      	movs	r0, #49	; 0x31
    1068:	4b0f      	ldr	r3, [pc, #60]	; (10a8 <system_init+0xe0>)
    106a:	4798      	blx	r3

	gpio_set_pin_function(PIN_BT_RST, GPIO_PIN_FUNCTION_OFF);
    106c:	2301      	movs	r3, #1
    106e:	425b      	negs	r3, r3
    1070:	0019      	movs	r1, r3
    1072:	2031      	movs	r0, #49	; 0x31
    1074:	4b0d      	ldr	r3, [pc, #52]	; (10ac <system_init+0xe4>)
    1076:	4798      	blx	r3

	ADC_0_init();
    1078:	4b0e      	ldr	r3, [pc, #56]	; (10b4 <system_init+0xec>)
    107a:	4798      	blx	r3

	USART_LORA_init();
    107c:	4b0e      	ldr	r3, [pc, #56]	; (10b8 <system_init+0xf0>)
    107e:	4798      	blx	r3

	I2C_0_init();
    1080:	4b0e      	ldr	r3, [pc, #56]	; (10bc <system_init+0xf4>)
    1082:	4798      	blx	r3
	USART_BT_init();
    1084:	4b0e      	ldr	r3, [pc, #56]	; (10c0 <system_init+0xf8>)
    1086:	4798      	blx	r3
	Debug_init();
    1088:	4b0e      	ldr	r3, [pc, #56]	; (10c4 <system_init+0xfc>)
    108a:	4798      	blx	r3

	PWM_1_init();
    108c:	4b0e      	ldr	r3, [pc, #56]	; (10c8 <system_init+0x100>)
    108e:	4798      	blx	r3

	PWM_0_init();
    1090:	4b0e      	ldr	r3, [pc, #56]	; (10cc <system_init+0x104>)
    1092:	4798      	blx	r3

	TIMER_0_init();
    1094:	4b0e      	ldr	r3, [pc, #56]	; (10d0 <system_init+0x108>)
    1096:	4798      	blx	r3
}
    1098:	46c0      	nop			; (mov r8, r8)
    109a:	46bd      	mov	sp, r7
    109c:	bd80      	pop	{r7, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	0000094d 	.word	0x0000094d
    10a4:	0000090d 	.word	0x0000090d
    10a8:	000008cd 	.word	0x000008cd
    10ac:	000008a9 	.word	0x000008a9
    10b0:	0000086d 	.word	0x0000086d
    10b4:	00000b85 	.word	0x00000b85
    10b8:	00000c61 	.word	0x00000c61
    10bc:	00000d11 	.word	0x00000d11
    10c0:	00000d99 	.word	0x00000d99
    10c4:	00000e2d 	.word	0x00000e2d
    10c8:	00000eb1 	.word	0x00000eb1
    10cc:	00000f31 	.word	0x00000f31
    10d0:	00000f95 	.word	0x00000f95

000010d4 <adc_async_init>:
 * \brief Initialize ADC
 */
int32_t adc_async_init(struct adc_async_descriptor *const descr, void *const hw, uint8_t *channel_map,
                       uint8_t channel_max, uint8_t channel_amount, struct adc_async_channel_descriptor *const descr_ch,
                       void *const func)
{
    10d4:	b580      	push	{r7, lr}
    10d6:	b088      	sub	sp, #32
    10d8:	af00      	add	r7, sp, #0
    10da:	60f8      	str	r0, [r7, #12]
    10dc:	60b9      	str	r1, [r7, #8]
    10de:	607a      	str	r2, [r7, #4]
    10e0:	001a      	movs	r2, r3
    10e2:	1cfb      	adds	r3, r7, #3
    10e4:	701a      	strb	r2, [r3, #0]
	int32_t                   init_status;
	struct _adc_async_device *device;
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    10e6:	68fb      	ldr	r3, [r7, #12]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d00f      	beq.n	110c <adc_async_init+0x38>
    10ec:	68bb      	ldr	r3, [r7, #8]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d00c      	beq.n	110c <adc_async_init+0x38>
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	2b00      	cmp	r3, #0
    10f6:	d009      	beq.n	110c <adc_async_init+0x38>
    10f8:	2328      	movs	r3, #40	; 0x28
    10fa:	18fb      	adds	r3, r7, r3
    10fc:	781b      	ldrb	r3, [r3, #0]
    10fe:	2b00      	cmp	r3, #0
    1100:	d004      	beq.n	110c <adc_async_init+0x38>
    1102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1104:	2b00      	cmp	r3, #0
    1106:	d001      	beq.n	110c <adc_async_init+0x38>
    1108:	2301      	movs	r3, #1
    110a:	e000      	b.n	110e <adc_async_init+0x3a>
    110c:	2300      	movs	r3, #0
    110e:	1c1a      	adds	r2, r3, #0
    1110:	2301      	movs	r3, #1
    1112:	4013      	ands	r3, r2
    1114:	b2db      	uxtb	r3, r3
    1116:	492f      	ldr	r1, [pc, #188]	; (11d4 <adc_async_init+0x100>)
    1118:	223f      	movs	r2, #63	; 0x3f
    111a:	0018      	movs	r0, r3
    111c:	4b2e      	ldr	r3, [pc, #184]	; (11d8 <adc_async_init+0x104>)
    111e:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
    1120:	2328      	movs	r3, #40	; 0x28
    1122:	18fb      	adds	r3, r7, r3
    1124:	781b      	ldrb	r3, [r3, #0]
    1126:	1cfa      	adds	r2, r7, #3
    1128:	7812      	ldrb	r2, [r2, #0]
    112a:	3201      	adds	r2, #1
    112c:	0fd8      	lsrs	r0, r3, #31
    112e:	17d1      	asrs	r1, r2, #31
    1130:	429a      	cmp	r2, r3
    1132:	4148      	adcs	r0, r1
    1134:	0003      	movs	r3, r0
    1136:	b2db      	uxtb	r3, r3
    1138:	4926      	ldr	r1, [pc, #152]	; (11d4 <adc_async_init+0x100>)
    113a:	2240      	movs	r2, #64	; 0x40
    113c:	0018      	movs	r0, r3
    113e:	4b26      	ldr	r3, [pc, #152]	; (11d8 <adc_async_init+0x104>)
    1140:	4798      	blx	r3

	device = &descr->device;
    1142:	68fb      	ldr	r3, [r7, #12]
    1144:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i <= channel_max; i++) {
    1146:	231f      	movs	r3, #31
    1148:	18fb      	adds	r3, r7, r3
    114a:	2200      	movs	r2, #0
    114c:	701a      	strb	r2, [r3, #0]
    114e:	e00d      	b.n	116c <adc_async_init+0x98>
		channel_map[i] = 0xFF;
    1150:	231f      	movs	r3, #31
    1152:	18fb      	adds	r3, r7, r3
    1154:	781b      	ldrb	r3, [r3, #0]
    1156:	687a      	ldr	r2, [r7, #4]
    1158:	18d3      	adds	r3, r2, r3
    115a:	22ff      	movs	r2, #255	; 0xff
    115c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <= channel_max; i++) {
    115e:	231f      	movs	r3, #31
    1160:	18fb      	adds	r3, r7, r3
    1162:	781a      	ldrb	r2, [r3, #0]
    1164:	231f      	movs	r3, #31
    1166:	18fb      	adds	r3, r7, r3
    1168:	3201      	adds	r2, #1
    116a:	701a      	strb	r2, [r3, #0]
    116c:	231f      	movs	r3, #31
    116e:	18fa      	adds	r2, r7, r3
    1170:	1cfb      	adds	r3, r7, #3
    1172:	7812      	ldrb	r2, [r2, #0]
    1174:	781b      	ldrb	r3, [r3, #0]
    1176:	429a      	cmp	r2, r3
    1178:	d9ea      	bls.n	1150 <adc_async_init+0x7c>
	}
	descr->channel_map    = channel_map;
    117a:	68fb      	ldr	r3, [r7, #12]
    117c:	687a      	ldr	r2, [r7, #4]
    117e:	621a      	str	r2, [r3, #32]
	descr->channel_max    = channel_max;
    1180:	68fb      	ldr	r3, [r7, #12]
    1182:	1cfa      	adds	r2, r7, #3
    1184:	2124      	movs	r1, #36	; 0x24
    1186:	7812      	ldrb	r2, [r2, #0]
    1188:	545a      	strb	r2, [r3, r1]
	descr->channel_amount = channel_amount;
    118a:	68fb      	ldr	r3, [r7, #12]
    118c:	2228      	movs	r2, #40	; 0x28
    118e:	18ba      	adds	r2, r7, r2
    1190:	2125      	movs	r1, #37	; 0x25
    1192:	7812      	ldrb	r2, [r2, #0]
    1194:	545a      	strb	r2, [r3, r1]
	descr->descr_ch       = descr_ch;
    1196:	68fb      	ldr	r3, [r7, #12]
    1198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    119a:	629a      	str	r2, [r3, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    119c:	68ba      	ldr	r2, [r7, #8]
    119e:	69bb      	ldr	r3, [r7, #24]
    11a0:	0011      	movs	r1, r2
    11a2:	0018      	movs	r0, r3
    11a4:	4b0d      	ldr	r3, [pc, #52]	; (11dc <adc_async_init+0x108>)
    11a6:	4798      	blx	r3
    11a8:	0003      	movs	r3, r0
    11aa:	617b      	str	r3, [r7, #20]
	if (init_status) {
    11ac:	697b      	ldr	r3, [r7, #20]
    11ae:	2b00      	cmp	r3, #0
    11b0:	d001      	beq.n	11b6 <adc_async_init+0xe2>
		return init_status;
    11b2:	697b      	ldr	r3, [r7, #20]
    11b4:	e009      	b.n	11ca <adc_async_init+0xf6>
	}

	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    11b6:	69bb      	ldr	r3, [r7, #24]
    11b8:	4a09      	ldr	r2, [pc, #36]	; (11e0 <adc_async_init+0x10c>)
    11ba:	609a      	str	r2, [r3, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    11bc:	69bb      	ldr	r3, [r7, #24]
    11be:	4a09      	ldr	r2, [pc, #36]	; (11e4 <adc_async_init+0x110>)
    11c0:	601a      	str	r2, [r3, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    11c2:	69bb      	ldr	r3, [r7, #24]
    11c4:	4a08      	ldr	r2, [pc, #32]	; (11e8 <adc_async_init+0x114>)
    11c6:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    11c8:	2300      	movs	r3, #0
}
    11ca:	0018      	movs	r0, r3
    11cc:	46bd      	mov	sp, r7
    11ce:	b008      	add	sp, #32
    11d0:	bd80      	pop	{r7, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	00004b70 	.word	0x00004b70
    11d8:	00001cf7 	.word	0x00001cf7
    11dc:	00002671 	.word	0x00002671
    11e0:	00001345 	.word	0x00001345
    11e4:	000013fd 	.word	0x000013fd
    11e8:	0000142d 	.word	0x0000142d

000011ec <adc_async_register_channel_buffer>:
	return ERR_NONE;
}

int32_t adc_async_register_channel_buffer(struct adc_async_descriptor *const descr, const uint8_t channel,
                                          uint8_t *const convert_buffer, const uint16_t convert_buffer_length)
{
    11ec:	b580      	push	{r7, lr}
    11ee:	b086      	sub	sp, #24
    11f0:	af00      	add	r7, sp, #0
    11f2:	60f8      	str	r0, [r7, #12]
    11f4:	0008      	movs	r0, r1
    11f6:	607a      	str	r2, [r7, #4]
    11f8:	0019      	movs	r1, r3
    11fa:	230b      	movs	r3, #11
    11fc:	18fb      	adds	r3, r7, r3
    11fe:	1c02      	adds	r2, r0, #0
    1200:	701a      	strb	r2, [r3, #0]
    1202:	2308      	movs	r3, #8
    1204:	18fb      	adds	r3, r7, r3
    1206:	1c0a      	adds	r2, r1, #0
    1208:	801a      	strh	r2, [r3, #0]
	uint8_t i, index = 0;
    120a:	2316      	movs	r3, #22
    120c:	18fb      	adds	r3, r7, r3
    120e:	2200      	movs	r2, #0
    1210:	701a      	strb	r2, [r3, #0]

	ASSERT(descr && convert_buffer && convert_buffer_length);
    1212:	68fb      	ldr	r3, [r7, #12]
    1214:	2b00      	cmp	r3, #0
    1216:	d009      	beq.n	122c <adc_async_register_channel_buffer+0x40>
    1218:	687b      	ldr	r3, [r7, #4]
    121a:	2b00      	cmp	r3, #0
    121c:	d006      	beq.n	122c <adc_async_register_channel_buffer+0x40>
    121e:	2308      	movs	r3, #8
    1220:	18fb      	adds	r3, r7, r3
    1222:	881b      	ldrh	r3, [r3, #0]
    1224:	2b00      	cmp	r3, #0
    1226:	d001      	beq.n	122c <adc_async_register_channel_buffer+0x40>
    1228:	2301      	movs	r3, #1
    122a:	e000      	b.n	122e <adc_async_register_channel_buffer+0x42>
    122c:	2300      	movs	r3, #0
    122e:	1c1a      	adds	r2, r3, #0
    1230:	2301      	movs	r3, #1
    1232:	4013      	ands	r3, r2
    1234:	b2db      	uxtb	r3, r3
    1236:	4940      	ldr	r1, [pc, #256]	; (1338 <adc_async_register_channel_buffer+0x14c>)
    1238:	2266      	movs	r2, #102	; 0x66
    123a:	0018      	movs	r0, r3
    123c:	4b3f      	ldr	r3, [pc, #252]	; (133c <adc_async_register_channel_buffer+0x150>)
    123e:	4798      	blx	r3
	ASSERT(descr->channel_max >= channel);
    1240:	68fb      	ldr	r3, [r7, #12]
    1242:	2224      	movs	r2, #36	; 0x24
    1244:	5c99      	ldrb	r1, [r3, r2]
    1246:	230b      	movs	r3, #11
    1248:	18fb      	adds	r3, r7, r3
    124a:	781a      	ldrb	r2, [r3, #0]
    124c:	2300      	movs	r3, #0
    124e:	4291      	cmp	r1, r2
    1250:	415b      	adcs	r3, r3
    1252:	b2db      	uxtb	r3, r3
    1254:	4938      	ldr	r1, [pc, #224]	; (1338 <adc_async_register_channel_buffer+0x14c>)
    1256:	2267      	movs	r2, #103	; 0x67
    1258:	0018      	movs	r0, r3
    125a:	4b38      	ldr	r3, [pc, #224]	; (133c <adc_async_register_channel_buffer+0x150>)
    125c:	4798      	blx	r3

	if (descr->channel_map[channel] != 0xFF) {
    125e:	68fb      	ldr	r3, [r7, #12]
    1260:	6a1a      	ldr	r2, [r3, #32]
    1262:	230b      	movs	r3, #11
    1264:	18fb      	adds	r3, r7, r3
    1266:	781b      	ldrb	r3, [r3, #0]
    1268:	18d3      	adds	r3, r2, r3
    126a:	781b      	ldrb	r3, [r3, #0]
    126c:	2bff      	cmp	r3, #255	; 0xff
    126e:	d002      	beq.n	1276 <adc_async_register_channel_buffer+0x8a>
		return ERR_INVALID_ARG;
    1270:	230d      	movs	r3, #13
    1272:	425b      	negs	r3, r3
    1274:	e05c      	b.n	1330 <adc_async_register_channel_buffer+0x144>
	}
	for (i = 0; i <= descr->channel_max; i++) {
    1276:	2317      	movs	r3, #23
    1278:	18fb      	adds	r3, r7, r3
    127a:	2200      	movs	r2, #0
    127c:	701a      	strb	r2, [r3, #0]
    127e:	e016      	b.n	12ae <adc_async_register_channel_buffer+0xc2>
		if (descr->channel_map[i] != 0xFF) {
    1280:	68fb      	ldr	r3, [r7, #12]
    1282:	6a1a      	ldr	r2, [r3, #32]
    1284:	2317      	movs	r3, #23
    1286:	18fb      	adds	r3, r7, r3
    1288:	781b      	ldrb	r3, [r3, #0]
    128a:	18d3      	adds	r3, r2, r3
    128c:	781b      	ldrb	r3, [r3, #0]
    128e:	2bff      	cmp	r3, #255	; 0xff
    1290:	d006      	beq.n	12a0 <adc_async_register_channel_buffer+0xb4>
			index++;
    1292:	2316      	movs	r3, #22
    1294:	18fb      	adds	r3, r7, r3
    1296:	781a      	ldrb	r2, [r3, #0]
    1298:	2316      	movs	r3, #22
    129a:	18fb      	adds	r3, r7, r3
    129c:	3201      	adds	r2, #1
    129e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i <= descr->channel_max; i++) {
    12a0:	2317      	movs	r3, #23
    12a2:	18fb      	adds	r3, r7, r3
    12a4:	781a      	ldrb	r2, [r3, #0]
    12a6:	2317      	movs	r3, #23
    12a8:	18fb      	adds	r3, r7, r3
    12aa:	3201      	adds	r2, #1
    12ac:	701a      	strb	r2, [r3, #0]
    12ae:	68fb      	ldr	r3, [r7, #12]
    12b0:	2224      	movs	r2, #36	; 0x24
    12b2:	5c9b      	ldrb	r3, [r3, r2]
    12b4:	2217      	movs	r2, #23
    12b6:	18ba      	adds	r2, r7, r2
    12b8:	7812      	ldrb	r2, [r2, #0]
    12ba:	429a      	cmp	r2, r3
    12bc:	d9e0      	bls.n	1280 <adc_async_register_channel_buffer+0x94>
		}
	}

	if (index > descr->channel_amount) {
    12be:	68fb      	ldr	r3, [r7, #12]
    12c0:	2225      	movs	r2, #37	; 0x25
    12c2:	5c9b      	ldrb	r3, [r3, r2]
    12c4:	2216      	movs	r2, #22
    12c6:	18ba      	adds	r2, r7, r2
    12c8:	7812      	ldrb	r2, [r2, #0]
    12ca:	429a      	cmp	r2, r3
    12cc:	d902      	bls.n	12d4 <adc_async_register_channel_buffer+0xe8>
		return ERR_NO_RESOURCE;
    12ce:	231c      	movs	r3, #28
    12d0:	425b      	negs	r3, r3
    12d2:	e02d      	b.n	1330 <adc_async_register_channel_buffer+0x144>
	}
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    12d4:	68fb      	ldr	r3, [r7, #12]
    12d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    12d8:	2316      	movs	r3, #22
    12da:	18fb      	adds	r3, r7, r3
    12dc:	781a      	ldrb	r2, [r3, #0]
    12de:	0013      	movs	r3, r2
    12e0:	005b      	lsls	r3, r3, #1
    12e2:	189b      	adds	r3, r3, r2
    12e4:	00db      	lsls	r3, r3, #3
    12e6:	18cb      	adds	r3, r1, r3
    12e8:	1d18      	adds	r0, r3, #4
    12ea:	2308      	movs	r3, #8
    12ec:	18fb      	adds	r3, r7, r3
    12ee:	881a      	ldrh	r2, [r3, #0]
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	0019      	movs	r1, r3
    12f4:	4b12      	ldr	r3, [pc, #72]	; (1340 <adc_async_register_channel_buffer+0x154>)
    12f6:	4798      	blx	r3
    12f8:	1e03      	subs	r3, r0, #0
    12fa:	d002      	beq.n	1302 <adc_async_register_channel_buffer+0x116>
		return ERR_INVALID_ARG;
    12fc:	230d      	movs	r3, #13
    12fe:	425b      	negs	r3, r3
    1300:	e016      	b.n	1330 <adc_async_register_channel_buffer+0x144>
	}
	descr->channel_map[channel]            = index;
    1302:	68fb      	ldr	r3, [r7, #12]
    1304:	6a1a      	ldr	r2, [r3, #32]
    1306:	230b      	movs	r3, #11
    1308:	18fb      	adds	r3, r7, r3
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	18d3      	adds	r3, r2, r3
    130e:	2216      	movs	r2, #22
    1310:	18ba      	adds	r2, r7, r2
    1312:	7812      	ldrb	r2, [r2, #0]
    1314:	701a      	strb	r2, [r3, #0]
	descr->descr_ch[index].bytes_in_buffer = 0;
    1316:	68fb      	ldr	r3, [r7, #12]
    1318:	6a99      	ldr	r1, [r3, #40]	; 0x28
    131a:	2316      	movs	r3, #22
    131c:	18fb      	adds	r3, r7, r3
    131e:	781a      	ldrb	r2, [r3, #0]
    1320:	0013      	movs	r3, r2
    1322:	005b      	lsls	r3, r3, #1
    1324:	189b      	adds	r3, r3, r2
    1326:	00db      	lsls	r3, r3, #3
    1328:	18cb      	adds	r3, r1, r3
    132a:	2200      	movs	r2, #0
    132c:	829a      	strh	r2, [r3, #20]

	return ERR_NONE;
    132e:	2300      	movs	r3, #0
}
    1330:	0018      	movs	r0, r3
    1332:	46bd      	mov	sp, r7
    1334:	b006      	add	sp, #24
    1336:	bd80      	pop	{r7, pc}
    1338:	00004b70 	.word	0x00004b70
    133c:	00001cf7 	.word	0x00001cf7
    1340:	00001e01 	.word	0x00001e01

00001344 <adc_async_channel_conversion_done>:
 * \param[in] device The pointer to ADC device structure
 * \param[in] data Converted data
 */
static void adc_async_channel_conversion_done(struct _adc_async_device *device, const uint8_t channel,
                                              const uint16_t data)
{
    1344:	b580      	push	{r7, lr}
    1346:	b086      	sub	sp, #24
    1348:	af00      	add	r7, sp, #0
    134a:	6078      	str	r0, [r7, #4]
    134c:	0008      	movs	r0, r1
    134e:	0011      	movs	r1, r2
    1350:	1cfb      	adds	r3, r7, #3
    1352:	1c02      	adds	r2, r0, #0
    1354:	701a      	strb	r2, [r3, #0]
    1356:	003b      	movs	r3, r7
    1358:	1c0a      	adds	r2, r1, #0
    135a:	801a      	strh	r2, [r3, #0]
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);
    135c:	687b      	ldr	r3, [r7, #4]
    135e:	617b      	str	r3, [r7, #20]

	uint8_t                              index    = descr->channel_map[channel];
    1360:	697b      	ldr	r3, [r7, #20]
    1362:	6a1a      	ldr	r2, [r3, #32]
    1364:	1cfb      	adds	r3, r7, #3
    1366:	781b      	ldrb	r3, [r3, #0]
    1368:	18d2      	adds	r2, r2, r3
    136a:	2313      	movs	r3, #19
    136c:	18fb      	adds	r3, r7, r3
    136e:	7812      	ldrb	r2, [r2, #0]
    1370:	701a      	strb	r2, [r3, #0]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    1372:	697b      	ldr	r3, [r7, #20]
    1374:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1376:	2313      	movs	r3, #19
    1378:	18fb      	adds	r3, r7, r3
    137a:	781a      	ldrb	r2, [r3, #0]
    137c:	0013      	movs	r3, r2
    137e:	005b      	lsls	r3, r3, #1
    1380:	189b      	adds	r3, r3, r2
    1382:	00db      	lsls	r3, r3, #3
    1384:	18cb      	adds	r3, r1, r3
    1386:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr_ch->convert, data);
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	1d1a      	adds	r2, r3, #4
    138c:	003b      	movs	r3, r7
    138e:	881b      	ldrh	r3, [r3, #0]
    1390:	b2db      	uxtb	r3, r3
    1392:	0019      	movs	r1, r3
    1394:	0010      	movs	r0, r2
    1396:	4b17      	ldr	r3, [pc, #92]	; (13f4 <adc_async_channel_conversion_done+0xb0>)
    1398:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    139a:	697b      	ldr	r3, [r7, #20]
    139c:	0018      	movs	r0, r3
    139e:	4b16      	ldr	r3, [pc, #88]	; (13f8 <adc_async_channel_conversion_done+0xb4>)
    13a0:	4798      	blx	r3
    13a2:	0003      	movs	r3, r0
    13a4:	2b01      	cmp	r3, #1
    13a6:	d910      	bls.n	13ca <adc_async_channel_conversion_done+0x86>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	1d1a      	adds	r2, r3, #4
    13ac:	003b      	movs	r3, r7
    13ae:	881b      	ldrh	r3, [r3, #0]
    13b0:	0a1b      	lsrs	r3, r3, #8
    13b2:	b29b      	uxth	r3, r3
    13b4:	b2db      	uxtb	r3, r3
    13b6:	0019      	movs	r1, r3
    13b8:	0010      	movs	r0, r2
    13ba:	4b0e      	ldr	r3, [pc, #56]	; (13f4 <adc_async_channel_conversion_done+0xb0>)
    13bc:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    13be:	68fb      	ldr	r3, [r7, #12]
    13c0:	8a9b      	ldrh	r3, [r3, #20]
    13c2:	3301      	adds	r3, #1
    13c4:	b29a      	uxth	r2, r3
    13c6:	68fb      	ldr	r3, [r7, #12]
    13c8:	829a      	strh	r2, [r3, #20]
	}
	++descr_ch->bytes_in_buffer;
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	8a9b      	ldrh	r3, [r3, #20]
    13ce:	3301      	adds	r3, #1
    13d0:	b29a      	uxth	r2, r3
    13d2:	68fb      	ldr	r3, [r7, #12]
    13d4:	829a      	strh	r2, [r3, #20]

	if (descr_ch->adc_async_ch_cb.convert_done) {
    13d6:	68fb      	ldr	r3, [r7, #12]
    13d8:	681b      	ldr	r3, [r3, #0]
    13da:	2b00      	cmp	r3, #0
    13dc:	d006      	beq.n	13ec <adc_async_channel_conversion_done+0xa8>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	1cfa      	adds	r2, r7, #3
    13e4:	7811      	ldrb	r1, [r2, #0]
    13e6:	697a      	ldr	r2, [r7, #20]
    13e8:	0010      	movs	r0, r2
    13ea:	4798      	blx	r3
	}
}
    13ec:	46c0      	nop			; (mov r8, r8)
    13ee:	46bd      	mov	sp, r7
    13f0:	b006      	add	sp, #24
    13f2:	bd80      	pop	{r7, pc}
    13f4:	00001ee9 	.word	0x00001ee9
    13f8:	000026f9 	.word	0x000026f9

000013fc <adc_async_window_threshold_reached>:

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    13fc:	b580      	push	{r7, lr}
    13fe:	b084      	sub	sp, #16
    1400:	af00      	add	r7, sp, #0
    1402:	6078      	str	r0, [r7, #4]
    1404:	000a      	movs	r2, r1
    1406:	1cfb      	adds	r3, r7, #3
    1408:	701a      	strb	r2, [r3, #0]
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	60fb      	str	r3, [r7, #12]

	if (descr->adc_async_cb.monitor) {
    140e:	68fb      	ldr	r3, [r7, #12]
    1410:	699b      	ldr	r3, [r3, #24]
    1412:	2b00      	cmp	r3, #0
    1414:	d006      	beq.n	1424 <adc_async_window_threshold_reached+0x28>
		descr->adc_async_cb.monitor(descr, channel);
    1416:	68fb      	ldr	r3, [r7, #12]
    1418:	699b      	ldr	r3, [r3, #24]
    141a:	1cfa      	adds	r2, r7, #3
    141c:	7811      	ldrb	r1, [r2, #0]
    141e:	68fa      	ldr	r2, [r7, #12]
    1420:	0010      	movs	r0, r2
    1422:	4798      	blx	r3
	}
}
    1424:	46c0      	nop			; (mov r8, r8)
    1426:	46bd      	mov	sp, r7
    1428:	b004      	add	sp, #16
    142a:	bd80      	pop	{r7, pc}

0000142c <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    142c:	b580      	push	{r7, lr}
    142e:	b084      	sub	sp, #16
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	000a      	movs	r2, r1
    1436:	1cfb      	adds	r3, r7, #3
    1438:	701a      	strb	r2, [r3, #0]
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);
    143a:	687b      	ldr	r3, [r7, #4]
    143c:	60fb      	str	r3, [r7, #12]

	if (descr->adc_async_cb.error) {
    143e:	68fb      	ldr	r3, [r7, #12]
    1440:	69db      	ldr	r3, [r3, #28]
    1442:	2b00      	cmp	r3, #0
    1444:	d006      	beq.n	1454 <adc_async_error_occured+0x28>
		descr->adc_async_cb.error(descr, channel);
    1446:	68fb      	ldr	r3, [r7, #12]
    1448:	69db      	ldr	r3, [r3, #28]
    144a:	1cfa      	adds	r2, r7, #3
    144c:	7811      	ldrb	r1, [r2, #0]
    144e:	68fa      	ldr	r2, [r7, #12]
    1450:	0010      	movs	r0, r2
    1452:	4798      	blx	r3
	}
}
    1454:	46c0      	nop			; (mov r8, r8)
    1456:	46bd      	mov	sp, r7
    1458:	b004      	add	sp, #16
    145a:	bd80      	pop	{r7, pc}

0000145c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    145c:	b580      	push	{r7, lr}
    145e:	b084      	sub	sp, #16
    1460:	af00      	add	r7, sp, #0
    1462:	6078      	str	r0, [r7, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1464:	f3ef 8310 	mrs	r3, PRIMASK
    1468:	60fb      	str	r3, [r7, #12]
  return(result);
    146a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1470:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1472:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	46bd      	mov	sp, r7
    147a:	b004      	add	sp, #16
    147c:	bd80      	pop	{r7, pc}

0000147e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    147e:	b580      	push	{r7, lr}
    1480:	b084      	sub	sp, #16
    1482:	af00      	add	r7, sp, #0
    1484:	6078      	str	r0, [r7, #4]
    1486:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1490:	68fb      	ldr	r3, [r7, #12]
    1492:	f383 8810 	msr	PRIMASK, r3
}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	46bd      	mov	sp, r7
    149a:	b004      	add	sp, #16
    149c:	bd80      	pop	{r7, pc}
	...

000014a0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    14a0:	b580      	push	{r7, lr}
    14a2:	b08a      	sub	sp, #40	; 0x28
    14a4:	af00      	add	r7, sp, #0
    14a6:	60f8      	str	r0, [r7, #12]
    14a8:	60b9      	str	r1, [r7, #8]
    14aa:	1dbb      	adds	r3, r7, #6
    14ac:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	3b14      	subs	r3, #20
    14b2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    14b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14b6:	8b9a      	ldrh	r2, [r3, #28]
    14b8:	2314      	movs	r3, #20
    14ba:	18fb      	adds	r3, r7, r3
    14bc:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    14be:	1dbb      	adds	r3, r7, #6
    14c0:	881a      	ldrh	r2, [r3, #0]
    14c2:	2314      	movs	r3, #20
    14c4:	18fb      	adds	r3, r7, r3
    14c6:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    14c8:	2314      	movs	r3, #20
    14ca:	18fb      	adds	r3, r7, r3
    14cc:	4a0c      	ldr	r2, [pc, #48]	; (1500 <i2c_m_sync_read+0x60>)
    14ce:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    14d0:	2314      	movs	r3, #20
    14d2:	18fb      	adds	r3, r7, r3
    14d4:	68ba      	ldr	r2, [r7, #8]
    14d6:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    14d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14da:	2214      	movs	r2, #20
    14dc:	18ba      	adds	r2, r7, r2
    14de:	0011      	movs	r1, r2
    14e0:	0018      	movs	r0, r3
    14e2:	4b08      	ldr	r3, [pc, #32]	; (1504 <i2c_m_sync_read+0x64>)
    14e4:	4798      	blx	r3
    14e6:	0003      	movs	r3, r0
    14e8:	623b      	str	r3, [r7, #32]

	if (ret) {
    14ea:	6a3b      	ldr	r3, [r7, #32]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d001      	beq.n	14f4 <i2c_m_sync_read+0x54>
		return ret;
    14f0:	6a3b      	ldr	r3, [r7, #32]
    14f2:	e001      	b.n	14f8 <i2c_m_sync_read+0x58>
	}

	return n;
    14f4:	1dbb      	adds	r3, r7, #6
    14f6:	881b      	ldrh	r3, [r3, #0]
}
    14f8:	0018      	movs	r0, r3
    14fa:	46bd      	mov	sp, r7
    14fc:	b00a      	add	sp, #40	; 0x28
    14fe:	bd80      	pop	{r7, pc}
    1500:	ffff8001 	.word	0xffff8001
    1504:	00003b29 	.word	0x00003b29

00001508 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1508:	b580      	push	{r7, lr}
    150a:	b08a      	sub	sp, #40	; 0x28
    150c:	af00      	add	r7, sp, #0
    150e:	60f8      	str	r0, [r7, #12]
    1510:	60b9      	str	r1, [r7, #8]
    1512:	1dbb      	adds	r3, r7, #6
    1514:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1516:	68fb      	ldr	r3, [r7, #12]
    1518:	3b14      	subs	r3, #20
    151a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    151e:	8b9a      	ldrh	r2, [r3, #28]
    1520:	2314      	movs	r3, #20
    1522:	18fb      	adds	r3, r7, r3
    1524:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    1526:	1dbb      	adds	r3, r7, #6
    1528:	881a      	ldrh	r2, [r3, #0]
    152a:	2314      	movs	r3, #20
    152c:	18fb      	adds	r3, r7, r3
    152e:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP;
    1530:	2314      	movs	r3, #20
    1532:	18fb      	adds	r3, r7, r3
    1534:	4a0c      	ldr	r2, [pc, #48]	; (1568 <i2c_m_sync_write+0x60>)
    1536:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    1538:	2314      	movs	r3, #20
    153a:	18fb      	adds	r3, r7, r3
    153c:	68ba      	ldr	r2, [r7, #8]
    153e:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1542:	2214      	movs	r2, #20
    1544:	18ba      	adds	r2, r7, r2
    1546:	0011      	movs	r1, r2
    1548:	0018      	movs	r0, r3
    154a:	4b08      	ldr	r3, [pc, #32]	; (156c <i2c_m_sync_write+0x64>)
    154c:	4798      	blx	r3
    154e:	0003      	movs	r3, r0
    1550:	623b      	str	r3, [r7, #32]

	if (ret) {
    1552:	6a3b      	ldr	r3, [r7, #32]
    1554:	2b00      	cmp	r3, #0
    1556:	d001      	beq.n	155c <i2c_m_sync_write+0x54>
		return ret;
    1558:	6a3b      	ldr	r3, [r7, #32]
    155a:	e001      	b.n	1560 <i2c_m_sync_write+0x58>
	}

	return n;
    155c:	1dbb      	adds	r3, r7, #6
    155e:	881b      	ldrh	r3, [r3, #0]
}
    1560:	0018      	movs	r0, r3
    1562:	46bd      	mov	sp, r7
    1564:	b00a      	add	sp, #40	; 0x28
    1566:	bd80      	pop	{r7, pc}
    1568:	ffff8000 	.word	0xffff8000
    156c:	00003b29 	.word	0x00003b29

00001570 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1570:	b580      	push	{r7, lr}
    1572:	b084      	sub	sp, #16
    1574:	af00      	add	r7, sp, #0
    1576:	6078      	str	r0, [r7, #4]
    1578:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	1e5a      	subs	r2, r3, #1
    157e:	4193      	sbcs	r3, r2
    1580:	b2db      	uxtb	r3, r3
    1582:	490e      	ldr	r1, [pc, #56]	; (15bc <i2c_m_sync_init+0x4c>)
    1584:	225e      	movs	r2, #94	; 0x5e
    1586:	0018      	movs	r0, r3
    1588:	4b0d      	ldr	r3, [pc, #52]	; (15c0 <i2c_m_sync_init+0x50>)
    158a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	683a      	ldr	r2, [r7, #0]
    1590:	0011      	movs	r1, r2
    1592:	0018      	movs	r0, r3
    1594:	4b0b      	ldr	r3, [pc, #44]	; (15c4 <i2c_m_sync_init+0x54>)
    1596:	4798      	blx	r3
    1598:	0003      	movs	r3, r0
    159a:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    159c:	68fb      	ldr	r3, [r7, #12]
    159e:	2b00      	cmp	r3, #0
    15a0:	d001      	beq.n	15a6 <i2c_m_sync_init+0x36>
		return init_status;
    15a2:	68fb      	ldr	r3, [r7, #12]
    15a4:	e006      	b.n	15b4 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    15a6:	687b      	ldr	r3, [r7, #4]
    15a8:	4a07      	ldr	r2, [pc, #28]	; (15c8 <i2c_m_sync_init+0x58>)
    15aa:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	4a07      	ldr	r2, [pc, #28]	; (15cc <i2c_m_sync_init+0x5c>)
    15b0:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    15b2:	2300      	movs	r3, #0
}
    15b4:	0018      	movs	r0, r3
    15b6:	46bd      	mov	sp, r7
    15b8:	b004      	add	sp, #16
    15ba:	bd80      	pop	{r7, pc}
    15bc:	00004b8c 	.word	0x00004b8c
    15c0:	00001cf7 	.word	0x00001cf7
    15c4:	00003945 	.word	0x00003945
    15c8:	000014a1 	.word	0x000014a1
    15cc:	00001509 	.word	0x00001509

000015d0 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	60f8      	str	r0, [r7, #12]
    15d8:	607a      	str	r2, [r7, #4]
    15da:	230a      	movs	r3, #10
    15dc:	18fb      	adds	r3, r7, r3
    15de:	1c0a      	adds	r2, r1, #0
    15e0:	801a      	strh	r2, [r3, #0]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    15e2:	230a      	movs	r3, #10
    15e4:	18fb      	adds	r3, r7, r3
    15e6:	881b      	ldrh	r3, [r3, #0]
    15e8:	059b      	lsls	r3, r3, #22
    15ea:	0d9b      	lsrs	r3, r3, #22
    15ec:	b21a      	sxth	r2, r3
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	b219      	sxth	r1, r3
    15f2:	2380      	movs	r3, #128	; 0x80
    15f4:	00db      	lsls	r3, r3, #3
    15f6:	400b      	ands	r3, r1
    15f8:	b21b      	sxth	r3, r3
    15fa:	4313      	orrs	r3, r2
    15fc:	b21b      	sxth	r3, r3
    15fe:	b29a      	uxth	r2, r3
    1600:	68fb      	ldr	r3, [r7, #12]
    1602:	839a      	strh	r2, [r3, #28]
    1604:	68fb      	ldr	r3, [r7, #12]
    1606:	8b9b      	ldrh	r3, [r3, #28]
}
    1608:	0018      	movs	r0, r3
    160a:	46bd      	mov	sp, r7
    160c:	b004      	add	sp, #16
    160e:	bd80      	pop	{r7, pc}

00001610 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    1610:	b580      	push	{r7, lr}
    1612:	b082      	sub	sp, #8
    1614:	af00      	add	r7, sp, #0
    1616:	6078      	str	r0, [r7, #4]
    1618:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    161a:	687b      	ldr	r3, [r7, #4]
    161c:	3314      	adds	r3, #20
    161e:	001a      	movs	r2, r3
    1620:	683b      	ldr	r3, [r7, #0]
    1622:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1624:	2300      	movs	r3, #0
}
    1626:	0018      	movs	r0, r3
    1628:	46bd      	mov	sp, r7
    162a:	b002      	add	sp, #8
    162c:	bd80      	pop	{r7, pc}
	...

00001630 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1630:	b580      	push	{r7, lr}
    1632:	b084      	sub	sp, #16
    1634:	af00      	add	r7, sp, #0
    1636:	60f8      	str	r0, [r7, #12]
    1638:	60b9      	str	r1, [r7, #8]
    163a:	1dbb      	adds	r3, r7, #6
    163c:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    163e:	68fb      	ldr	r3, [r7, #12]
    1640:	2b00      	cmp	r3, #0
    1642:	d004      	beq.n	164e <io_write+0x1e>
    1644:	68bb      	ldr	r3, [r7, #8]
    1646:	2b00      	cmp	r3, #0
    1648:	d001      	beq.n	164e <io_write+0x1e>
    164a:	2301      	movs	r3, #1
    164c:	e000      	b.n	1650 <io_write+0x20>
    164e:	2300      	movs	r3, #0
    1650:	1c1a      	adds	r2, r3, #0
    1652:	2301      	movs	r3, #1
    1654:	4013      	ands	r3, r2
    1656:	b2db      	uxtb	r3, r3
    1658:	4908      	ldr	r1, [pc, #32]	; (167c <io_write+0x4c>)
    165a:	2234      	movs	r2, #52	; 0x34
    165c:	0018      	movs	r0, r3
    165e:	4b08      	ldr	r3, [pc, #32]	; (1680 <io_write+0x50>)
    1660:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1662:	68fb      	ldr	r3, [r7, #12]
    1664:	681b      	ldr	r3, [r3, #0]
    1666:	1dba      	adds	r2, r7, #6
    1668:	8812      	ldrh	r2, [r2, #0]
    166a:	68b9      	ldr	r1, [r7, #8]
    166c:	68f8      	ldr	r0, [r7, #12]
    166e:	4798      	blx	r3
    1670:	0003      	movs	r3, r0
}
    1672:	0018      	movs	r0, r3
    1674:	46bd      	mov	sp, r7
    1676:	b004      	add	sp, #16
    1678:	bd80      	pop	{r7, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	00004ba8 	.word	0x00004ba8
    1680:	00001cf7 	.word	0x00001cf7

00001684 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1684:	b580      	push	{r7, lr}
    1686:	b084      	sub	sp, #16
    1688:	af00      	add	r7, sp, #0
    168a:	60f8      	str	r0, [r7, #12]
    168c:	60b9      	str	r1, [r7, #8]
    168e:	1dbb      	adds	r3, r7, #6
    1690:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1692:	68fb      	ldr	r3, [r7, #12]
    1694:	2b00      	cmp	r3, #0
    1696:	d004      	beq.n	16a2 <io_read+0x1e>
    1698:	68bb      	ldr	r3, [r7, #8]
    169a:	2b00      	cmp	r3, #0
    169c:	d001      	beq.n	16a2 <io_read+0x1e>
    169e:	2301      	movs	r3, #1
    16a0:	e000      	b.n	16a4 <io_read+0x20>
    16a2:	2300      	movs	r3, #0
    16a4:	1c1a      	adds	r2, r3, #0
    16a6:	2301      	movs	r3, #1
    16a8:	4013      	ands	r3, r2
    16aa:	b2db      	uxtb	r3, r3
    16ac:	4908      	ldr	r1, [pc, #32]	; (16d0 <io_read+0x4c>)
    16ae:	223d      	movs	r2, #61	; 0x3d
    16b0:	0018      	movs	r0, r3
    16b2:	4b08      	ldr	r3, [pc, #32]	; (16d4 <io_read+0x50>)
    16b4:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    16b6:	68fb      	ldr	r3, [r7, #12]
    16b8:	685b      	ldr	r3, [r3, #4]
    16ba:	1dba      	adds	r2, r7, #6
    16bc:	8812      	ldrh	r2, [r2, #0]
    16be:	68b9      	ldr	r1, [r7, #8]
    16c0:	68f8      	ldr	r0, [r7, #12]
    16c2:	4798      	blx	r3
    16c4:	0003      	movs	r3, r0
}
    16c6:	0018      	movs	r0, r3
    16c8:	46bd      	mov	sp, r7
    16ca:	b004      	add	sp, #16
    16cc:	bd80      	pop	{r7, pc}
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	00004ba8 	.word	0x00004ba8
    16d4:	00001cf7 	.word	0x00001cf7

000016d8 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    16d8:	b580      	push	{r7, lr}
    16da:	b084      	sub	sp, #16
    16dc:	af00      	add	r7, sp, #0
    16de:	60f8      	str	r0, [r7, #12]
    16e0:	60b9      	str	r1, [r7, #8]
    16e2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    16e4:	68fb      	ldr	r3, [r7, #12]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d004      	beq.n	16f4 <pwm_init+0x1c>
    16ea:	68bb      	ldr	r3, [r7, #8]
    16ec:	2b00      	cmp	r3, #0
    16ee:	d001      	beq.n	16f4 <pwm_init+0x1c>
    16f0:	2301      	movs	r3, #1
    16f2:	e000      	b.n	16f6 <pwm_init+0x1e>
    16f4:	2300      	movs	r3, #0
    16f6:	1c1a      	adds	r2, r3, #0
    16f8:	2301      	movs	r3, #1
    16fa:	4013      	ands	r3, r2
    16fc:	b2db      	uxtb	r3, r3
    16fe:	490b      	ldr	r1, [pc, #44]	; (172c <pwm_init+0x54>)
    1700:	2233      	movs	r2, #51	; 0x33
    1702:	0018      	movs	r0, r3
    1704:	4b0a      	ldr	r3, [pc, #40]	; (1730 <pwm_init+0x58>)
    1706:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1708:	68fb      	ldr	r3, [r7, #12]
    170a:	68ba      	ldr	r2, [r7, #8]
    170c:	0011      	movs	r1, r2
    170e:	0018      	movs	r0, r3
    1710:	4b08      	ldr	r3, [pc, #32]	; (1734 <pwm_init+0x5c>)
    1712:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1714:	68fb      	ldr	r3, [r7, #12]
    1716:	4a08      	ldr	r2, [pc, #32]	; (1738 <pwm_init+0x60>)
    1718:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    171a:	68fb      	ldr	r3, [r7, #12]
    171c:	4a07      	ldr	r2, [pc, #28]	; (173c <pwm_init+0x64>)
    171e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1720:	2300      	movs	r3, #0
}
    1722:	0018      	movs	r0, r3
    1724:	46bd      	mov	sp, r7
    1726:	b004      	add	sp, #16
    1728:	bd80      	pop	{r7, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	00004bbc 	.word	0x00004bbc
    1730:	00001cf7 	.word	0x00001cf7
    1734:	00004671 	.word	0x00004671
    1738:	00001741 	.word	0x00001741
    173c:	00001767 	.word	0x00001767

00001740 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1740:	b580      	push	{r7, lr}
    1742:	b084      	sub	sp, #16
    1744:	af00      	add	r7, sp, #0
    1746:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    174c:	68fb      	ldr	r3, [r7, #12]
    174e:	695b      	ldr	r3, [r3, #20]
    1750:	2b00      	cmp	r3, #0
    1752:	d004      	beq.n	175e <pwm_period_expired+0x1e>
		descr->pwm_cb.period(descr);
    1754:	68fb      	ldr	r3, [r7, #12]
    1756:	695b      	ldr	r3, [r3, #20]
    1758:	68fa      	ldr	r2, [r7, #12]
    175a:	0010      	movs	r0, r2
    175c:	4798      	blx	r3
	}
}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	46bd      	mov	sp, r7
    1762:	b004      	add	sp, #16
    1764:	bd80      	pop	{r7, pc}

00001766 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1766:	b580      	push	{r7, lr}
    1768:	b084      	sub	sp, #16
    176a:	af00      	add	r7, sp, #0
    176c:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    176e:	687b      	ldr	r3, [r7, #4]
    1770:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1772:	68fb      	ldr	r3, [r7, #12]
    1774:	699b      	ldr	r3, [r3, #24]
    1776:	2b00      	cmp	r3, #0
    1778:	d004      	beq.n	1784 <pwm_detect_fault+0x1e>
		descr->pwm_cb.error(descr);
    177a:	68fb      	ldr	r3, [r7, #12]
    177c:	699b      	ldr	r3, [r3, #24]
    177e:	68fa      	ldr	r2, [r7, #12]
    1780:	0010      	movs	r0, r2
    1782:	4798      	blx	r3
	}
}
    1784:	46c0      	nop			; (mov r8, r8)
    1786:	46bd      	mov	sp, r7
    1788:	b004      	add	sp, #16
    178a:	bd80      	pop	{r7, pc}

0000178c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    1792:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	681b      	ldr	r3, [r3, #0]
}
    1798:	0018      	movs	r0, r3
    179a:	46bd      	mov	sp, r7
    179c:	b002      	add	sp, #8
    179e:	bd80      	pop	{r7, pc}

000017a0 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    17a0:	b580      	push	{r7, lr}
    17a2:	b082      	sub	sp, #8
    17a4:	af00      	add	r7, sp, #0
    17a6:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    17a8:	687b      	ldr	r3, [r7, #4]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d002      	beq.n	17b4 <list_get_next_element+0x14>
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	681b      	ldr	r3, [r3, #0]
    17b2:	e000      	b.n	17b6 <list_get_next_element+0x16>
    17b4:	2300      	movs	r3, #0
}
    17b6:	0018      	movs	r0, r3
    17b8:	46bd      	mov	sp, r7
    17ba:	b002      	add	sp, #8
    17bc:	bd80      	pop	{r7, pc}
	...

000017c0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	b084      	sub	sp, #16
    17c4:	af00      	add	r7, sp, #0
    17c6:	60f8      	str	r0, [r7, #12]
    17c8:	60b9      	str	r1, [r7, #8]
    17ca:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    17cc:	68fb      	ldr	r3, [r7, #12]
    17ce:	2b00      	cmp	r3, #0
    17d0:	d004      	beq.n	17dc <timer_init+0x1c>
    17d2:	68bb      	ldr	r3, [r7, #8]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d001      	beq.n	17dc <timer_init+0x1c>
    17d8:	2301      	movs	r3, #1
    17da:	e000      	b.n	17de <timer_init+0x1e>
    17dc:	2300      	movs	r3, #0
    17de:	1c1a      	adds	r2, r3, #0
    17e0:	2301      	movs	r3, #1
    17e2:	4013      	ands	r3, r2
    17e4:	b2db      	uxtb	r3, r3
    17e6:	490b      	ldr	r1, [pc, #44]	; (1814 <timer_init+0x54>)
    17e8:	223b      	movs	r2, #59	; 0x3b
    17ea:	0018      	movs	r0, r3
    17ec:	4b0a      	ldr	r3, [pc, #40]	; (1818 <timer_init+0x58>)
    17ee:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	68ba      	ldr	r2, [r7, #8]
    17f4:	0011      	movs	r1, r2
    17f6:	0018      	movs	r0, r3
    17f8:	4b08      	ldr	r3, [pc, #32]	; (181c <timer_init+0x5c>)
    17fa:	4798      	blx	r3
	descr->time                           = 0;
    17fc:	68fb      	ldr	r3, [r7, #12]
    17fe:	2200      	movs	r2, #0
    1800:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1802:	68fb      	ldr	r3, [r7, #12]
    1804:	4a06      	ldr	r2, [pc, #24]	; (1820 <timer_init+0x60>)
    1806:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1808:	2300      	movs	r3, #0
}
    180a:	0018      	movs	r0, r3
    180c:	46bd      	mov	sp, r7
    180e:	b004      	add	sp, #16
    1810:	bd80      	pop	{r7, pc}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	00004bd4 	.word	0x00004bd4
    1818:	00001cf7 	.word	0x00001cf7
    181c:	00004249 	.word	0x00004249
    1820:	000018e9 	.word	0x000018e9

00001824 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1824:	b580      	push	{r7, lr}
    1826:	b088      	sub	sp, #32
    1828:	af00      	add	r7, sp, #0
    182a:	60f8      	str	r0, [r7, #12]
    182c:	60b9      	str	r1, [r7, #8]
    182e:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    1830:	2300      	movs	r3, #0
    1832:	61bb      	str	r3, [r7, #24]
    1834:	68fb      	ldr	r3, [r7, #12]
    1836:	0018      	movs	r0, r3
    1838:	4b27      	ldr	r3, [pc, #156]	; (18d8 <timer_add_timer_task+0xb4>)
    183a:	4798      	blx	r3
    183c:	0003      	movs	r3, r0
    183e:	613b      	str	r3, [r7, #16]

	if (!head) {
    1840:	693b      	ldr	r3, [r7, #16]
    1842:	2b00      	cmp	r3, #0
    1844:	d106      	bne.n	1854 <timer_add_timer_task+0x30>
		list_insert_as_head(list, new_task);
    1846:	68ba      	ldr	r2, [r7, #8]
    1848:	68fb      	ldr	r3, [r7, #12]
    184a:	0011      	movs	r1, r2
    184c:	0018      	movs	r0, r3
    184e:	4b23      	ldr	r3, [pc, #140]	; (18dc <timer_add_timer_task+0xb8>)
    1850:	4798      	blx	r3
		return;
    1852:	e03d      	b.n	18d0 <timer_add_timer_task+0xac>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1854:	693b      	ldr	r3, [r7, #16]
    1856:	61fb      	str	r3, [r7, #28]
    1858:	e024      	b.n	18a4 <timer_add_timer_task+0x80>
		uint32_t time_left;

		if (it->time_label <= time) {
    185a:	69fb      	ldr	r3, [r7, #28]
    185c:	685a      	ldr	r2, [r3, #4]
    185e:	687b      	ldr	r3, [r7, #4]
    1860:	429a      	cmp	r2, r3
    1862:	d808      	bhi.n	1876 <timer_add_timer_task+0x52>
			time_left = it->interval - (time - it->time_label);
    1864:	69fb      	ldr	r3, [r7, #28]
    1866:	689a      	ldr	r2, [r3, #8]
    1868:	69fb      	ldr	r3, [r7, #28]
    186a:	6859      	ldr	r1, [r3, #4]
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	1acb      	subs	r3, r1, r3
    1870:	18d3      	adds	r3, r2, r3
    1872:	617b      	str	r3, [r7, #20]
    1874:	e009      	b.n	188a <timer_add_timer_task+0x66>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1876:	69fb      	ldr	r3, [r7, #28]
    1878:	689a      	ldr	r2, [r3, #8]
    187a:	69fb      	ldr	r3, [r7, #28]
    187c:	685b      	ldr	r3, [r3, #4]
    187e:	18d2      	adds	r2, r2, r3
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	425b      	negs	r3, r3
    1884:	18d3      	adds	r3, r2, r3
    1886:	3301      	adds	r3, #1
    1888:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    188a:	68bb      	ldr	r3, [r7, #8]
    188c:	689a      	ldr	r2, [r3, #8]
    188e:	697b      	ldr	r3, [r7, #20]
    1890:	429a      	cmp	r2, r3
    1892:	d90b      	bls.n	18ac <timer_add_timer_task+0x88>
			break;
		prev = it;
    1894:	69fb      	ldr	r3, [r7, #28]
    1896:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1898:	69fb      	ldr	r3, [r7, #28]
    189a:	0018      	movs	r0, r3
    189c:	4b10      	ldr	r3, [pc, #64]	; (18e0 <timer_add_timer_task+0xbc>)
    189e:	4798      	blx	r3
    18a0:	0003      	movs	r3, r0
    18a2:	61fb      	str	r3, [r7, #28]
    18a4:	69fb      	ldr	r3, [r7, #28]
    18a6:	2b00      	cmp	r3, #0
    18a8:	d1d7      	bne.n	185a <timer_add_timer_task+0x36>
    18aa:	e000      	b.n	18ae <timer_add_timer_task+0x8a>
			break;
    18ac:	46c0      	nop			; (mov r8, r8)
	}

	if (it == head) {
    18ae:	69fa      	ldr	r2, [r7, #28]
    18b0:	693b      	ldr	r3, [r7, #16]
    18b2:	429a      	cmp	r2, r3
    18b4:	d106      	bne.n	18c4 <timer_add_timer_task+0xa0>
		list_insert_as_head(list, new_task);
    18b6:	68ba      	ldr	r2, [r7, #8]
    18b8:	68fb      	ldr	r3, [r7, #12]
    18ba:	0011      	movs	r1, r2
    18bc:	0018      	movs	r0, r3
    18be:	4b07      	ldr	r3, [pc, #28]	; (18dc <timer_add_timer_task+0xb8>)
    18c0:	4798      	blx	r3
    18c2:	e005      	b.n	18d0 <timer_add_timer_task+0xac>
	} else {
		list_insert_after(prev, new_task);
    18c4:	68ba      	ldr	r2, [r7, #8]
    18c6:	69bb      	ldr	r3, [r7, #24]
    18c8:	0011      	movs	r1, r2
    18ca:	0018      	movs	r0, r3
    18cc:	4b05      	ldr	r3, [pc, #20]	; (18e4 <timer_add_timer_task+0xc0>)
    18ce:	4798      	blx	r3
	}
}
    18d0:	46bd      	mov	sp, r7
    18d2:	b008      	add	sp, #32
    18d4:	bd80      	pop	{r7, pc}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	0000178d 	.word	0x0000178d
    18dc:	00001d59 	.word	0x00001d59
    18e0:	000017a1 	.word	0x000017a1
    18e4:	00001db1 	.word	0x00001db1

000018e8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	b086      	sub	sp, #24
    18ec:	af00      	add	r7, sp, #0
    18ee:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    18f0:	687b      	ldr	r3, [r7, #4]
    18f2:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    18f4:	693b      	ldr	r3, [r7, #16]
    18f6:	3314      	adds	r3, #20
    18f8:	0018      	movs	r0, r3
    18fa:	4b29      	ldr	r3, [pc, #164]	; (19a0 <timer_process_counted+0xb8>)
    18fc:	4798      	blx	r3
    18fe:	0003      	movs	r3, r0
    1900:	617b      	str	r3, [r7, #20]
	uint32_t                 time  = ++timer->time;
    1902:	693b      	ldr	r3, [r7, #16]
    1904:	691b      	ldr	r3, [r3, #16]
    1906:	1c5a      	adds	r2, r3, #1
    1908:	693b      	ldr	r3, [r7, #16]
    190a:	611a      	str	r2, [r3, #16]
    190c:	693b      	ldr	r3, [r7, #16]
    190e:	691b      	ldr	r3, [r3, #16]
    1910:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1912:	693b      	ldr	r3, [r7, #16]
    1914:	7e1b      	ldrb	r3, [r3, #24]
    1916:	b2db      	uxtb	r3, r3
    1918:	001a      	movs	r2, r3
    191a:	2301      	movs	r3, #1
    191c:	4013      	ands	r3, r2
    191e:	d106      	bne.n	192e <timer_process_counted+0x46>
    1920:	693b      	ldr	r3, [r7, #16]
    1922:	7e1b      	ldrb	r3, [r3, #24]
    1924:	b2db      	uxtb	r3, r3
    1926:	001a      	movs	r2, r3
    1928:	2302      	movs	r3, #2
    192a:	4013      	ands	r3, r2
    192c:	d029      	beq.n	1982 <timer_process_counted+0x9a>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    192e:	693b      	ldr	r3, [r7, #16]
    1930:	7e1b      	ldrb	r3, [r3, #24]
    1932:	b2db      	uxtb	r3, r3
    1934:	2202      	movs	r2, #2
    1936:	4313      	orrs	r3, r2
    1938:	b2da      	uxtb	r2, r3
    193a:	693b      	ldr	r3, [r7, #16]
    193c:	761a      	strb	r2, [r3, #24]
		return;
    193e:	e02b      	b.n	1998 <timer_process_counted+0xb0>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    1940:	697b      	ldr	r3, [r7, #20]
    1942:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    1944:	693b      	ldr	r3, [r7, #16]
    1946:	3314      	adds	r3, #20
    1948:	0018      	movs	r0, r3
    194a:	4b16      	ldr	r3, [pc, #88]	; (19a4 <timer_process_counted+0xbc>)
    194c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    194e:	68bb      	ldr	r3, [r7, #8]
    1950:	7c1b      	ldrb	r3, [r3, #16]
    1952:	2b01      	cmp	r3, #1
    1954:	d109      	bne.n	196a <timer_process_counted+0x82>
			tmp->time_label = time;
    1956:	68bb      	ldr	r3, [r7, #8]
    1958:	68fa      	ldr	r2, [r7, #12]
    195a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    195c:	693b      	ldr	r3, [r7, #16]
    195e:	3314      	adds	r3, #20
    1960:	68fa      	ldr	r2, [r7, #12]
    1962:	68b9      	ldr	r1, [r7, #8]
    1964:	0018      	movs	r0, r3
    1966:	4b10      	ldr	r3, [pc, #64]	; (19a8 <timer_process_counted+0xc0>)
    1968:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    196a:	693b      	ldr	r3, [r7, #16]
    196c:	3314      	adds	r3, #20
    196e:	0018      	movs	r0, r3
    1970:	4b0b      	ldr	r3, [pc, #44]	; (19a0 <timer_process_counted+0xb8>)
    1972:	4798      	blx	r3
    1974:	0003      	movs	r3, r0
    1976:	617b      	str	r3, [r7, #20]

		tmp->cb(tmp);
    1978:	68bb      	ldr	r3, [r7, #8]
    197a:	68db      	ldr	r3, [r3, #12]
    197c:	68ba      	ldr	r2, [r7, #8]
    197e:	0010      	movs	r0, r2
    1980:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1982:	697b      	ldr	r3, [r7, #20]
    1984:	2b00      	cmp	r3, #0
    1986:	d007      	beq.n	1998 <timer_process_counted+0xb0>
    1988:	697b      	ldr	r3, [r7, #20]
    198a:	685b      	ldr	r3, [r3, #4]
    198c:	68fa      	ldr	r2, [r7, #12]
    198e:	1ad2      	subs	r2, r2, r3
    1990:	697b      	ldr	r3, [r7, #20]
    1992:	689b      	ldr	r3, [r3, #8]
    1994:	429a      	cmp	r2, r3
    1996:	d2d3      	bcs.n	1940 <timer_process_counted+0x58>
	}
}
    1998:	46bd      	mov	sp, r7
    199a:	b006      	add	sp, #24
    199c:	bd80      	pop	{r7, pc}
    199e:	46c0      	nop			; (mov r8, r8)
    19a0:	0000178d 	.word	0x0000178d
    19a4:	00001dd1 	.word	0x00001dd1
    19a8:	00001825 	.word	0x00001825

000019ac <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
    19ac:	b580      	push	{r7, lr}
    19ae:	b086      	sub	sp, #24
    19b0:	af00      	add	r7, sp, #0
    19b2:	60f8      	str	r0, [r7, #12]
    19b4:	60b9      	str	r1, [r7, #8]
    19b6:	607a      	str	r2, [r7, #4]
    19b8:	001a      	movs	r2, r3
    19ba:	1cbb      	adds	r3, r7, #2
    19bc:	801a      	strh	r2, [r3, #0]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    19be:	68fb      	ldr	r3, [r7, #12]
    19c0:	2b00      	cmp	r3, #0
    19c2:	d00b      	beq.n	19dc <usart_async_init+0x30>
    19c4:	68bb      	ldr	r3, [r7, #8]
    19c6:	2b00      	cmp	r3, #0
    19c8:	d008      	beq.n	19dc <usart_async_init+0x30>
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	2b00      	cmp	r3, #0
    19ce:	d005      	beq.n	19dc <usart_async_init+0x30>
    19d0:	1cbb      	adds	r3, r7, #2
    19d2:	881b      	ldrh	r3, [r3, #0]
    19d4:	2b00      	cmp	r3, #0
    19d6:	d001      	beq.n	19dc <usart_async_init+0x30>
    19d8:	2301      	movs	r3, #1
    19da:	e000      	b.n	19de <usart_async_init+0x32>
    19dc:	2300      	movs	r3, #0
    19de:	1c1a      	adds	r2, r3, #0
    19e0:	2301      	movs	r3, #1
    19e2:	4013      	ands	r3, r2
    19e4:	b2db      	uxtb	r3, r3
    19e6:	491c      	ldr	r1, [pc, #112]	; (1a58 <usart_async_init+0xac>)
    19e8:	223a      	movs	r2, #58	; 0x3a
    19ea:	0018      	movs	r0, r3
    19ec:	4b1b      	ldr	r3, [pc, #108]	; (1a5c <usart_async_init+0xb0>)
    19ee:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    19f0:	68fb      	ldr	r3, [r7, #12]
    19f2:	3334      	adds	r3, #52	; 0x34
    19f4:	0018      	movs	r0, r3
    19f6:	1cbb      	adds	r3, r7, #2
    19f8:	881a      	ldrh	r2, [r3, #0]
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	0019      	movs	r1, r3
    19fe:	4b18      	ldr	r3, [pc, #96]	; (1a60 <usart_async_init+0xb4>)
    1a00:	4798      	blx	r3
    1a02:	1e03      	subs	r3, r0, #0
    1a04:	d002      	beq.n	1a0c <usart_async_init+0x60>
		return ERR_INVALID_ARG;
    1a06:	230d      	movs	r3, #13
    1a08:	425b      	negs	r3, r3
    1a0a:	e020      	b.n	1a4e <usart_async_init+0xa2>
	}
	init_status = _usart_async_init(&descr->device, hw);
    1a0c:	68fb      	ldr	r3, [r7, #12]
    1a0e:	3308      	adds	r3, #8
    1a10:	68ba      	ldr	r2, [r7, #8]
    1a12:	0011      	movs	r1, r2
    1a14:	0018      	movs	r0, r3
    1a16:	4b13      	ldr	r3, [pc, #76]	; (1a64 <usart_async_init+0xb8>)
    1a18:	4798      	blx	r3
    1a1a:	0003      	movs	r3, r0
    1a1c:	617b      	str	r3, [r7, #20]
	if (init_status) {
    1a1e:	697b      	ldr	r3, [r7, #20]
    1a20:	2b00      	cmp	r3, #0
    1a22:	d001      	beq.n	1a28 <usart_async_init+0x7c>
		return init_status;
    1a24:	697b      	ldr	r3, [r7, #20]
    1a26:	e012      	b.n	1a4e <usart_async_init+0xa2>
	}

	descr->io.read  = usart_async_read;
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	4a0f      	ldr	r2, [pc, #60]	; (1a68 <usart_async_init+0xbc>)
    1a2c:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
    1a2e:	68fb      	ldr	r3, [r7, #12]
    1a30:	4a0e      	ldr	r2, [pc, #56]	; (1a6c <usart_async_init+0xc0>)
    1a32:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1a34:	68fb      	ldr	r3, [r7, #12]
    1a36:	4a0e      	ldr	r2, [pc, #56]	; (1a70 <usart_async_init+0xc4>)
    1a38:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1a3a:	68fb      	ldr	r3, [r7, #12]
    1a3c:	4a0d      	ldr	r2, [pc, #52]	; (1a74 <usart_async_init+0xc8>)
    1a3e:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1a40:	68fb      	ldr	r3, [r7, #12]
    1a42:	4a0d      	ldr	r2, [pc, #52]	; (1a78 <usart_async_init+0xcc>)
    1a44:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1a46:	68fb      	ldr	r3, [r7, #12]
    1a48:	4a0c      	ldr	r2, [pc, #48]	; (1a7c <usart_async_init+0xd0>)
    1a4a:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1a4c:	2300      	movs	r3, #0
}
    1a4e:	0018      	movs	r0, r3
    1a50:	46bd      	mov	sp, r7
    1a52:	b006      	add	sp, #24
    1a54:	bd80      	pop	{r7, pc}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	00004bec 	.word	0x00004bec
    1a5c:	00001cf7 	.word	0x00001cf7
    1a60:	00001e01 	.word	0x00001e01
    1a64:	000030f1 	.word	0x000030f1
    1a68:	00001b19 	.word	0x00001b19
    1a6c:	00001a81 	.word	0x00001a81
    1a70:	00001be5 	.word	0x00001be5
    1a74:	00001c85 	.word	0x00001c85
    1a78:	00001c55 	.word	0x00001c55
    1a7c:	00001cc9 	.word	0x00001cc9

00001a80 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1a80:	b580      	push	{r7, lr}
    1a82:	b086      	sub	sp, #24
    1a84:	af00      	add	r7, sp, #0
    1a86:	60f8      	str	r0, [r7, #12]
    1a88:	60b9      	str	r1, [r7, #8]
    1a8a:	1dbb      	adds	r3, r7, #6
    1a8c:	801a      	strh	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
    1a92:	697b      	ldr	r3, [r7, #20]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d008      	beq.n	1aaa <usart_async_write+0x2a>
    1a98:	68bb      	ldr	r3, [r7, #8]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d005      	beq.n	1aaa <usart_async_write+0x2a>
    1a9e:	1dbb      	adds	r3, r7, #6
    1aa0:	881b      	ldrh	r3, [r3, #0]
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d001      	beq.n	1aaa <usart_async_write+0x2a>
    1aa6:	2301      	movs	r3, #1
    1aa8:	e000      	b.n	1aac <usart_async_write+0x2c>
    1aaa:	2300      	movs	r3, #0
    1aac:	1c1a      	adds	r2, r3, #0
    1aae:	2301      	movs	r3, #1
    1ab0:	4013      	ands	r3, r2
    1ab2:	b2d8      	uxtb	r0, r3
    1ab4:	233c      	movs	r3, #60	; 0x3c
    1ab6:	33ff      	adds	r3, #255	; 0xff
    1ab8:	001a      	movs	r2, r3
    1aba:	4b14      	ldr	r3, [pc, #80]	; (1b0c <usart_async_write+0x8c>)
    1abc:	0019      	movs	r1, r3
    1abe:	4b14      	ldr	r3, [pc, #80]	; (1b10 <usart_async_write+0x90>)
    1ac0:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    1ac2:	697b      	ldr	r3, [r7, #20]
    1ac4:	2244      	movs	r2, #68	; 0x44
    1ac6:	5a9a      	ldrh	r2, [r3, r2]
    1ac8:	697b      	ldr	r3, [r7, #20]
    1aca:	214c      	movs	r1, #76	; 0x4c
    1acc:	5a5b      	ldrh	r3, [r3, r1]
    1ace:	429a      	cmp	r2, r3
    1ad0:	d002      	beq.n	1ad8 <usart_async_write+0x58>
		return ERR_NO_RESOURCE;
    1ad2:	231c      	movs	r3, #28
    1ad4:	425b      	negs	r3, r3
    1ad6:	e015      	b.n	1b04 <usart_async_write+0x84>
	}
	descr->tx_buffer        = (uint8_t *)buf;
    1ad8:	697b      	ldr	r3, [r7, #20]
    1ada:	68ba      	ldr	r2, [r7, #8]
    1adc:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
    1ade:	697b      	ldr	r3, [r7, #20]
    1ae0:	1dba      	adds	r2, r7, #6
    1ae2:	214c      	movs	r1, #76	; 0x4c
    1ae4:	8812      	ldrh	r2, [r2, #0]
    1ae6:	525a      	strh	r2, [r3, r1]
	descr->tx_por           = 0;
    1ae8:	697b      	ldr	r3, [r7, #20]
    1aea:	2244      	movs	r2, #68	; 0x44
    1aec:	2100      	movs	r1, #0
    1aee:	5299      	strh	r1, [r3, r2]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1af0:	697b      	ldr	r3, [r7, #20]
    1af2:	2201      	movs	r2, #1
    1af4:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1af6:	697b      	ldr	r3, [r7, #20]
    1af8:	3308      	adds	r3, #8
    1afa:	0018      	movs	r0, r3
    1afc:	4b05      	ldr	r3, [pc, #20]	; (1b14 <usart_async_write+0x94>)
    1afe:	4798      	blx	r3

	return (int32_t)length;
    1b00:	1dbb      	adds	r3, r7, #6
    1b02:	881b      	ldrh	r3, [r3, #0]
}
    1b04:	0018      	movs	r0, r3
    1b06:	46bd      	mov	sp, r7
    1b08:	b006      	add	sp, #24
    1b0a:	bd80      	pop	{r7, pc}
    1b0c:	00004bec 	.word	0x00004bec
    1b10:	00001cf7 	.word	0x00001cf7
    1b14:	000031c1 	.word	0x000031c1

00001b18 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b088      	sub	sp, #32
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	60f8      	str	r0, [r7, #12]
    1b20:	60b9      	str	r1, [r7, #8]
    1b22:	1dbb      	adds	r3, r7, #6
    1b24:	801a      	strh	r2, [r3, #0]
	uint16_t                       was_read = 0;
    1b26:	231e      	movs	r3, #30
    1b28:	18fb      	adds	r3, r7, r3
    1b2a:	2200      	movs	r2, #0
    1b2c:	801a      	strh	r2, [r3, #0]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    1b2e:	68fb      	ldr	r3, [r7, #12]
    1b30:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
    1b32:	69bb      	ldr	r3, [r7, #24]
    1b34:	2b00      	cmp	r3, #0
    1b36:	d008      	beq.n	1b4a <usart_async_read+0x32>
    1b38:	68bb      	ldr	r3, [r7, #8]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d005      	beq.n	1b4a <usart_async_read+0x32>
    1b3e:	1dbb      	adds	r3, r7, #6
    1b40:	881b      	ldrh	r3, [r3, #0]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d001      	beq.n	1b4a <usart_async_read+0x32>
    1b46:	2301      	movs	r3, #1
    1b48:	e000      	b.n	1b4c <usart_async_read+0x34>
    1b4a:	2300      	movs	r3, #0
    1b4c:	1c1a      	adds	r2, r3, #0
    1b4e:	2301      	movs	r3, #1
    1b50:	4013      	ands	r3, r2
    1b52:	b2d8      	uxtb	r0, r3
    1b54:	23ac      	movs	r3, #172	; 0xac
    1b56:	005a      	lsls	r2, r3, #1
    1b58:	4b1c      	ldr	r3, [pc, #112]	; (1bcc <usart_async_read+0xb4>)
    1b5a:	0019      	movs	r1, r3
    1b5c:	4b1c      	ldr	r3, [pc, #112]	; (1bd0 <usart_async_read+0xb8>)
    1b5e:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    1b60:	2310      	movs	r3, #16
    1b62:	18fb      	adds	r3, r7, r3
    1b64:	0018      	movs	r0, r3
    1b66:	4b1b      	ldr	r3, [pc, #108]	; (1bd4 <usart_async_read+0xbc>)
    1b68:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1b6a:	69bb      	ldr	r3, [r7, #24]
    1b6c:	3334      	adds	r3, #52	; 0x34
    1b6e:	0018      	movs	r0, r3
    1b70:	4b19      	ldr	r3, [pc, #100]	; (1bd8 <usart_async_read+0xc0>)
    1b72:	4798      	blx	r3
    1b74:	0003      	movs	r3, r0
    1b76:	617b      	str	r3, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    1b78:	2310      	movs	r3, #16
    1b7a:	18fb      	adds	r3, r7, r3
    1b7c:	0018      	movs	r0, r3
    1b7e:	4b17      	ldr	r3, [pc, #92]	; (1bdc <usart_async_read+0xc4>)
    1b80:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    1b82:	e00f      	b.n	1ba4 <usart_async_read+0x8c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1b84:	69bb      	ldr	r3, [r7, #24]
    1b86:	3334      	adds	r3, #52	; 0x34
    1b88:	0018      	movs	r0, r3
    1b8a:	231e      	movs	r3, #30
    1b8c:	18fb      	adds	r3, r7, r3
    1b8e:	881b      	ldrh	r3, [r3, #0]
    1b90:	221e      	movs	r2, #30
    1b92:	18ba      	adds	r2, r7, r2
    1b94:	1c59      	adds	r1, r3, #1
    1b96:	8011      	strh	r1, [r2, #0]
    1b98:	001a      	movs	r2, r3
    1b9a:	68bb      	ldr	r3, [r7, #8]
    1b9c:	189b      	adds	r3, r3, r2
    1b9e:	0019      	movs	r1, r3
    1ba0:	4b0f      	ldr	r3, [pc, #60]	; (1be0 <usart_async_read+0xc8>)
    1ba2:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1ba4:	231e      	movs	r3, #30
    1ba6:	18fb      	adds	r3, r7, r3
    1ba8:	881a      	ldrh	r2, [r3, #0]
    1baa:	697b      	ldr	r3, [r7, #20]
    1bac:	429a      	cmp	r2, r3
    1bae:	d206      	bcs.n	1bbe <usart_async_read+0xa6>
    1bb0:	231e      	movs	r3, #30
    1bb2:	18fa      	adds	r2, r7, r3
    1bb4:	1dbb      	adds	r3, r7, #6
    1bb6:	8812      	ldrh	r2, [r2, #0]
    1bb8:	881b      	ldrh	r3, [r3, #0]
    1bba:	429a      	cmp	r2, r3
    1bbc:	d3e2      	bcc.n	1b84 <usart_async_read+0x6c>
	}

	return (int32_t)was_read;
    1bbe:	231e      	movs	r3, #30
    1bc0:	18fb      	adds	r3, r7, r3
    1bc2:	881b      	ldrh	r3, [r3, #0]
}
    1bc4:	0018      	movs	r0, r3
    1bc6:	46bd      	mov	sp, r7
    1bc8:	b008      	add	sp, #32
    1bca:	bd80      	pop	{r7, pc}
    1bcc:	00004bec 	.word	0x00004bec
    1bd0:	00001cf7 	.word	0x00001cf7
    1bd4:	0000145d 	.word	0x0000145d
    1bd8:	00001f5d 	.word	0x00001f5d
    1bdc:	0000147f 	.word	0x0000147f
    1be0:	00001e75 	.word	0x00001e75

00001be4 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    1be4:	b5b0      	push	{r4, r5, r7, lr}
    1be6:	b084      	sub	sp, #16
    1be8:	af00      	add	r7, sp, #0
    1bea:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	3b08      	subs	r3, #8
    1bf0:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
    1bf2:	68fb      	ldr	r3, [r7, #12]
    1bf4:	2244      	movs	r2, #68	; 0x44
    1bf6:	5a9a      	ldrh	r2, [r3, r2]
    1bf8:	68fb      	ldr	r3, [r7, #12]
    1bfa:	214c      	movs	r1, #76	; 0x4c
    1bfc:	5a5b      	ldrh	r3, [r3, r1]
    1bfe:	429a      	cmp	r2, r3
    1c00:	d018      	beq.n	1c34 <usart_process_byte_sent+0x50>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1c02:	68fb      	ldr	r3, [r7, #12]
    1c04:	3308      	adds	r3, #8
    1c06:	001c      	movs	r4, r3
    1c08:	68fb      	ldr	r3, [r7, #12]
    1c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1c0c:	68fb      	ldr	r3, [r7, #12]
    1c0e:	2144      	movs	r1, #68	; 0x44
    1c10:	5a5b      	ldrh	r3, [r3, r1]
    1c12:	1c59      	adds	r1, r3, #1
    1c14:	b28d      	uxth	r5, r1
    1c16:	68f9      	ldr	r1, [r7, #12]
    1c18:	2044      	movs	r0, #68	; 0x44
    1c1a:	520d      	strh	r5, [r1, r0]
    1c1c:	18d3      	adds	r3, r2, r3
    1c1e:	781b      	ldrb	r3, [r3, #0]
    1c20:	0019      	movs	r1, r3
    1c22:	0020      	movs	r0, r4
    1c24:	4b08      	ldr	r3, [pc, #32]	; (1c48 <usart_process_byte_sent+0x64>)
    1c26:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1c28:	68fb      	ldr	r3, [r7, #12]
    1c2a:	3308      	adds	r3, #8
    1c2c:	0018      	movs	r0, r3
    1c2e:	4b07      	ldr	r3, [pc, #28]	; (1c4c <usart_process_byte_sent+0x68>)
    1c30:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
    1c32:	e004      	b.n	1c3e <usart_process_byte_sent+0x5a>
		_usart_async_enable_tx_done_irq(&descr->device);
    1c34:	68fb      	ldr	r3, [r7, #12]
    1c36:	3308      	adds	r3, #8
    1c38:	0018      	movs	r0, r3
    1c3a:	4b05      	ldr	r3, [pc, #20]	; (1c50 <usart_process_byte_sent+0x6c>)
    1c3c:	4798      	blx	r3
}
    1c3e:	46c0      	nop			; (mov r8, r8)
    1c40:	46bd      	mov	sp, r7
    1c42:	b004      	add	sp, #16
    1c44:	bdb0      	pop	{r4, r5, r7, pc}
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	00003195 	.word	0x00003195
    1c4c:	000031c1 	.word	0x000031c1
    1c50:	000031e1 	.word	0x000031e1

00001c54 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1c54:	b580      	push	{r7, lr}
    1c56:	b084      	sub	sp, #16
    1c58:	af00      	add	r7, sp, #0
    1c5a:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	3b08      	subs	r3, #8
    1c60:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    1c62:	68fb      	ldr	r3, [r7, #12]
    1c64:	2200      	movs	r2, #0
    1c66:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1c68:	68fb      	ldr	r3, [r7, #12]
    1c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d004      	beq.n	1c7a <usart_transmission_complete+0x26>
		descr->usart_cb.tx_done(descr);
    1c70:	68fb      	ldr	r3, [r7, #12]
    1c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c74:	68fa      	ldr	r2, [r7, #12]
    1c76:	0010      	movs	r0, r2
    1c78:	4798      	blx	r3
	}
}
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	46bd      	mov	sp, r7
    1c7e:	b004      	add	sp, #16
    1c80:	bd80      	pop	{r7, pc}
	...

00001c84 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    1c84:	b580      	push	{r7, lr}
    1c86:	b084      	sub	sp, #16
    1c88:	af00      	add	r7, sp, #0
    1c8a:	6078      	str	r0, [r7, #4]
    1c8c:	000a      	movs	r2, r1
    1c8e:	1cfb      	adds	r3, r7, #3
    1c90:	701a      	strb	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1c92:	687b      	ldr	r3, [r7, #4]
    1c94:	3b08      	subs	r3, #8
    1c96:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    1c98:	68fb      	ldr	r3, [r7, #12]
    1c9a:	3334      	adds	r3, #52	; 0x34
    1c9c:	001a      	movs	r2, r3
    1c9e:	1cfb      	adds	r3, r7, #3
    1ca0:	781b      	ldrb	r3, [r3, #0]
    1ca2:	0019      	movs	r1, r3
    1ca4:	0010      	movs	r0, r2
    1ca6:	4b07      	ldr	r3, [pc, #28]	; (1cc4 <usart_fill_rx_buffer+0x40>)
    1ca8:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
    1caa:	68fb      	ldr	r3, [r7, #12]
    1cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d004      	beq.n	1cbc <usart_fill_rx_buffer+0x38>
		descr->usart_cb.rx_done(descr);
    1cb2:	68fb      	ldr	r3, [r7, #12]
    1cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cb6:	68fa      	ldr	r2, [r7, #12]
    1cb8:	0010      	movs	r0, r2
    1cba:	4798      	blx	r3
	}
}
    1cbc:	46c0      	nop			; (mov r8, r8)
    1cbe:	46bd      	mov	sp, r7
    1cc0:	b004      	add	sp, #16
    1cc2:	bd80      	pop	{r7, pc}
    1cc4:	00001ee9 	.word	0x00001ee9

00001cc8 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1cc8:	b580      	push	{r7, lr}
    1cca:	b084      	sub	sp, #16
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	3b08      	subs	r3, #8
    1cd4:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    1cd6:	68fb      	ldr	r3, [r7, #12]
    1cd8:	2200      	movs	r2, #0
    1cda:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
    1cdc:	68fb      	ldr	r3, [r7, #12]
    1cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d004      	beq.n	1cee <usart_error+0x26>
		descr->usart_cb.error(descr);
    1ce4:	68fb      	ldr	r3, [r7, #12]
    1ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ce8:	68fa      	ldr	r2, [r7, #12]
    1cea:	0010      	movs	r0, r2
    1cec:	4798      	blx	r3
	}
}
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	46bd      	mov	sp, r7
    1cf2:	b004      	add	sp, #16
    1cf4:	bd80      	pop	{r7, pc}

00001cf6 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1cf6:	b580      	push	{r7, lr}
    1cf8:	b084      	sub	sp, #16
    1cfa:	af00      	add	r7, sp, #0
    1cfc:	60b9      	str	r1, [r7, #8]
    1cfe:	607a      	str	r2, [r7, #4]
    1d00:	230f      	movs	r3, #15
    1d02:	18fb      	adds	r3, r7, r3
    1d04:	1c02      	adds	r2, r0, #0
    1d06:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    1d08:	230f      	movs	r3, #15
    1d0a:	18fb      	adds	r3, r7, r3
    1d0c:	781b      	ldrb	r3, [r3, #0]
    1d0e:	2201      	movs	r2, #1
    1d10:	4053      	eors	r3, r2
    1d12:	b2db      	uxtb	r3, r3
    1d14:	2b00      	cmp	r3, #0
    1d16:	d000      	beq.n	1d1a <assert+0x24>
		__asm("BKPT #0");
    1d18:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	46bd      	mov	sp, r7
    1d1e:	b004      	add	sp, #16
    1d20:	bd80      	pop	{r7, pc}

00001d22 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1d22:	b580      	push	{r7, lr}
    1d24:	b084      	sub	sp, #16
    1d26:	af00      	add	r7, sp, #0
    1d28:	6078      	str	r0, [r7, #4]
    1d2a:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	681b      	ldr	r3, [r3, #0]
    1d30:	60fb      	str	r3, [r7, #12]
    1d32:	e008      	b.n	1d46 <is_list_element+0x24>
		if (it == element) {
    1d34:	68fa      	ldr	r2, [r7, #12]
    1d36:	683b      	ldr	r3, [r7, #0]
    1d38:	429a      	cmp	r2, r3
    1d3a:	d101      	bne.n	1d40 <is_list_element+0x1e>
			return true;
    1d3c:	2301      	movs	r3, #1
    1d3e:	e006      	b.n	1d4e <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    1d40:	68fb      	ldr	r3, [r7, #12]
    1d42:	681b      	ldr	r3, [r3, #0]
    1d44:	60fb      	str	r3, [r7, #12]
    1d46:	68fb      	ldr	r3, [r7, #12]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d1f3      	bne.n	1d34 <is_list_element+0x12>
		}
	}

	return false;
    1d4c:	2300      	movs	r3, #0
}
    1d4e:	0018      	movs	r0, r3
    1d50:	46bd      	mov	sp, r7
    1d52:	b004      	add	sp, #16
    1d54:	bd80      	pop	{r7, pc}
	...

00001d58 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b082      	sub	sp, #8
    1d5c:	af00      	add	r7, sp, #0
    1d5e:	6078      	str	r0, [r7, #4]
    1d60:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    1d62:	683a      	ldr	r2, [r7, #0]
    1d64:	687b      	ldr	r3, [r7, #4]
    1d66:	0011      	movs	r1, r2
    1d68:	0018      	movs	r0, r3
    1d6a:	4b0e      	ldr	r3, [pc, #56]	; (1da4 <list_insert_as_head+0x4c>)
    1d6c:	4798      	blx	r3
    1d6e:	0003      	movs	r3, r0
    1d70:	1e5a      	subs	r2, r3, #1
    1d72:	4193      	sbcs	r3, r2
    1d74:	b2db      	uxtb	r3, r3
    1d76:	2201      	movs	r2, #1
    1d78:	4053      	eors	r3, r2
    1d7a:	b2db      	uxtb	r3, r3
    1d7c:	1c1a      	adds	r2, r3, #0
    1d7e:	2301      	movs	r3, #1
    1d80:	4013      	ands	r3, r2
    1d82:	b2db      	uxtb	r3, r3
    1d84:	4908      	ldr	r1, [pc, #32]	; (1da8 <list_insert_as_head+0x50>)
    1d86:	2239      	movs	r2, #57	; 0x39
    1d88:	0018      	movs	r0, r3
    1d8a:	4b08      	ldr	r3, [pc, #32]	; (1dac <list_insert_as_head+0x54>)
    1d8c:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1d8e:	687b      	ldr	r3, [r7, #4]
    1d90:	681a      	ldr	r2, [r3, #0]
    1d92:	683b      	ldr	r3, [r7, #0]
    1d94:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    1d96:	687b      	ldr	r3, [r7, #4]
    1d98:	683a      	ldr	r2, [r7, #0]
    1d9a:	601a      	str	r2, [r3, #0]
}
    1d9c:	46c0      	nop			; (mov r8, r8)
    1d9e:	46bd      	mov	sp, r7
    1da0:	b002      	add	sp, #8
    1da2:	bd80      	pop	{r7, pc}
    1da4:	00001d23 	.word	0x00001d23
    1da8:	00004c0c 	.word	0x00004c0c
    1dac:	00001cf7 	.word	0x00001cf7

00001db0 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    1db0:	b580      	push	{r7, lr}
    1db2:	b082      	sub	sp, #8
    1db4:	af00      	add	r7, sp, #0
    1db6:	6078      	str	r0, [r7, #4]
    1db8:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	681a      	ldr	r2, [r3, #0]
    1dbe:	683b      	ldr	r3, [r7, #0]
    1dc0:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	683a      	ldr	r2, [r7, #0]
    1dc6:	601a      	str	r2, [r3, #0]
}
    1dc8:	46c0      	nop			; (mov r8, r8)
    1dca:	46bd      	mov	sp, r7
    1dcc:	b002      	add	sp, #8
    1dce:	bd80      	pop	{r7, pc}

00001dd0 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    1dd0:	b580      	push	{r7, lr}
    1dd2:	b084      	sub	sp, #16
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
	if (list->head) {
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	681b      	ldr	r3, [r3, #0]
    1ddc:	2b00      	cmp	r3, #0
    1dde:	d009      	beq.n	1df4 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	681b      	ldr	r3, [r3, #0]
    1de4:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    1de6:	687b      	ldr	r3, [r7, #4]
    1de8:	681b      	ldr	r3, [r3, #0]
    1dea:	681a      	ldr	r2, [r3, #0]
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    1df0:	68fb      	ldr	r3, [r7, #12]
    1df2:	e000      	b.n	1df6 <list_remove_head+0x26>
	}

	return NULL;
    1df4:	2300      	movs	r3, #0
}
    1df6:	0018      	movs	r0, r3
    1df8:	46bd      	mov	sp, r7
    1dfa:	b004      	add	sp, #16
    1dfc:	bd80      	pop	{r7, pc}
	...

00001e00 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	b084      	sub	sp, #16
    1e04:	af00      	add	r7, sp, #0
    1e06:	60f8      	str	r0, [r7, #12]
    1e08:	60b9      	str	r1, [r7, #8]
    1e0a:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    1e0c:	68fb      	ldr	r3, [r7, #12]
    1e0e:	2b00      	cmp	r3, #0
    1e10:	d007      	beq.n	1e22 <ringbuffer_init+0x22>
    1e12:	68bb      	ldr	r3, [r7, #8]
    1e14:	2b00      	cmp	r3, #0
    1e16:	d004      	beq.n	1e22 <ringbuffer_init+0x22>
    1e18:	687b      	ldr	r3, [r7, #4]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d001      	beq.n	1e22 <ringbuffer_init+0x22>
    1e1e:	2301      	movs	r3, #1
    1e20:	e000      	b.n	1e24 <ringbuffer_init+0x24>
    1e22:	2300      	movs	r3, #0
    1e24:	1c1a      	adds	r2, r3, #0
    1e26:	2301      	movs	r3, #1
    1e28:	4013      	ands	r3, r2
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	490f      	ldr	r1, [pc, #60]	; (1e6c <ringbuffer_init+0x6c>)
    1e2e:	2228      	movs	r2, #40	; 0x28
    1e30:	0018      	movs	r0, r3
    1e32:	4b0f      	ldr	r3, [pc, #60]	; (1e70 <ringbuffer_init+0x70>)
    1e34:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	3b01      	subs	r3, #1
    1e3a:	687a      	ldr	r2, [r7, #4]
    1e3c:	4013      	ands	r3, r2
    1e3e:	d002      	beq.n	1e46 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    1e40:	230d      	movs	r3, #13
    1e42:	425b      	negs	r3, r3
    1e44:	e00e      	b.n	1e64 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	1e5a      	subs	r2, r3, #1
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    1e4e:	68fb      	ldr	r3, [r7, #12]
    1e50:	2200      	movs	r2, #0
    1e52:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    1e54:	68fb      	ldr	r3, [r7, #12]
    1e56:	689a      	ldr	r2, [r3, #8]
    1e58:	68fb      	ldr	r3, [r7, #12]
    1e5a:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    1e5c:	68fb      	ldr	r3, [r7, #12]
    1e5e:	68ba      	ldr	r2, [r7, #8]
    1e60:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1e62:	2300      	movs	r3, #0
}
    1e64:	0018      	movs	r0, r3
    1e66:	46bd      	mov	sp, r7
    1e68:	b004      	add	sp, #16
    1e6a:	bd80      	pop	{r7, pc}
    1e6c:	00004c2c 	.word	0x00004c2c
    1e70:	00001cf7 	.word	0x00001cf7

00001e74 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1e74:	b580      	push	{r7, lr}
    1e76:	b082      	sub	sp, #8
    1e78:	af00      	add	r7, sp, #0
    1e7a:	6078      	str	r0, [r7, #4]
    1e7c:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    1e7e:	687b      	ldr	r3, [r7, #4]
    1e80:	2b00      	cmp	r3, #0
    1e82:	d004      	beq.n	1e8e <ringbuffer_get+0x1a>
    1e84:	683b      	ldr	r3, [r7, #0]
    1e86:	2b00      	cmp	r3, #0
    1e88:	d001      	beq.n	1e8e <ringbuffer_get+0x1a>
    1e8a:	2301      	movs	r3, #1
    1e8c:	e000      	b.n	1e90 <ringbuffer_get+0x1c>
    1e8e:	2300      	movs	r3, #0
    1e90:	1c1a      	adds	r2, r3, #0
    1e92:	2301      	movs	r3, #1
    1e94:	4013      	ands	r3, r2
    1e96:	b2db      	uxtb	r3, r3
    1e98:	4911      	ldr	r1, [pc, #68]	; (1ee0 <ringbuffer_get+0x6c>)
    1e9a:	2240      	movs	r2, #64	; 0x40
    1e9c:	0018      	movs	r0, r3
    1e9e:	4b11      	ldr	r3, [pc, #68]	; (1ee4 <ringbuffer_get+0x70>)
    1ea0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	68da      	ldr	r2, [r3, #12]
    1ea6:	687b      	ldr	r3, [r7, #4]
    1ea8:	689b      	ldr	r3, [r3, #8]
    1eaa:	429a      	cmp	r2, r3
    1eac:	d011      	beq.n	1ed2 <ringbuffer_get+0x5e>
		*data = rb->buf[rb->read_index & rb->size];
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	681a      	ldr	r2, [r3, #0]
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	6899      	ldr	r1, [r3, #8]
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	685b      	ldr	r3, [r3, #4]
    1eba:	400b      	ands	r3, r1
    1ebc:	18d3      	adds	r3, r2, r3
    1ebe:	781a      	ldrb	r2, [r3, #0]
    1ec0:	683b      	ldr	r3, [r7, #0]
    1ec2:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	689b      	ldr	r3, [r3, #8]
    1ec8:	1c5a      	adds	r2, r3, #1
    1eca:	687b      	ldr	r3, [r7, #4]
    1ecc:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    1ece:	2300      	movs	r3, #0
    1ed0:	e001      	b.n	1ed6 <ringbuffer_get+0x62>
	}

	return ERR_NOT_FOUND;
    1ed2:	230a      	movs	r3, #10
    1ed4:	425b      	negs	r3, r3
}
    1ed6:	0018      	movs	r0, r3
    1ed8:	46bd      	mov	sp, r7
    1eda:	b002      	add	sp, #8
    1edc:	bd80      	pop	{r7, pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	00004c2c 	.word	0x00004c2c
    1ee4:	00001cf7 	.word	0x00001cf7

00001ee8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1ee8:	b580      	push	{r7, lr}
    1eea:	b082      	sub	sp, #8
    1eec:	af00      	add	r7, sp, #0
    1eee:	6078      	str	r0, [r7, #4]
    1ef0:	000a      	movs	r2, r1
    1ef2:	1cfb      	adds	r3, r7, #3
    1ef4:	701a      	strb	r2, [r3, #0]
	ASSERT(rb);
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	1e5a      	subs	r2, r3, #1
    1efa:	4193      	sbcs	r3, r2
    1efc:	b2db      	uxtb	r3, r3
    1efe:	4915      	ldr	r1, [pc, #84]	; (1f54 <ringbuffer_put+0x6c>)
    1f00:	2251      	movs	r2, #81	; 0x51
    1f02:	0018      	movs	r0, r3
    1f04:	4b14      	ldr	r3, [pc, #80]	; (1f58 <ringbuffer_put+0x70>)
    1f06:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1f08:	687b      	ldr	r3, [r7, #4]
    1f0a:	681a      	ldr	r2, [r3, #0]
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	68d9      	ldr	r1, [r3, #12]
    1f10:	687b      	ldr	r3, [r7, #4]
    1f12:	685b      	ldr	r3, [r3, #4]
    1f14:	400b      	ands	r3, r1
    1f16:	18d3      	adds	r3, r2, r3
    1f18:	1cfa      	adds	r2, r7, #3
    1f1a:	7812      	ldrb	r2, [r2, #0]
    1f1c:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1f1e:	687b      	ldr	r3, [r7, #4]
    1f20:	68da      	ldr	r2, [r3, #12]
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	689b      	ldr	r3, [r3, #8]
    1f26:	1ad2      	subs	r2, r2, r3
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	685b      	ldr	r3, [r3, #4]
    1f2c:	429a      	cmp	r2, r3
    1f2e:	d906      	bls.n	1f3e <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    1f30:	687b      	ldr	r3, [r7, #4]
    1f32:	68da      	ldr	r2, [r3, #12]
    1f34:	687b      	ldr	r3, [r7, #4]
    1f36:	685b      	ldr	r3, [r3, #4]
    1f38:	1ad2      	subs	r2, r2, r3
    1f3a:	687b      	ldr	r3, [r7, #4]
    1f3c:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	68db      	ldr	r3, [r3, #12]
    1f42:	1c5a      	adds	r2, r3, #1
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1f48:	2300      	movs	r3, #0
}
    1f4a:	0018      	movs	r0, r3
    1f4c:	46bd      	mov	sp, r7
    1f4e:	b002      	add	sp, #8
    1f50:	bd80      	pop	{r7, pc}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	00004c2c 	.word	0x00004c2c
    1f58:	00001cf7 	.word	0x00001cf7

00001f5c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b082      	sub	sp, #8
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    1f64:	687b      	ldr	r3, [r7, #4]
    1f66:	1e5a      	subs	r2, r3, #1
    1f68:	4193      	sbcs	r3, r2
    1f6a:	b2db      	uxtb	r3, r3
    1f6c:	4906      	ldr	r1, [pc, #24]	; (1f88 <ringbuffer_num+0x2c>)
    1f6e:	2267      	movs	r2, #103	; 0x67
    1f70:	0018      	movs	r0, r3
    1f72:	4b06      	ldr	r3, [pc, #24]	; (1f8c <ringbuffer_num+0x30>)
    1f74:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1f76:	687b      	ldr	r3, [r7, #4]
    1f78:	68da      	ldr	r2, [r3, #12]
    1f7a:	687b      	ldr	r3, [r7, #4]
    1f7c:	689b      	ldr	r3, [r3, #8]
    1f7e:	1ad3      	subs	r3, r2, r3
}
    1f80:	0018      	movs	r0, r3
    1f82:	46bd      	mov	sp, r7
    1f84:	b002      	add	sp, #8
    1f86:	bd80      	pop	{r7, pc}
    1f88:	00004c2c 	.word	0x00004c2c
    1f8c:	00001cf7 	.word	0x00001cf7

00001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1f90:	b580      	push	{r7, lr}
    1f92:	b082      	sub	sp, #8
    1f94:	af00      	add	r7, sp, #0
    1f96:	0002      	movs	r2, r0
    1f98:	1dfb      	adds	r3, r7, #7
    1f9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1f9c:	1dfb      	adds	r3, r7, #7
    1f9e:	781b      	ldrb	r3, [r3, #0]
    1fa0:	2b7f      	cmp	r3, #127	; 0x7f
    1fa2:	d809      	bhi.n	1fb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1fa4:	4b06      	ldr	r3, [pc, #24]	; (1fc0 <__NVIC_EnableIRQ+0x30>)
    1fa6:	1dfa      	adds	r2, r7, #7
    1fa8:	7812      	ldrb	r2, [r2, #0]
    1faa:	0011      	movs	r1, r2
    1fac:	221f      	movs	r2, #31
    1fae:	400a      	ands	r2, r1
    1fb0:	2101      	movs	r1, #1
    1fb2:	4091      	lsls	r1, r2
    1fb4:	000a      	movs	r2, r1
    1fb6:	601a      	str	r2, [r3, #0]
  }
}
    1fb8:	46c0      	nop			; (mov r8, r8)
    1fba:	46bd      	mov	sp, r7
    1fbc:	b002      	add	sp, #8
    1fbe:	bd80      	pop	{r7, pc}
    1fc0:	e000e100 	.word	0xe000e100

00001fc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	b082      	sub	sp, #8
    1fc8:	af00      	add	r7, sp, #0
    1fca:	0002      	movs	r2, r0
    1fcc:	1dfb      	adds	r3, r7, #7
    1fce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1fd0:	1dfb      	adds	r3, r7, #7
    1fd2:	781b      	ldrb	r3, [r3, #0]
    1fd4:	2b7f      	cmp	r3, #127	; 0x7f
    1fd6:	d80e      	bhi.n	1ff6 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1fd8:	4909      	ldr	r1, [pc, #36]	; (2000 <STACK_SIZE>)
    1fda:	1dfb      	adds	r3, r7, #7
    1fdc:	781b      	ldrb	r3, [r3, #0]
    1fde:	001a      	movs	r2, r3
    1fe0:	231f      	movs	r3, #31
    1fe2:	4013      	ands	r3, r2
    1fe4:	2201      	movs	r2, #1
    1fe6:	409a      	lsls	r2, r3
    1fe8:	0013      	movs	r3, r2
    1fea:	2280      	movs	r2, #128	; 0x80
    1fec:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1fee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ff2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	46bd      	mov	sp, r7
    1ffa:	b002      	add	sp, #8
    1ffc:	bd80      	pop	{r7, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	e000e100 	.word	0xe000e100

00002004 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2004:	b580      	push	{r7, lr}
    2006:	b082      	sub	sp, #8
    2008:	af00      	add	r7, sp, #0
    200a:	0002      	movs	r2, r0
    200c:	1dfb      	adds	r3, r7, #7
    200e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2010:	1dfb      	adds	r3, r7, #7
    2012:	781b      	ldrb	r3, [r3, #0]
    2014:	2b7f      	cmp	r3, #127	; 0x7f
    2016:	d80a      	bhi.n	202e <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2018:	4907      	ldr	r1, [pc, #28]	; (2038 <__NVIC_ClearPendingIRQ+0x34>)
    201a:	1dfb      	adds	r3, r7, #7
    201c:	781b      	ldrb	r3, [r3, #0]
    201e:	001a      	movs	r2, r3
    2020:	231f      	movs	r3, #31
    2022:	4013      	ands	r3, r2
    2024:	2201      	movs	r2, #1
    2026:	409a      	lsls	r2, r3
    2028:	23c0      	movs	r3, #192	; 0xc0
    202a:	005b      	lsls	r3, r3, #1
    202c:	50ca      	str	r2, [r1, r3]
  }
}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	46bd      	mov	sp, r7
    2032:	b002      	add	sp, #8
    2034:	bd80      	pop	{r7, pc}
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	e000e100 	.word	0xe000e100

0000203c <hri_adc_wait_for_sync>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
    203c:	b580      	push	{r7, lr}
    203e:	b082      	sub	sp, #8
    2040:	af00      	add	r7, sp, #0
    2042:	6078      	str	r0, [r7, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
    2044:	46c0      	nop			; (mov r8, r8)
    2046:	687b      	ldr	r3, [r7, #4]
    2048:	7e5b      	ldrb	r3, [r3, #25]
    204a:	061b      	lsls	r3, r3, #24
    204c:	0fdb      	lsrs	r3, r3, #31
    204e:	b2db      	uxtb	r3, r3
    2050:	2b00      	cmp	r3, #0
    2052:	d1f8      	bne.n	2046 <hri_adc_wait_for_sync+0xa>
		;
}
    2054:	46c0      	nop			; (mov r8, r8)
    2056:	46bd      	mov	sp, r7
    2058:	b002      	add	sp, #8
    205a:	bd80      	pop	{r7, pc}

0000205c <hri_adc_clear_interrupt_RESRDY_bit>:
{
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
}

static inline void hri_adc_clear_interrupt_RESRDY_bit(const void *const hw)
{
    205c:	b580      	push	{r7, lr}
    205e:	b082      	sub	sp, #8
    2060:	af00      	add	r7, sp, #0
    2062:	6078      	str	r0, [r7, #4]
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	2201      	movs	r2, #1
    2068:	761a      	strb	r2, [r3, #24]
}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	46bd      	mov	sp, r7
    206e:	b002      	add	sp, #8
    2070:	bd80      	pop	{r7, pc}

00002072 <hri_adc_clear_interrupt_OVERRUN_bit>:
{
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_OVERRUN) >> ADC_INTFLAG_OVERRUN_Pos;
}

static inline void hri_adc_clear_interrupt_OVERRUN_bit(const void *const hw)
{
    2072:	b580      	push	{r7, lr}
    2074:	b082      	sub	sp, #8
    2076:	af00      	add	r7, sp, #0
    2078:	6078      	str	r0, [r7, #4]
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    207a:	687b      	ldr	r3, [r7, #4]
    207c:	2202      	movs	r2, #2
    207e:	761a      	strb	r2, [r3, #24]
}
    2080:	46c0      	nop			; (mov r8, r8)
    2082:	46bd      	mov	sp, r7
    2084:	b002      	add	sp, #8
    2086:	bd80      	pop	{r7, pc}

00002088 <hri_adc_clear_interrupt_WINMON_bit>:
{
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_WINMON) >> ADC_INTFLAG_WINMON_Pos;
}

static inline void hri_adc_clear_interrupt_WINMON_bit(const void *const hw)
{
    2088:	b580      	push	{r7, lr}
    208a:	b082      	sub	sp, #8
    208c:	af00      	add	r7, sp, #0
    208e:	6078      	str	r0, [r7, #4]
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	2204      	movs	r2, #4
    2094:	761a      	strb	r2, [r3, #24]
}
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	46bd      	mov	sp, r7
    209a:	b002      	add	sp, #8
    209c:	bd80      	pop	{r7, pc}

0000209e <hri_adc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_adc_intflag_reg_t hri_adc_read_INTFLAG_reg(const void *const hw)
{
    209e:	b580      	push	{r7, lr}
    20a0:	b082      	sub	sp, #8
    20a2:	af00      	add	r7, sp, #0
    20a4:	6078      	str	r0, [r7, #4]
	return ((Adc *)hw)->INTFLAG.reg;
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	7e1b      	ldrb	r3, [r3, #24]
    20aa:	b2db      	uxtb	r3, r3
}
    20ac:	0018      	movs	r0, r3
    20ae:	46bd      	mov	sp, r7
    20b0:	b002      	add	sp, #8
    20b2:	bd80      	pop	{r7, pc}

000020b4 <hri_adc_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_adc_intenset_reg_t hri_adc_read_INTEN_reg(const void *const hw)
{
    20b4:	b580      	push	{r7, lr}
    20b6:	b082      	sub	sp, #8
    20b8:	af00      	add	r7, sp, #0
    20ba:	6078      	str	r0, [r7, #4]
	return ((Adc *)hw)->INTENSET.reg;
    20bc:	687b      	ldr	r3, [r7, #4]
    20be:	7ddb      	ldrb	r3, [r3, #23]
    20c0:	b2db      	uxtb	r3, r3
}
    20c2:	0018      	movs	r0, r3
    20c4:	46bd      	mov	sp, r7
    20c6:	b002      	add	sp, #8
    20c8:	bd80      	pop	{r7, pc}
	...

000020cc <hri_adc_read_RESULT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
    20cc:	b580      	push	{r7, lr}
    20ce:	b082      	sub	sp, #8
    20d0:	af00      	add	r7, sp, #0
    20d2:	6078      	str	r0, [r7, #4]
	hri_adc_wait_for_sync(hw);
    20d4:	687b      	ldr	r3, [r7, #4]
    20d6:	0018      	movs	r0, r3
    20d8:	4b04      	ldr	r3, [pc, #16]	; (20ec <hri_adc_read_RESULT_reg+0x20>)
    20da:	4798      	blx	r3
	return ((Adc *)hw)->RESULT.reg;
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	8b5b      	ldrh	r3, [r3, #26]
    20e0:	b29b      	uxth	r3, r3
}
    20e2:	0018      	movs	r0, r3
    20e4:	46bd      	mov	sp, r7
    20e6:	b002      	add	sp, #8
    20e8:	bd80      	pop	{r7, pc}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	0000203d 	.word	0x0000203d

000020f0 <hri_adc_get_CTRLA_reg>:
	((Adc *)hw)->CTRLA.reg |= mask;
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
    20f0:	b580      	push	{r7, lr}
    20f2:	b084      	sub	sp, #16
    20f4:	af00      	add	r7, sp, #0
    20f6:	6078      	str	r0, [r7, #4]
    20f8:	000a      	movs	r2, r1
    20fa:	1cfb      	adds	r3, r7, #3
    20fc:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
    20fe:	230f      	movs	r3, #15
    2100:	18fb      	adds	r3, r7, r3
    2102:	687a      	ldr	r2, [r7, #4]
    2104:	7812      	ldrb	r2, [r2, #0]
    2106:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    2108:	230f      	movs	r3, #15
    210a:	18fb      	adds	r3, r7, r3
    210c:	220f      	movs	r2, #15
    210e:	18ba      	adds	r2, r7, r2
    2110:	1cf9      	adds	r1, r7, #3
    2112:	7812      	ldrb	r2, [r2, #0]
    2114:	7809      	ldrb	r1, [r1, #0]
    2116:	400a      	ands	r2, r1
    2118:	701a      	strb	r2, [r3, #0]
	return tmp;
    211a:	230f      	movs	r3, #15
    211c:	18fb      	adds	r3, r7, r3
    211e:	781b      	ldrb	r3, [r3, #0]
}
    2120:	0018      	movs	r0, r3
    2122:	46bd      	mov	sp, r7
    2124:	b004      	add	sp, #16
    2126:	bd80      	pop	{r7, pc}

00002128 <hri_adc_write_CTRLA_reg>:

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
    2128:	b580      	push	{r7, lr}
    212a:	b082      	sub	sp, #8
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
    2130:	000a      	movs	r2, r1
    2132:	1cfb      	adds	r3, r7, #3
    2134:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    2136:	687b      	ldr	r3, [r7, #4]
    2138:	1cfa      	adds	r2, r7, #3
    213a:	7812      	ldrb	r2, [r2, #0]
    213c:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_LEAVE();
}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	46bd      	mov	sp, r7
    2142:	b002      	add	sp, #8
    2144:	bd80      	pop	{r7, pc}

00002146 <hri_adc_write_REFCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
    2146:	b580      	push	{r7, lr}
    2148:	b082      	sub	sp, #8
    214a:	af00      	add	r7, sp, #0
    214c:	6078      	str	r0, [r7, #4]
    214e:	000a      	movs	r2, r1
    2150:	1cfb      	adds	r3, r7, #3
    2152:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	1cfa      	adds	r2, r7, #3
    2158:	7812      	ldrb	r2, [r2, #0]
    215a:	705a      	strb	r2, [r3, #1]
	ADC_CRITICAL_SECTION_LEAVE();
}
    215c:	46c0      	nop			; (mov r8, r8)
    215e:	46bd      	mov	sp, r7
    2160:	b002      	add	sp, #8
    2162:	bd80      	pop	{r7, pc}

00002164 <hri_adc_write_AVGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
    2164:	b580      	push	{r7, lr}
    2166:	b082      	sub	sp, #8
    2168:	af00      	add	r7, sp, #0
    216a:	6078      	str	r0, [r7, #4]
    216c:	000a      	movs	r2, r1
    216e:	1cfb      	adds	r3, r7, #3
    2170:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	1cfa      	adds	r2, r7, #3
    2176:	7812      	ldrb	r2, [r2, #0]
    2178:	709a      	strb	r2, [r3, #2]
	ADC_CRITICAL_SECTION_LEAVE();
}
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	46bd      	mov	sp, r7
    217e:	b002      	add	sp, #8
    2180:	bd80      	pop	{r7, pc}

00002182 <hri_adc_write_SAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
    2182:	b580      	push	{r7, lr}
    2184:	b082      	sub	sp, #8
    2186:	af00      	add	r7, sp, #0
    2188:	6078      	str	r0, [r7, #4]
    218a:	000a      	movs	r2, r1
    218c:	1cfb      	adds	r3, r7, #3
    218e:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	1cfa      	adds	r2, r7, #3
    2194:	7812      	ldrb	r2, [r2, #0]
    2196:	70da      	strb	r2, [r3, #3]
	ADC_CRITICAL_SECTION_LEAVE();
}
    2198:	46c0      	nop			; (mov r8, r8)
    219a:	46bd      	mov	sp, r7
    219c:	b002      	add	sp, #8
    219e:	bd80      	pop	{r7, pc}

000021a0 <hri_adc_read_CTRLB_RESSEL_bf>:
	hri_adc_wait_for_sync(hw);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline hri_adc_ctrlb_reg_t hri_adc_read_CTRLB_RESSEL_bf(const void *const hw)
{
    21a0:	b580      	push	{r7, lr}
    21a2:	b084      	sub	sp, #16
    21a4:	af00      	add	r7, sp, #0
    21a6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_adc_wait_for_sync(hw);
    21a8:	687b      	ldr	r3, [r7, #4]
    21aa:	0018      	movs	r0, r3
    21ac:	4b0b      	ldr	r3, [pc, #44]	; (21dc <hri_adc_read_CTRLB_RESSEL_bf+0x3c>)
    21ae:	4798      	blx	r3
	tmp = ((Adc *)hw)->CTRLB.reg;
    21b0:	230e      	movs	r3, #14
    21b2:	18fb      	adds	r3, r7, r3
    21b4:	687a      	ldr	r2, [r7, #4]
    21b6:	8892      	ldrh	r2, [r2, #4]
    21b8:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    21ba:	230e      	movs	r3, #14
    21bc:	18fb      	adds	r3, r7, r3
    21be:	881b      	ldrh	r3, [r3, #0]
    21c0:	091b      	lsrs	r3, r3, #4
    21c2:	b29a      	uxth	r2, r3
    21c4:	230e      	movs	r3, #14
    21c6:	18fb      	adds	r3, r7, r3
    21c8:	2103      	movs	r1, #3
    21ca:	400a      	ands	r2, r1
    21cc:	801a      	strh	r2, [r3, #0]
	return tmp;
    21ce:	230e      	movs	r3, #14
    21d0:	18fb      	adds	r3, r7, r3
    21d2:	881b      	ldrh	r3, [r3, #0]
}
    21d4:	0018      	movs	r0, r3
    21d6:	46bd      	mov	sp, r7
    21d8:	b004      	add	sp, #16
    21da:	bd80      	pop	{r7, pc}
    21dc:	0000203d 	.word	0x0000203d

000021e0 <hri_adc_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
    21e0:	b580      	push	{r7, lr}
    21e2:	b082      	sub	sp, #8
    21e4:	af00      	add	r7, sp, #0
    21e6:	6078      	str	r0, [r7, #4]
    21e8:	000a      	movs	r2, r1
    21ea:	1cbb      	adds	r3, r7, #2
    21ec:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    21ee:	687b      	ldr	r3, [r7, #4]
    21f0:	1cba      	adds	r2, r7, #2
    21f2:	8812      	ldrh	r2, [r2, #0]
    21f4:	809a      	strh	r2, [r3, #4]
	hri_adc_wait_for_sync(hw);
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	0018      	movs	r0, r3
    21fa:	4b03      	ldr	r3, [pc, #12]	; (2208 <hri_adc_write_CTRLB_reg+0x28>)
    21fc:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	46bd      	mov	sp, r7
    2202:	b002      	add	sp, #8
    2204:	bd80      	pop	{r7, pc}
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	0000203d 	.word	0x0000203d

0000220c <hri_adc_write_WINCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINCTRL_reg(const void *const hw, hri_adc_winctrl_reg_t data)
{
    220c:	b580      	push	{r7, lr}
    220e:	b082      	sub	sp, #8
    2210:	af00      	add	r7, sp, #0
    2212:	6078      	str	r0, [r7, #4]
    2214:	000a      	movs	r2, r1
    2216:	1cfb      	adds	r3, r7, #3
    2218:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINCTRL.reg = data;
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	1cfa      	adds	r2, r7, #3
    221e:	7812      	ldrb	r2, [r2, #0]
    2220:	721a      	strb	r2, [r3, #8]
	hri_adc_wait_for_sync(hw);
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	0018      	movs	r0, r3
    2226:	4b03      	ldr	r3, [pc, #12]	; (2234 <hri_adc_write_WINCTRL_reg+0x28>)
    2228:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	46bd      	mov	sp, r7
    222e:	b002      	add	sp, #8
    2230:	bd80      	pop	{r7, pc}
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	0000203d 	.word	0x0000203d

00002238 <hri_adc_write_INPUTCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
    2238:	b580      	push	{r7, lr}
    223a:	b082      	sub	sp, #8
    223c:	af00      	add	r7, sp, #0
    223e:	6078      	str	r0, [r7, #4]
    2240:	6039      	str	r1, [r7, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	683a      	ldr	r2, [r7, #0]
    2246:	611a      	str	r2, [r3, #16]
	hri_adc_wait_for_sync(hw);
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	0018      	movs	r0, r3
    224c:	4b02      	ldr	r3, [pc, #8]	; (2258 <hri_adc_write_INPUTCTRL_reg+0x20>)
    224e:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    2250:	46c0      	nop			; (mov r8, r8)
    2252:	46bd      	mov	sp, r7
    2254:	b002      	add	sp, #8
    2256:	bd80      	pop	{r7, pc}
    2258:	0000203d 	.word	0x0000203d

0000225c <hri_adc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
    225c:	b580      	push	{r7, lr}
    225e:	b082      	sub	sp, #8
    2260:	af00      	add	r7, sp, #0
    2262:	6078      	str	r0, [r7, #4]
    2264:	000a      	movs	r2, r1
    2266:	1cfb      	adds	r3, r7, #3
    2268:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	1cfa      	adds	r2, r7, #3
    226e:	7812      	ldrb	r2, [r2, #0]
    2270:	751a      	strb	r2, [r3, #20]
	ADC_CRITICAL_SECTION_LEAVE();
}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	46bd      	mov	sp, r7
    2276:	b002      	add	sp, #8
    2278:	bd80      	pop	{r7, pc}
	...

0000227c <hri_adc_write_WINLT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
    227c:	b580      	push	{r7, lr}
    227e:	b082      	sub	sp, #8
    2280:	af00      	add	r7, sp, #0
    2282:	6078      	str	r0, [r7, #4]
    2284:	000a      	movs	r2, r1
    2286:	1cbb      	adds	r3, r7, #2
    2288:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	1cba      	adds	r2, r7, #2
    228e:	8812      	ldrh	r2, [r2, #0]
    2290:	839a      	strh	r2, [r3, #28]
	hri_adc_wait_for_sync(hw);
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	0018      	movs	r0, r3
    2296:	4b03      	ldr	r3, [pc, #12]	; (22a4 <hri_adc_write_WINLT_reg+0x28>)
    2298:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	46bd      	mov	sp, r7
    229e:	b002      	add	sp, #8
    22a0:	bd80      	pop	{r7, pc}
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	0000203d 	.word	0x0000203d

000022a8 <hri_adc_write_WINUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
    22a8:	b580      	push	{r7, lr}
    22aa:	b082      	sub	sp, #8
    22ac:	af00      	add	r7, sp, #0
    22ae:	6078      	str	r0, [r7, #4]
    22b0:	000a      	movs	r2, r1
    22b2:	1cbb      	adds	r3, r7, #2
    22b4:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	1cba      	adds	r2, r7, #2
    22ba:	8812      	ldrh	r2, [r2, #0]
    22bc:	841a      	strh	r2, [r3, #32]
	hri_adc_wait_for_sync(hw);
    22be:	687b      	ldr	r3, [r7, #4]
    22c0:	0018      	movs	r0, r3
    22c2:	4b03      	ldr	r3, [pc, #12]	; (22d0 <hri_adc_write_WINUT_reg+0x28>)
    22c4:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	46bd      	mov	sp, r7
    22ca:	b002      	add	sp, #8
    22cc:	bd80      	pop	{r7, pc}
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	0000203d 	.word	0x0000203d

000022d4 <hri_adc_write_GAINCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
    22d4:	b580      	push	{r7, lr}
    22d6:	b082      	sub	sp, #8
    22d8:	af00      	add	r7, sp, #0
    22da:	6078      	str	r0, [r7, #4]
    22dc:	000a      	movs	r2, r1
    22de:	1cbb      	adds	r3, r7, #2
    22e0:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	1cba      	adds	r2, r7, #2
    22e6:	8812      	ldrh	r2, [r2, #0]
    22e8:	849a      	strh	r2, [r3, #36]	; 0x24
	ADC_CRITICAL_SECTION_LEAVE();
}
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	46bd      	mov	sp, r7
    22ee:	b002      	add	sp, #8
    22f0:	bd80      	pop	{r7, pc}

000022f2 <hri_adc_write_OFFSETCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
    22f2:	b580      	push	{r7, lr}
    22f4:	b082      	sub	sp, #8
    22f6:	af00      	add	r7, sp, #0
    22f8:	6078      	str	r0, [r7, #4]
    22fa:	000a      	movs	r2, r1
    22fc:	1cbb      	adds	r3, r7, #2
    22fe:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2300:	687b      	ldr	r3, [r7, #4]
    2302:	1cba      	adds	r2, r7, #2
    2304:	8812      	ldrh	r2, [r2, #0]
    2306:	84da      	strh	r2, [r3, #38]	; 0x26
	ADC_CRITICAL_SECTION_LEAVE();
}
    2308:	46c0      	nop			; (mov r8, r8)
    230a:	46bd      	mov	sp, r7
    230c:	b002      	add	sp, #8
    230e:	bd80      	pop	{r7, pc}

00002310 <hri_adc_write_CALIB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
    2310:	b580      	push	{r7, lr}
    2312:	b082      	sub	sp, #8
    2314:	af00      	add	r7, sp, #0
    2316:	6078      	str	r0, [r7, #4]
    2318:	000a      	movs	r2, r1
    231a:	1cbb      	adds	r3, r7, #2
    231c:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	1cba      	adds	r2, r7, #2
    2322:	8812      	ldrh	r2, [r2, #0]
    2324:	851a      	strh	r2, [r3, #40]	; 0x28
	ADC_CRITICAL_SECTION_LEAVE();
}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	46bd      	mov	sp, r7
    232a:	b002      	add	sp, #8
    232c:	bd80      	pop	{r7, pc}

0000232e <hri_adc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
    232e:	b580      	push	{r7, lr}
    2330:	b082      	sub	sp, #8
    2332:	af00      	add	r7, sp, #0
    2334:	6078      	str	r0, [r7, #4]
    2336:	000a      	movs	r2, r1
    2338:	1cfb      	adds	r3, r7, #3
    233a:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	1cfa      	adds	r2, r7, #3
    2340:	212a      	movs	r1, #42	; 0x2a
    2342:	7812      	ldrb	r2, [r2, #0]
    2344:	545a      	strb	r2, [r3, r1]
	ADC_CRITICAL_SECTION_LEAVE();
}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	46bd      	mov	sp, r7
    234a:	b002      	add	sp, #8
    234c:	bd80      	pop	{r7, pc}

0000234e <_adc_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
    234e:	b580      	push	{r7, lr}
    2350:	b082      	sub	sp, #8
    2352:	af00      	add	r7, sp, #0
    2354:	6078      	str	r0, [r7, #4]
	(void)hw;
	return 0;
    2356:	2300      	movs	r3, #0
}
    2358:	0018      	movs	r0, r3
    235a:	46bd      	mov	sp, r7
    235c:	b002      	add	sp, #8
    235e:	bd80      	pop	{r7, pc}

00002360 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
    2360:	b590      	push	{r4, r7, lr}
    2362:	b085      	sub	sp, #20
    2364:	af00      	add	r7, sp, #0
    2366:	6078      	str	r0, [r7, #4]
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    2368:	687b      	ldr	r3, [r7, #4]
    236a:	220e      	movs	r2, #14
    236c:	18bc      	adds	r4, r7, r2
    236e:	0018      	movs	r0, r3
    2370:	4b18      	ldr	r3, [pc, #96]	; (23d4 <_adc_get_regs+0x74>)
    2372:	4798      	blx	r3
    2374:	0003      	movs	r3, r0
    2376:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    2378:	230f      	movs	r3, #15
    237a:	18fb      	adds	r3, r7, r3
    237c:	2200      	movs	r2, #0
    237e:	701a      	strb	r2, [r3, #0]
    2380:	e018      	b.n	23b4 <_adc_get_regs+0x54>
		if (_adcs[i].number == n) {
    2382:	230f      	movs	r3, #15
    2384:	18fb      	adds	r3, r7, r3
    2386:	781a      	ldrb	r2, [r3, #0]
    2388:	4913      	ldr	r1, [pc, #76]	; (23d8 <_adc_get_regs+0x78>)
    238a:	0013      	movs	r3, r2
    238c:	00db      	lsls	r3, r3, #3
    238e:	1a9b      	subs	r3, r3, r2
    2390:	009b      	lsls	r3, r3, #2
    2392:	5c5b      	ldrb	r3, [r3, r1]
    2394:	220e      	movs	r2, #14
    2396:	18ba      	adds	r2, r7, r2
    2398:	7812      	ldrb	r2, [r2, #0]
    239a:	429a      	cmp	r2, r3
    239c:	d103      	bne.n	23a6 <_adc_get_regs+0x46>
			return i;
    239e:	230f      	movs	r3, #15
    23a0:	18fb      	adds	r3, r7, r3
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	e012      	b.n	23cc <_adc_get_regs+0x6c>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    23a6:	230f      	movs	r3, #15
    23a8:	18fb      	adds	r3, r7, r3
    23aa:	781a      	ldrb	r2, [r3, #0]
    23ac:	230f      	movs	r3, #15
    23ae:	18fb      	adds	r3, r7, r3
    23b0:	3201      	adds	r2, #1
    23b2:	701a      	strb	r2, [r3, #0]
    23b4:	230f      	movs	r3, #15
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	781b      	ldrb	r3, [r3, #0]
    23ba:	2b00      	cmp	r3, #0
    23bc:	d0e1      	beq.n	2382 <_adc_get_regs+0x22>
		}
	}

	ASSERT(false);
    23be:	4b07      	ldr	r3, [pc, #28]	; (23dc <_adc_get_regs+0x7c>)
    23c0:	227f      	movs	r2, #127	; 0x7f
    23c2:	0019      	movs	r1, r3
    23c4:	2000      	movs	r0, #0
    23c6:	4b06      	ldr	r3, [pc, #24]	; (23e0 <_adc_get_regs+0x80>)
    23c8:	4798      	blx	r3
	return 0;
    23ca:	2300      	movs	r3, #0
}
    23cc:	0018      	movs	r0, r3
    23ce:	46bd      	mov	sp, r7
    23d0:	b005      	add	sp, #20
    23d2:	bd90      	pop	{r4, r7, pc}
    23d4:	0000234f 	.word	0x0000234f
    23d8:	20000000 	.word	0x20000000
    23dc:	00004c50 	.word	0x00004c50
    23e0:	00001cf7 	.word	0x00001cf7

000023e4 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    23e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23e6:	b085      	sub	sp, #20
    23e8:	af00      	add	r7, sp, #0
    23ea:	6078      	str	r0, [r7, #4]
    23ec:	000a      	movs	r2, r1
    23ee:	1cfb      	adds	r3, r7, #3
    23f0:	701a      	strb	r2, [r3, #0]
	ASSERT(hw == ADC);
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	4a88      	ldr	r2, [pc, #544]	; (2618 <_adc_init+0x234>)
    23f6:	4694      	mov	ip, r2
    23f8:	4463      	add	r3, ip
    23fa:	425a      	negs	r2, r3
    23fc:	4153      	adcs	r3, r2
    23fe:	b2db      	uxtb	r3, r3
    2400:	4986      	ldr	r1, [pc, #536]	; (261c <_adc_init+0x238>)
    2402:	2294      	movs	r2, #148	; 0x94
    2404:	0018      	movs	r0, r3
    2406:	4b86      	ldr	r3, [pc, #536]	; (2620 <_adc_init+0x23c>)
    2408:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    240a:	4b86      	ldr	r3, [pc, #536]	; (2624 <_adc_init+0x240>)
    240c:	681b      	ldr	r3, [r3, #0]
    240e:	08db      	lsrs	r3, r3, #3
    2410:	b29b      	uxth	r3, r3
    2412:	021b      	lsls	r3, r3, #8
    2414:	b29a      	uxth	r2, r3
    2416:	23e0      	movs	r3, #224	; 0xe0
    2418:	00db      	lsls	r3, r3, #3
    241a:	4013      	ands	r3, r2
    241c:	b299      	uxth	r1, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
    241e:	4b82      	ldr	r3, [pc, #520]	; (2628 <_adc_init+0x244>)
    2420:	685c      	ldr	r4, [r3, #4]
    2422:	681b      	ldr	r3, [r3, #0]
    2424:	0162      	lsls	r2, r4, #5
    2426:	0edd      	lsrs	r5, r3, #27
    2428:	4315      	orrs	r5, r2
    242a:	0ee6      	lsrs	r6, r4, #27
    242c:	b2ab      	uxth	r3, r5
    242e:	22ff      	movs	r2, #255	; 0xff
    2430:	4013      	ands	r3, r2
    2432:	b29a      	uxth	r2, r3
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
    2434:	230e      	movs	r3, #14
    2436:	18fb      	adds	r3, r7, r3
    2438:	430a      	orrs	r2, r1
    243a:	801a      	strh	r2, [r3, #0]

	hri_adc_wait_for_sync(hw);
    243c:	687b      	ldr	r3, [r7, #4]
    243e:	0018      	movs	r0, r3
    2440:	4b7a      	ldr	r3, [pc, #488]	; (262c <_adc_init+0x248>)
    2442:	4798      	blx	r3
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	2102      	movs	r1, #2
    2448:	0018      	movs	r0, r3
    244a:	4b79      	ldr	r3, [pc, #484]	; (2630 <_adc_init+0x24c>)
    244c:	4798      	blx	r3
    244e:	1e03      	subs	r3, r0, #0
    2450:	d008      	beq.n	2464 <_adc_init+0x80>
		hri_adc_write_CTRLA_reg(hw, 0);
    2452:	687b      	ldr	r3, [r7, #4]
    2454:	2100      	movs	r1, #0
    2456:	0018      	movs	r0, r3
    2458:	4b76      	ldr	r3, [pc, #472]	; (2634 <_adc_init+0x250>)
    245a:	4798      	blx	r3
		hri_adc_wait_for_sync(hw);
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	0018      	movs	r0, r3
    2460:	4b72      	ldr	r3, [pc, #456]	; (262c <_adc_init+0x248>)
    2462:	4798      	blx	r3
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
    2464:	687b      	ldr	r3, [r7, #4]
    2466:	2101      	movs	r1, #1
    2468:	0018      	movs	r0, r3
    246a:	4b72      	ldr	r3, [pc, #456]	; (2634 <_adc_init+0x250>)
    246c:	4798      	blx	r3
	hri_adc_wait_for_sync(hw);
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	0018      	movs	r0, r3
    2472:	4b6e      	ldr	r3, [pc, #440]	; (262c <_adc_init+0x248>)
    2474:	4798      	blx	r3

	hri_adc_write_CALIB_reg(hw, calib_reg);
    2476:	230e      	movs	r3, #14
    2478:	18fb      	adds	r3, r7, r3
    247a:	881a      	ldrh	r2, [r3, #0]
    247c:	687b      	ldr	r3, [r7, #4]
    247e:	0011      	movs	r1, r2
    2480:	0018      	movs	r0, r3
    2482:	4b6d      	ldr	r3, [pc, #436]	; (2638 <_adc_init+0x254>)
    2484:	4798      	blx	r3
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2486:	1cfb      	adds	r3, r7, #3
    2488:	781a      	ldrb	r2, [r3, #0]
    248a:	496c      	ldr	r1, [pc, #432]	; (263c <_adc_init+0x258>)
    248c:	0013      	movs	r3, r2
    248e:	00db      	lsls	r3, r3, #3
    2490:	1a9b      	subs	r3, r3, r2
    2492:	009b      	lsls	r3, r3, #2
    2494:	18cb      	adds	r3, r1, r3
    2496:	3302      	adds	r3, #2
    2498:	781a      	ldrb	r2, [r3, #0]
    249a:	687b      	ldr	r3, [r7, #4]
    249c:	0011      	movs	r1, r2
    249e:	0018      	movs	r0, r3
    24a0:	4b67      	ldr	r3, [pc, #412]	; (2640 <_adc_init+0x25c>)
    24a2:	4798      	blx	r3
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    24a4:	1cfb      	adds	r3, r7, #3
    24a6:	781a      	ldrb	r2, [r3, #0]
    24a8:	4964      	ldr	r1, [pc, #400]	; (263c <_adc_init+0x258>)
    24aa:	0013      	movs	r3, r2
    24ac:	00db      	lsls	r3, r3, #3
    24ae:	1a9b      	subs	r3, r3, r2
    24b0:	009b      	lsls	r3, r3, #2
    24b2:	18cb      	adds	r3, r1, r3
    24b4:	3303      	adds	r3, #3
    24b6:	781a      	ldrb	r2, [r3, #0]
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	0011      	movs	r1, r2
    24bc:	0018      	movs	r0, r3
    24be:	4b61      	ldr	r3, [pc, #388]	; (2644 <_adc_init+0x260>)
    24c0:	4798      	blx	r3
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    24c2:	1cfb      	adds	r3, r7, #3
    24c4:	781a      	ldrb	r2, [r3, #0]
    24c6:	495d      	ldr	r1, [pc, #372]	; (263c <_adc_init+0x258>)
    24c8:	0013      	movs	r3, r2
    24ca:	00db      	lsls	r3, r3, #3
    24cc:	1a9b      	subs	r3, r3, r2
    24ce:	009b      	lsls	r3, r3, #2
    24d0:	18cb      	adds	r3, r1, r3
    24d2:	3304      	adds	r3, #4
    24d4:	781a      	ldrb	r2, [r3, #0]
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	0011      	movs	r1, r2
    24da:	0018      	movs	r0, r3
    24dc:	4b5a      	ldr	r3, [pc, #360]	; (2648 <_adc_init+0x264>)
    24de:	4798      	blx	r3
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    24e0:	1cfb      	adds	r3, r7, #3
    24e2:	781a      	ldrb	r2, [r3, #0]
    24e4:	4955      	ldr	r1, [pc, #340]	; (263c <_adc_init+0x258>)
    24e6:	0013      	movs	r3, r2
    24e8:	00db      	lsls	r3, r3, #3
    24ea:	1a9b      	subs	r3, r3, r2
    24ec:	009b      	lsls	r3, r3, #2
    24ee:	18cb      	adds	r3, r1, r3
    24f0:	3310      	adds	r3, #16
    24f2:	781a      	ldrb	r2, [r3, #0]
    24f4:	687b      	ldr	r3, [r7, #4]
    24f6:	0011      	movs	r1, r2
    24f8:	0018      	movs	r0, r3
    24fa:	4b54      	ldr	r3, [pc, #336]	; (264c <_adc_init+0x268>)
    24fc:	4798      	blx	r3
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    24fe:	1cfb      	adds	r3, r7, #3
    2500:	781a      	ldrb	r2, [r3, #0]
    2502:	494e      	ldr	r1, [pc, #312]	; (263c <_adc_init+0x258>)
    2504:	0013      	movs	r3, r2
    2506:	00db      	lsls	r3, r3, #3
    2508:	1a9b      	subs	r3, r3, r2
    250a:	009b      	lsls	r3, r3, #2
    250c:	18cb      	adds	r3, r1, r3
    250e:	3316      	adds	r3, #22
    2510:	881a      	ldrh	r2, [r3, #0]
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	0011      	movs	r1, r2
    2516:	0018      	movs	r0, r3
    2518:	4b4d      	ldr	r3, [pc, #308]	; (2650 <_adc_init+0x26c>)
    251a:	4798      	blx	r3
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    251c:	1cfb      	adds	r3, r7, #3
    251e:	781a      	ldrb	r2, [r3, #0]
    2520:	4946      	ldr	r1, [pc, #280]	; (263c <_adc_init+0x258>)
    2522:	0013      	movs	r3, r2
    2524:	00db      	lsls	r3, r3, #3
    2526:	1a9b      	subs	r3, r3, r2
    2528:	009b      	lsls	r3, r3, #2
    252a:	18cb      	adds	r3, r1, r3
    252c:	3318      	adds	r3, #24
    252e:	881a      	ldrh	r2, [r3, #0]
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	0011      	movs	r1, r2
    2534:	0018      	movs	r0, r3
    2536:	4b47      	ldr	r3, [pc, #284]	; (2654 <_adc_init+0x270>)
    2538:	4798      	blx	r3
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    253a:	1cfb      	adds	r3, r7, #3
    253c:	781a      	ldrb	r2, [r3, #0]
    253e:	493f      	ldr	r1, [pc, #252]	; (263c <_adc_init+0x258>)
    2540:	0013      	movs	r3, r2
    2542:	00db      	lsls	r3, r3, #3
    2544:	1a9b      	subs	r3, r3, r2
    2546:	009b      	lsls	r3, r3, #2
    2548:	18cb      	adds	r3, r1, r3
    254a:	331a      	adds	r3, #26
    254c:	781a      	ldrb	r2, [r3, #0]
    254e:	687b      	ldr	r3, [r7, #4]
    2550:	0011      	movs	r1, r2
    2552:	0018      	movs	r0, r3
    2554:	4b40      	ldr	r3, [pc, #256]	; (2658 <_adc_init+0x274>)
    2556:	4798      	blx	r3
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2558:	1cfb      	adds	r3, r7, #3
    255a:	781a      	ldrb	r2, [r3, #0]
    255c:	4937      	ldr	r1, [pc, #220]	; (263c <_adc_init+0x258>)
    255e:	0013      	movs	r3, r2
    2560:	00db      	lsls	r3, r3, #3
    2562:	1a9b      	subs	r3, r3, r2
    2564:	009b      	lsls	r3, r3, #2
    2566:	18cb      	adds	r3, r1, r3
    2568:	3306      	adds	r3, #6
    256a:	881a      	ldrh	r2, [r3, #0]
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	0011      	movs	r1, r2
    2570:	0018      	movs	r0, r3
    2572:	4b3a      	ldr	r3, [pc, #232]	; (265c <_adc_init+0x278>)
    2574:	4798      	blx	r3
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2576:	1cfb      	adds	r3, r7, #3
    2578:	781a      	ldrb	r2, [r3, #0]
    257a:	4930      	ldr	r1, [pc, #192]	; (263c <_adc_init+0x258>)
    257c:	0013      	movs	r3, r2
    257e:	00db      	lsls	r3, r3, #3
    2580:	1a9b      	subs	r3, r3, r2
    2582:	009b      	lsls	r3, r3, #2
    2584:	18cb      	adds	r3, r1, r3
    2586:	330c      	adds	r3, #12
    2588:	681a      	ldr	r2, [r3, #0]
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	0011      	movs	r1, r2
    258e:	0018      	movs	r0, r3
    2590:	4b33      	ldr	r3, [pc, #204]	; (2660 <_adc_init+0x27c>)
    2592:	4798      	blx	r3
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
    2594:	1cfb      	adds	r3, r7, #3
    2596:	781a      	ldrb	r2, [r3, #0]
    2598:	4928      	ldr	r1, [pc, #160]	; (263c <_adc_init+0x258>)
    259a:	0013      	movs	r3, r2
    259c:	00db      	lsls	r3, r3, #3
    259e:	1a9b      	subs	r3, r3, r2
    25a0:	009b      	lsls	r3, r3, #2
    25a2:	18cb      	adds	r3, r1, r3
    25a4:	3308      	adds	r3, #8
    25a6:	781a      	ldrb	r2, [r3, #0]
    25a8:	687b      	ldr	r3, [r7, #4]
    25aa:	0011      	movs	r1, r2
    25ac:	0018      	movs	r0, r3
    25ae:	4b2d      	ldr	r3, [pc, #180]	; (2664 <_adc_init+0x280>)
    25b0:	4798      	blx	r3
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    25b2:	1cfb      	adds	r3, r7, #3
    25b4:	781a      	ldrb	r2, [r3, #0]
    25b6:	4921      	ldr	r1, [pc, #132]	; (263c <_adc_init+0x258>)
    25b8:	0013      	movs	r3, r2
    25ba:	00db      	lsls	r3, r3, #3
    25bc:	1a9b      	subs	r3, r3, r2
    25be:	009b      	lsls	r3, r3, #2
    25c0:	18cb      	adds	r3, r1, r3
    25c2:	3312      	adds	r3, #18
    25c4:	881a      	ldrh	r2, [r3, #0]
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	0011      	movs	r1, r2
    25ca:	0018      	movs	r0, r3
    25cc:	4b26      	ldr	r3, [pc, #152]	; (2668 <_adc_init+0x284>)
    25ce:	4798      	blx	r3
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    25d0:	1cfb      	adds	r3, r7, #3
    25d2:	781a      	ldrb	r2, [r3, #0]
    25d4:	4919      	ldr	r1, [pc, #100]	; (263c <_adc_init+0x258>)
    25d6:	0013      	movs	r3, r2
    25d8:	00db      	lsls	r3, r3, #3
    25da:	1a9b      	subs	r3, r3, r2
    25dc:	009b      	lsls	r3, r3, #2
    25de:	18cb      	adds	r3, r1, r3
    25e0:	3314      	adds	r3, #20
    25e2:	881a      	ldrh	r2, [r3, #0]
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	0011      	movs	r1, r2
    25e8:	0018      	movs	r0, r3
    25ea:	4b20      	ldr	r3, [pc, #128]	; (266c <_adc_init+0x288>)
    25ec:	4798      	blx	r3
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    25ee:	1cfb      	adds	r3, r7, #3
    25f0:	781a      	ldrb	r2, [r3, #0]
    25f2:	4912      	ldr	r1, [pc, #72]	; (263c <_adc_init+0x258>)
    25f4:	0013      	movs	r3, r2
    25f6:	00db      	lsls	r3, r3, #3
    25f8:	1a9b      	subs	r3, r3, r2
    25fa:	009b      	lsls	r3, r3, #2
    25fc:	18cb      	adds	r3, r1, r3
    25fe:	3301      	adds	r3, #1
    2600:	781a      	ldrb	r2, [r3, #0]
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	0011      	movs	r1, r2
    2606:	0018      	movs	r0, r3
    2608:	4b0a      	ldr	r3, [pc, #40]	; (2634 <_adc_init+0x250>)
    260a:	4798      	blx	r3

	return ERR_NONE;
    260c:	2300      	movs	r3, #0
}
    260e:	0018      	movs	r0, r3
    2610:	46bd      	mov	sp, r7
    2612:	b005      	add	sp, #20
    2614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	bdffc000 	.word	0xbdffc000
    261c:	00004c50 	.word	0x00004c50
    2620:	00001cf7 	.word	0x00001cf7
    2624:	00806024 	.word	0x00806024
    2628:	00806020 	.word	0x00806020
    262c:	0000203d 	.word	0x0000203d
    2630:	000020f1 	.word	0x000020f1
    2634:	00002129 	.word	0x00002129
    2638:	00002311 	.word	0x00002311
    263c:	20000000 	.word	0x20000000
    2640:	00002147 	.word	0x00002147
    2644:	00002165 	.word	0x00002165
    2648:	00002183 	.word	0x00002183
    264c:	0000225d 	.word	0x0000225d
    2650:	000022d5 	.word	0x000022d5
    2654:	000022f3 	.word	0x000022f3
    2658:	0000232f 	.word	0x0000232f
    265c:	000021e1 	.word	0x000021e1
    2660:	00002239 	.word	0x00002239
    2664:	0000220d 	.word	0x0000220d
    2668:	0000227d 	.word	0x0000227d
    266c:	000022a9 	.word	0x000022a9

00002670 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
    2670:	b580      	push	{r7, lr}
    2672:	b084      	sub	sp, #16
    2674:	af00      	add	r7, sp, #0
    2676:	6078      	str	r0, [r7, #4]
    2678:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	1e5a      	subs	r2, r3, #1
    267e:	4193      	sbcs	r3, r2
    2680:	b2db      	uxtb	r3, r3
    2682:	4915      	ldr	r1, [pc, #84]	; (26d8 <_adc_async_init+0x68>)
    2684:	22d3      	movs	r2, #211	; 0xd3
    2686:	0018      	movs	r0, r3
    2688:	4b14      	ldr	r3, [pc, #80]	; (26dc <_adc_async_init+0x6c>)
    268a:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    268c:	683b      	ldr	r3, [r7, #0]
    268e:	0018      	movs	r0, r3
    2690:	4b13      	ldr	r3, [pc, #76]	; (26e0 <_adc_async_init+0x70>)
    2692:	4798      	blx	r3
    2694:	0003      	movs	r3, r0
    2696:	001a      	movs	r2, r3
    2698:	683b      	ldr	r3, [r7, #0]
    269a:	0011      	movs	r1, r2
    269c:	0018      	movs	r0, r3
    269e:	4b11      	ldr	r3, [pc, #68]	; (26e4 <_adc_async_init+0x74>)
    26a0:	4798      	blx	r3
    26a2:	0003      	movs	r3, r0
    26a4:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    26a6:	68fb      	ldr	r3, [r7, #12]
    26a8:	2b00      	cmp	r3, #0
    26aa:	d001      	beq.n	26b0 <_adc_async_init+0x40>
		return init_status;
    26ac:	68fb      	ldr	r3, [r7, #12]
    26ae:	e00f      	b.n	26d0 <_adc_async_init+0x60>
	}
	device->hw = hw;
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	683a      	ldr	r2, [r7, #0]
    26b4:	615a      	str	r2, [r3, #20]
	_adc_dev   = device;
    26b6:	4b0c      	ldr	r3, [pc, #48]	; (26e8 <_adc_async_init+0x78>)
    26b8:	687a      	ldr	r2, [r7, #4]
    26ba:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(ADC_IRQn);
    26bc:	2017      	movs	r0, #23
    26be:	4b0b      	ldr	r3, [pc, #44]	; (26ec <_adc_async_init+0x7c>)
    26c0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ADC_IRQn);
    26c2:	2017      	movs	r0, #23
    26c4:	4b0a      	ldr	r3, [pc, #40]	; (26f0 <_adc_async_init+0x80>)
    26c6:	4798      	blx	r3
	NVIC_EnableIRQ(ADC_IRQn);
    26c8:	2017      	movs	r0, #23
    26ca:	4b0a      	ldr	r3, [pc, #40]	; (26f4 <_adc_async_init+0x84>)
    26cc:	4798      	blx	r3

	return ERR_NONE;
    26ce:	2300      	movs	r3, #0
}
    26d0:	0018      	movs	r0, r3
    26d2:	46bd      	mov	sp, r7
    26d4:	b004      	add	sp, #16
    26d6:	bd80      	pop	{r7, pc}
    26d8:	00004c50 	.word	0x00004c50
    26dc:	00001cf7 	.word	0x00001cf7
    26e0:	00002361 	.word	0x00002361
    26e4:	000023e5 	.word	0x000023e5
    26e8:	20000120 	.word	0x20000120
    26ec:	00001fc5 	.word	0x00001fc5
    26f0:	00002005 	.word	0x00002005
    26f4:	00001f91 	.word	0x00001f91

000026f8 <_adc_async_get_data_size>:

/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
    26f8:	b580      	push	{r7, lr}
    26fa:	b082      	sub	sp, #8
    26fc:	af00      	add	r7, sp, #0
    26fe:	6078      	str	r0, [r7, #4]
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	695b      	ldr	r3, [r3, #20]
    2704:	0018      	movs	r0, r3
    2706:	4b06      	ldr	r3, [pc, #24]	; (2720 <_adc_async_get_data_size+0x28>)
    2708:	4798      	blx	r3
    270a:	0003      	movs	r3, r0
    270c:	2b03      	cmp	r3, #3
    270e:	d101      	bne.n	2714 <_adc_async_get_data_size+0x1c>
    2710:	2301      	movs	r3, #1
    2712:	e000      	b.n	2716 <_adc_async_get_data_size+0x1e>
    2714:	2302      	movs	r3, #2
}
    2716:	0018      	movs	r0, r3
    2718:	46bd      	mov	sp, r7
    271a:	b002      	add	sp, #8
    271c:	bd80      	pop	{r7, pc}
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	000021a1 	.word	0x000021a1

00002724 <ADC_Handler>:

/**
 * \internal ADC interrupt handler
 */
void ADC_Handler(void)
{
    2724:	b5b0      	push	{r4, r5, r7, lr}
    2726:	b082      	sub	sp, #8
    2728:	af00      	add	r7, sp, #0
	void *const hw      = _adc_dev->hw;
    272a:	4b2a      	ldr	r3, [pc, #168]	; (27d4 <ADC_Handler+0xb0>)
    272c:	681b      	ldr	r3, [r3, #0]
    272e:	695b      	ldr	r3, [r3, #20]
    2730:	607b      	str	r3, [r7, #4]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
    2732:	1cfc      	adds	r4, r7, #3
    2734:	687b      	ldr	r3, [r7, #4]
    2736:	0018      	movs	r0, r3
    2738:	4b27      	ldr	r3, [pc, #156]	; (27d8 <ADC_Handler+0xb4>)
    273a:	4798      	blx	r3
    273c:	0003      	movs	r3, r0
    273e:	7023      	strb	r3, [r4, #0]
	intflag &= hri_adc_read_INTEN_reg(hw);
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	0018      	movs	r0, r3
    2744:	4b25      	ldr	r3, [pc, #148]	; (27dc <ADC_Handler+0xb8>)
    2746:	4798      	blx	r3
    2748:	0003      	movs	r3, r0
    274a:	0019      	movs	r1, r3
    274c:	1cfb      	adds	r3, r7, #3
    274e:	1cfa      	adds	r2, r7, #3
    2750:	7812      	ldrb	r2, [r2, #0]
    2752:	400a      	ands	r2, r1
    2754:	701a      	strb	r2, [r3, #0]
	if (intflag & ADC_INTFLAG_RESRDY) {
    2756:	1cfb      	adds	r3, r7, #3
    2758:	781b      	ldrb	r3, [r3, #0]
    275a:	2201      	movs	r2, #1
    275c:	4013      	ands	r3, r2
    275e:	d012      	beq.n	2786 <ADC_Handler+0x62>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	0018      	movs	r0, r3
    2764:	4b1e      	ldr	r3, [pc, #120]	; (27e0 <ADC_Handler+0xbc>)
    2766:	4798      	blx	r3
		_adc_dev->adc_async_ch_cb.convert_done(_adc_dev, 0, hri_adc_read_RESULT_reg(hw));
    2768:	4b1a      	ldr	r3, [pc, #104]	; (27d4 <ADC_Handler+0xb0>)
    276a:	681b      	ldr	r3, [r3, #0]
    276c:	689c      	ldr	r4, [r3, #8]
    276e:	4b19      	ldr	r3, [pc, #100]	; (27d4 <ADC_Handler+0xb0>)
    2770:	681d      	ldr	r5, [r3, #0]
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	0018      	movs	r0, r3
    2776:	4b1b      	ldr	r3, [pc, #108]	; (27e4 <ADC_Handler+0xc0>)
    2778:	4798      	blx	r3
    277a:	0003      	movs	r3, r0
    277c:	001a      	movs	r2, r3
    277e:	2100      	movs	r1, #0
    2780:	0028      	movs	r0, r5
    2782:	47a0      	blx	r4
		_adc_dev->adc_async_cb.error_cb(_adc_dev, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
		hri_adc_clear_interrupt_WINMON_bit(hw);
		_adc_dev->adc_async_cb.window_cb(_adc_dev, 0);
	}
}
    2784:	e022      	b.n	27cc <ADC_Handler+0xa8>
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    2786:	1cfb      	adds	r3, r7, #3
    2788:	781b      	ldrb	r3, [r3, #0]
    278a:	2202      	movs	r2, #2
    278c:	4013      	ands	r3, r2
    278e:	d00c      	beq.n	27aa <ADC_Handler+0x86>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	0018      	movs	r0, r3
    2794:	4b14      	ldr	r3, [pc, #80]	; (27e8 <ADC_Handler+0xc4>)
    2796:	4798      	blx	r3
		_adc_dev->adc_async_cb.error_cb(_adc_dev, 0);
    2798:	4b0e      	ldr	r3, [pc, #56]	; (27d4 <ADC_Handler+0xb0>)
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	685a      	ldr	r2, [r3, #4]
    279e:	4b0d      	ldr	r3, [pc, #52]	; (27d4 <ADC_Handler+0xb0>)
    27a0:	681b      	ldr	r3, [r3, #0]
    27a2:	2100      	movs	r1, #0
    27a4:	0018      	movs	r0, r3
    27a6:	4790      	blx	r2
}
    27a8:	e010      	b.n	27cc <ADC_Handler+0xa8>
	} else if (intflag & ADC_INTFLAG_WINMON) {
    27aa:	1cfb      	adds	r3, r7, #3
    27ac:	781b      	ldrb	r3, [r3, #0]
    27ae:	2204      	movs	r2, #4
    27b0:	4013      	ands	r3, r2
    27b2:	d00b      	beq.n	27cc <ADC_Handler+0xa8>
		hri_adc_clear_interrupt_WINMON_bit(hw);
    27b4:	687b      	ldr	r3, [r7, #4]
    27b6:	0018      	movs	r0, r3
    27b8:	4b0c      	ldr	r3, [pc, #48]	; (27ec <ADC_Handler+0xc8>)
    27ba:	4798      	blx	r3
		_adc_dev->adc_async_cb.window_cb(_adc_dev, 0);
    27bc:	4b05      	ldr	r3, [pc, #20]	; (27d4 <ADC_Handler+0xb0>)
    27be:	681b      	ldr	r3, [r3, #0]
    27c0:	681a      	ldr	r2, [r3, #0]
    27c2:	4b04      	ldr	r3, [pc, #16]	; (27d4 <ADC_Handler+0xb0>)
    27c4:	681b      	ldr	r3, [r3, #0]
    27c6:	2100      	movs	r1, #0
    27c8:	0018      	movs	r0, r3
    27ca:	4790      	blx	r2
}
    27cc:	46c0      	nop			; (mov r8, r8)
    27ce:	46bd      	mov	sp, r7
    27d0:	b002      	add	sp, #8
    27d2:	bdb0      	pop	{r4, r5, r7, pc}
    27d4:	20000120 	.word	0x20000120
    27d8:	0000209f 	.word	0x0000209f
    27dc:	000020b5 	.word	0x000020b5
    27e0:	0000205d 	.word	0x0000205d
    27e4:	000020cd 	.word	0x000020cd
    27e8:	00002073 	.word	0x00002073
    27ec:	00002089 	.word	0x00002089

000027f0 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    27f0:	b580      	push	{r7, lr}
    27f2:	b082      	sub	sp, #8
    27f4:	af00      	add	r7, sp, #0
    27f6:	6078      	str	r0, [r7, #4]
    27f8:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	685a      	ldr	r2, [r3, #4]
    27fe:	683b      	ldr	r3, [r7, #0]
    2800:	005b      	lsls	r3, r3, #1
    2802:	211e      	movs	r1, #30
    2804:	400b      	ands	r3, r1
    2806:	431a      	orrs	r2, r3
    2808:	687b      	ldr	r3, [r7, #4]
    280a:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    280c:	46c0      	nop			; (mov r8, r8)
    280e:	46bd      	mov	sp, r7
    2810:	b002      	add	sp, #8
    2812:	bd80      	pop	{r7, pc}

00002814 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2814:	b580      	push	{r7, lr}
    2816:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    2818:	4b08      	ldr	r3, [pc, #32]	; (283c <_init_chip+0x28>)
    281a:	2100      	movs	r1, #0
    281c:	0018      	movs	r0, r3
    281e:	4b08      	ldr	r3, [pc, #32]	; (2840 <_init_chip+0x2c>)
    2820:	4798      	blx	r3

	_pm_init();
    2822:	4b08      	ldr	r3, [pc, #32]	; (2844 <_init_chip+0x30>)
    2824:	4798      	blx	r3
	_sysctrl_init_sources();
    2826:	4b08      	ldr	r3, [pc, #32]	; (2848 <_init_chip+0x34>)
    2828:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    282a:	4b08      	ldr	r3, [pc, #32]	; (284c <_init_chip+0x38>)
    282c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    282e:	20ff      	movs	r0, #255	; 0xff
    2830:	4b07      	ldr	r3, [pc, #28]	; (2850 <_init_chip+0x3c>)
    2832:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    2834:	46c0      	nop			; (mov r8, r8)
    2836:	46bd      	mov	sp, r7
    2838:	bd80      	pop	{r7, pc}
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	41004000 	.word	0x41004000
    2840:	000027f1 	.word	0x000027f1
    2844:	000029a9 	.word	0x000029a9
    2848:	00003f19 	.word	0x00003f19
    284c:	00003fc5 	.word	0x00003fc5
    2850:	000028b1 	.word	0x000028b1

00002854 <hri_gclk_wait_for_sync>:
{
    2854:	b580      	push	{r7, lr}
    2856:	b082      	sub	sp, #8
    2858:	af00      	add	r7, sp, #0
    285a:	6078      	str	r0, [r7, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    285c:	46c0      	nop			; (mov r8, r8)
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	785b      	ldrb	r3, [r3, #1]
    2862:	061b      	lsls	r3, r3, #24
    2864:	0fdb      	lsrs	r3, r3, #31
    2866:	b2db      	uxtb	r3, r3
    2868:	2b00      	cmp	r3, #0
    286a:	d1f8      	bne.n	285e <hri_gclk_wait_for_sync+0xa>
}
    286c:	46c0      	nop			; (mov r8, r8)
    286e:	46bd      	mov	sp, r7
    2870:	b002      	add	sp, #8
    2872:	bd80      	pop	{r7, pc}

00002874 <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data)
{
    2874:	b580      	push	{r7, lr}
    2876:	b082      	sub	sp, #8
    2878:	af00      	add	r7, sp, #0
    287a:	6078      	str	r0, [r7, #4]
    287c:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL.reg = data;
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	683a      	ldr	r2, [r7, #0]
    2882:	605a      	str	r2, [r3, #4]
	hri_gclk_wait_for_sync(hw);
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	0018      	movs	r0, r3
    2888:	4b02      	ldr	r3, [pc, #8]	; (2894 <hri_gclk_write_GENCTRL_reg+0x20>)
    288a:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
    288c:	46c0      	nop			; (mov r8, r8)
    288e:	46bd      	mov	sp, r7
    2890:	b002      	add	sp, #8
    2892:	bd80      	pop	{r7, pc}
    2894:	00002855 	.word	0x00002855

00002898 <hri_gclk_write_GENDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
    2898:	b580      	push	{r7, lr}
    289a:	b082      	sub	sp, #8
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
    28a0:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	683a      	ldr	r2, [r7, #0]
    28a6:	609a      	str	r2, [r3, #8]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    28a8:	46c0      	nop			; (mov r8, r8)
    28aa:	46bd      	mov	sp, r7
    28ac:	b002      	add	sp, #8
    28ae:	bd80      	pop	{r7, pc}

000028b0 <_gclk_init_generators_by_fref>:
	        | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    28b0:	b580      	push	{r7, lr}
    28b2:	b082      	sub	sp, #8
    28b4:	af00      	add	r7, sp, #0
    28b6:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	2201      	movs	r2, #1
    28bc:	4013      	ands	r3, r2
    28be:	d00d      	beq.n	28dc <_gclk_init_generators_by_fref+0x2c>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_0_DIV) | GCLK_GENDIV_ID(0));
    28c0:	2380      	movs	r3, #128	; 0x80
    28c2:	005b      	lsls	r3, r3, #1
    28c4:	4a07      	ldr	r2, [pc, #28]	; (28e4 <_gclk_init_generators_by_fref+0x34>)
    28c6:	0019      	movs	r1, r3
    28c8:	0010      	movs	r0, r2
    28ca:	4b07      	ldr	r3, [pc, #28]	; (28e8 <_gclk_init_generators_by_fref+0x38>)
    28cc:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    28ce:	2383      	movs	r3, #131	; 0x83
    28d0:	025b      	lsls	r3, r3, #9
    28d2:	4a04      	ldr	r2, [pc, #16]	; (28e4 <_gclk_init_generators_by_fref+0x34>)
    28d4:	0019      	movs	r1, r3
    28d6:	0010      	movs	r0, r2
    28d8:	4b04      	ldr	r3, [pc, #16]	; (28ec <_gclk_init_generators_by_fref+0x3c>)
    28da:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    28dc:	46c0      	nop			; (mov r8, r8)
    28de:	46bd      	mov	sp, r7
    28e0:	b002      	add	sp, #8
    28e2:	bd80      	pop	{r7, pc}
    28e4:	40000c00 	.word	0x40000c00
    28e8:	00002899 	.word	0x00002899
    28ec:	00002875 	.word	0x00002875

000028f0 <hri_pm_set_CPUSEL_CPUDIV_bf>:
{
	return ((Pm *)hw)->SLEEP.reg;
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
    28f0:	b580      	push	{r7, lr}
    28f2:	b082      	sub	sp, #8
    28f4:	af00      	add	r7, sp, #0
    28f6:	6078      	str	r0, [r7, #4]
    28f8:	000a      	movs	r2, r1
    28fa:	1cfb      	adds	r3, r7, #3
    28fc:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	7a1b      	ldrb	r3, [r3, #8]
    2902:	b2da      	uxtb	r2, r3
    2904:	1cfb      	adds	r3, r7, #3
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	2107      	movs	r1, #7
    290a:	400b      	ands	r3, r1
    290c:	b2db      	uxtb	r3, r3
    290e:	4313      	orrs	r3, r2
    2910:	b2da      	uxtb	r2, r3
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	721a      	strb	r2, [r3, #8]
	PM_CRITICAL_SECTION_LEAVE();
}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	46bd      	mov	sp, r7
    291a:	b002      	add	sp, #8
    291c:	bd80      	pop	{r7, pc}

0000291e <hri_pm_set_APBASEL_APBADIV_bf>:
{
	return ((Pm *)hw)->CPUSEL.reg;
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
    291e:	b580      	push	{r7, lr}
    2920:	b082      	sub	sp, #8
    2922:	af00      	add	r7, sp, #0
    2924:	6078      	str	r0, [r7, #4]
    2926:	000a      	movs	r2, r1
    2928:	1cfb      	adds	r3, r7, #3
    292a:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	7a5b      	ldrb	r3, [r3, #9]
    2930:	b2da      	uxtb	r2, r3
    2932:	1cfb      	adds	r3, r7, #3
    2934:	781b      	ldrb	r3, [r3, #0]
    2936:	2107      	movs	r1, #7
    2938:	400b      	ands	r3, r1
    293a:	b2db      	uxtb	r3, r3
    293c:	4313      	orrs	r3, r2
    293e:	b2da      	uxtb	r2, r3
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	725a      	strb	r2, [r3, #9]
	PM_CRITICAL_SECTION_LEAVE();
}
    2944:	46c0      	nop			; (mov r8, r8)
    2946:	46bd      	mov	sp, r7
    2948:	b002      	add	sp, #8
    294a:	bd80      	pop	{r7, pc}

0000294c <hri_pm_set_APBBSEL_APBBDIV_bf>:
{
	return ((Pm *)hw)->APBASEL.reg;
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
    294c:	b580      	push	{r7, lr}
    294e:	b082      	sub	sp, #8
    2950:	af00      	add	r7, sp, #0
    2952:	6078      	str	r0, [r7, #4]
    2954:	000a      	movs	r2, r1
    2956:	1cfb      	adds	r3, r7, #3
    2958:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	7a9b      	ldrb	r3, [r3, #10]
    295e:	b2da      	uxtb	r2, r3
    2960:	1cfb      	adds	r3, r7, #3
    2962:	781b      	ldrb	r3, [r3, #0]
    2964:	2107      	movs	r1, #7
    2966:	400b      	ands	r3, r1
    2968:	b2db      	uxtb	r3, r3
    296a:	4313      	orrs	r3, r2
    296c:	b2da      	uxtb	r2, r3
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	729a      	strb	r2, [r3, #10]
	PM_CRITICAL_SECTION_LEAVE();
}
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	46bd      	mov	sp, r7
    2976:	b002      	add	sp, #8
    2978:	bd80      	pop	{r7, pc}

0000297a <hri_pm_set_APBCSEL_APBCDIV_bf>:
{
	return ((Pm *)hw)->APBBSEL.reg;
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
    297a:	b580      	push	{r7, lr}
    297c:	b082      	sub	sp, #8
    297e:	af00      	add	r7, sp, #0
    2980:	6078      	str	r0, [r7, #4]
    2982:	000a      	movs	r2, r1
    2984:	1cfb      	adds	r3, r7, #3
    2986:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2988:	687b      	ldr	r3, [r7, #4]
    298a:	7adb      	ldrb	r3, [r3, #11]
    298c:	b2da      	uxtb	r2, r3
    298e:	1cfb      	adds	r3, r7, #3
    2990:	781b      	ldrb	r3, [r3, #0]
    2992:	2107      	movs	r1, #7
    2994:	400b      	ands	r3, r1
    2996:	b2db      	uxtb	r3, r3
    2998:	4313      	orrs	r3, r2
    299a:	b2da      	uxtb	r2, r3
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	72da      	strb	r2, [r3, #11]
	PM_CRITICAL_SECTION_LEAVE();
}
    29a0:	46c0      	nop			; (mov r8, r8)
    29a2:	46bd      	mov	sp, r7
    29a4:	b002      	add	sp, #8
    29a6:	bd80      	pop	{r7, pc}

000029a8 <_pm_init>:

/**
 * \brief Power Manager Init
 */
void _pm_init(void)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	af00      	add	r7, sp, #0
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
    29ac:	4b0b      	ldr	r3, [pc, #44]	; (29dc <_pm_init+0x34>)
    29ae:	2100      	movs	r1, #0
    29b0:	0018      	movs	r0, r3
    29b2:	4b0b      	ldr	r3, [pc, #44]	; (29e0 <_pm_init+0x38>)
    29b4:	4798      	blx	r3
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
    29b6:	4b09      	ldr	r3, [pc, #36]	; (29dc <_pm_init+0x34>)
    29b8:	2100      	movs	r1, #0
    29ba:	0018      	movs	r0, r3
    29bc:	4b09      	ldr	r3, [pc, #36]	; (29e4 <_pm_init+0x3c>)
    29be:	4798      	blx	r3
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
    29c0:	4b06      	ldr	r3, [pc, #24]	; (29dc <_pm_init+0x34>)
    29c2:	2100      	movs	r1, #0
    29c4:	0018      	movs	r0, r3
    29c6:	4b08      	ldr	r3, [pc, #32]	; (29e8 <_pm_init+0x40>)
    29c8:	4798      	blx	r3
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
    29ca:	4b04      	ldr	r3, [pc, #16]	; (29dc <_pm_init+0x34>)
    29cc:	2100      	movs	r1, #0
    29ce:	0018      	movs	r0, r3
    29d0:	4b06      	ldr	r3, [pc, #24]	; (29ec <_pm_init+0x44>)
    29d2:	4798      	blx	r3
}
    29d4:	46c0      	nop			; (mov r8, r8)
    29d6:	46bd      	mov	sp, r7
    29d8:	bd80      	pop	{r7, pc}
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	40000400 	.word	0x40000400
    29e0:	000028f1 	.word	0x000028f1
    29e4:	0000291f 	.word	0x0000291f
    29e8:	0000294d 	.word	0x0000294d
    29ec:	0000297b 	.word	0x0000297b

000029f0 <__NVIC_EnableIRQ>:
{
    29f0:	b580      	push	{r7, lr}
    29f2:	b082      	sub	sp, #8
    29f4:	af00      	add	r7, sp, #0
    29f6:	0002      	movs	r2, r0
    29f8:	1dfb      	adds	r3, r7, #7
    29fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    29fc:	1dfb      	adds	r3, r7, #7
    29fe:	781b      	ldrb	r3, [r3, #0]
    2a00:	2b7f      	cmp	r3, #127	; 0x7f
    2a02:	d809      	bhi.n	2a18 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a04:	4b06      	ldr	r3, [pc, #24]	; (2a20 <__NVIC_EnableIRQ+0x30>)
    2a06:	1dfa      	adds	r2, r7, #7
    2a08:	7812      	ldrb	r2, [r2, #0]
    2a0a:	0011      	movs	r1, r2
    2a0c:	221f      	movs	r2, #31
    2a0e:	400a      	ands	r2, r1
    2a10:	2101      	movs	r1, #1
    2a12:	4091      	lsls	r1, r2
    2a14:	000a      	movs	r2, r1
    2a16:	601a      	str	r2, [r3, #0]
}
    2a18:	46c0      	nop			; (mov r8, r8)
    2a1a:	46bd      	mov	sp, r7
    2a1c:	b002      	add	sp, #8
    2a1e:	bd80      	pop	{r7, pc}
    2a20:	e000e100 	.word	0xe000e100

00002a24 <__NVIC_DisableIRQ>:
{
    2a24:	b580      	push	{r7, lr}
    2a26:	b082      	sub	sp, #8
    2a28:	af00      	add	r7, sp, #0
    2a2a:	0002      	movs	r2, r0
    2a2c:	1dfb      	adds	r3, r7, #7
    2a2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2a30:	1dfb      	adds	r3, r7, #7
    2a32:	781b      	ldrb	r3, [r3, #0]
    2a34:	2b7f      	cmp	r3, #127	; 0x7f
    2a36:	d80e      	bhi.n	2a56 <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a38:	4909      	ldr	r1, [pc, #36]	; (2a60 <__NVIC_DisableIRQ+0x3c>)
    2a3a:	1dfb      	adds	r3, r7, #7
    2a3c:	781b      	ldrb	r3, [r3, #0]
    2a3e:	001a      	movs	r2, r3
    2a40:	231f      	movs	r3, #31
    2a42:	4013      	ands	r3, r2
    2a44:	2201      	movs	r2, #1
    2a46:	409a      	lsls	r2, r3
    2a48:	0013      	movs	r3, r2
    2a4a:	2280      	movs	r2, #128	; 0x80
    2a4c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    2a4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a52:	f3bf 8f6f 	isb	sy
}
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	46bd      	mov	sp, r7
    2a5a:	b002      	add	sp, #8
    2a5c:	bd80      	pop	{r7, pc}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	e000e100 	.word	0xe000e100

00002a64 <__NVIC_ClearPendingIRQ>:
{
    2a64:	b580      	push	{r7, lr}
    2a66:	b082      	sub	sp, #8
    2a68:	af00      	add	r7, sp, #0
    2a6a:	0002      	movs	r2, r0
    2a6c:	1dfb      	adds	r3, r7, #7
    2a6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    2a70:	1dfb      	adds	r3, r7, #7
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	2b7f      	cmp	r3, #127	; 0x7f
    2a76:	d80a      	bhi.n	2a8e <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a78:	4907      	ldr	r1, [pc, #28]	; (2a98 <__NVIC_ClearPendingIRQ+0x34>)
    2a7a:	1dfb      	adds	r3, r7, #7
    2a7c:	781b      	ldrb	r3, [r3, #0]
    2a7e:	001a      	movs	r2, r3
    2a80:	231f      	movs	r3, #31
    2a82:	4013      	ands	r3, r2
    2a84:	2201      	movs	r2, #1
    2a86:	409a      	lsls	r2, r3
    2a88:	23c0      	movs	r3, #192	; 0xc0
    2a8a:	005b      	lsls	r3, r3, #1
    2a8c:	50ca      	str	r2, [r1, r3]
}
    2a8e:	46c0      	nop			; (mov r8, r8)
    2a90:	46bd      	mov	sp, r7
    2a92:	b002      	add	sp, #8
    2a94:	bd80      	pop	{r7, pc}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	e000e100 	.word	0xe000e100

00002a9c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intenset_reg_t;
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    2a9c:	b580      	push	{r7, lr}
    2a9e:	b082      	sub	sp, #8
    2aa0:	af00      	add	r7, sp, #0
    2aa2:	6078      	str	r0, [r7, #4]
    2aa4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2aa6:	46c0      	nop			; (mov r8, r8)
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	69db      	ldr	r3, [r3, #28]
    2aac:	683a      	ldr	r2, [r7, #0]
    2aae:	4013      	ands	r3, r2
    2ab0:	d1fa      	bne.n	2aa8 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	46bd      	mov	sp, r7
    2ab6:	b002      	add	sp, #8
    2ab8:	bd80      	pop	{r7, pc}

00002aba <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    2aba:	b580      	push	{r7, lr}
    2abc:	b082      	sub	sp, #8
    2abe:	af00      	add	r7, sp, #0
    2ac0:	6078      	str	r0, [r7, #4]
    2ac2:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    2ac4:	687b      	ldr	r3, [r7, #4]
    2ac6:	69db      	ldr	r3, [r3, #28]
    2ac8:	683a      	ldr	r2, [r7, #0]
    2aca:	4013      	ands	r3, r2
    2acc:	1e5a      	subs	r2, r3, #1
    2ace:	4193      	sbcs	r3, r2
    2ad0:	b2db      	uxtb	r3, r3
}
    2ad2:	0018      	movs	r0, r3
    2ad4:	46bd      	mov	sp, r7
    2ad6:	b002      	add	sp, #8
    2ad8:	bd80      	pop	{r7, pc}

00002ada <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2ada:	b580      	push	{r7, lr}
    2adc:	b082      	sub	sp, #8
    2ade:	af00      	add	r7, sp, #0
    2ae0:	6078      	str	r0, [r7, #4]
    2ae2:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2ae4:	46c0      	nop			; (mov r8, r8)
    2ae6:	687b      	ldr	r3, [r7, #4]
    2ae8:	69db      	ldr	r3, [r3, #28]
    2aea:	683a      	ldr	r2, [r7, #0]
    2aec:	4013      	ands	r3, r2
    2aee:	d1fa      	bne.n	2ae6 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    2af0:	46c0      	nop			; (mov r8, r8)
    2af2:	46bd      	mov	sp, r7
    2af4:	b002      	add	sp, #8
    2af6:	bd80      	pop	{r7, pc}

00002af8 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2af8:	b580      	push	{r7, lr}
    2afa:	b082      	sub	sp, #8
    2afc:	af00      	add	r7, sp, #0
    2afe:	6078      	str	r0, [r7, #4]
    2b00:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	69db      	ldr	r3, [r3, #28]
    2b06:	683a      	ldr	r2, [r7, #0]
    2b08:	4013      	ands	r3, r2
    2b0a:	1e5a      	subs	r2, r3, #1
    2b0c:	4193      	sbcs	r3, r2
    2b0e:	b2db      	uxtb	r3, r3
}
    2b10:	0018      	movs	r0, r3
    2b12:	46bd      	mov	sp, r7
    2b14:	b002      	add	sp, #8
    2b16:	bd80      	pop	{r7, pc}

00002b18 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	b082      	sub	sp, #8
    2b1c:	af00      	add	r7, sp, #0
    2b1e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	2201      	movs	r2, #1
    2b24:	761a      	strb	r2, [r3, #24]
}
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	46bd      	mov	sp, r7
    2b2a:	b002      	add	sp, #8
    2b2c:	bd80      	pop	{r7, pc}

00002b2e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    2b2e:	b580      	push	{r7, lr}
    2b30:	b082      	sub	sp, #8
    2b32:	af00      	add	r7, sp, #0
    2b34:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	2202      	movs	r2, #2
    2b3a:	761a      	strb	r2, [r3, #24]
}
    2b3c:	46c0      	nop			; (mov r8, r8)
    2b3e:	46bd      	mov	sp, r7
    2b40:	b002      	add	sp, #8
    2b42:	bd80      	pop	{r7, pc}

00002b44 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    2b44:	b580      	push	{r7, lr}
    2b46:	b082      	sub	sp, #8
    2b48:	af00      	add	r7, sp, #0
    2b4a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	7e1b      	ldrb	r3, [r3, #24]
    2b50:	b2db      	uxtb	r3, r3
}
    2b52:	0018      	movs	r0, r3
    2b54:	46bd      	mov	sp, r7
    2b56:	b002      	add	sp, #8
    2b58:	bd80      	pop	{r7, pc}

00002b5a <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    2b5a:	b580      	push	{r7, lr}
    2b5c:	b082      	sub	sp, #8
    2b5e:	af00      	add	r7, sp, #0
    2b60:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	7e1b      	ldrb	r3, [r3, #24]
    2b66:	b2db      	uxtb	r3, r3
    2b68:	001a      	movs	r2, r3
    2b6a:	2301      	movs	r3, #1
    2b6c:	4013      	ands	r3, r2
    2b6e:	1e5a      	subs	r2, r3, #1
    2b70:	4193      	sbcs	r3, r2
    2b72:	b2db      	uxtb	r3, r3
}
    2b74:	0018      	movs	r0, r3
    2b76:	46bd      	mov	sp, r7
    2b78:	b002      	add	sp, #8
    2b7a:	bd80      	pop	{r7, pc}

00002b7c <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    2b7c:	b580      	push	{r7, lr}
    2b7e:	b082      	sub	sp, #8
    2b80:	af00      	add	r7, sp, #0
    2b82:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	7e1b      	ldrb	r3, [r3, #24]
    2b88:	b2db      	uxtb	r3, r3
    2b8a:	085b      	lsrs	r3, r3, #1
    2b8c:	2201      	movs	r2, #1
    2b8e:	4013      	ands	r3, r2
    2b90:	1e5a      	subs	r2, r3, #1
    2b92:	4193      	sbcs	r3, r2
    2b94:	b2db      	uxtb	r3, r3
}
    2b96:	0018      	movs	r0, r3
    2b98:	46bd      	mov	sp, r7
    2b9a:	b002      	add	sp, #8
    2b9c:	bd80      	pop	{r7, pc}

00002b9e <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    2b9e:	b580      	push	{r7, lr}
    2ba0:	b082      	sub	sp, #8
    2ba2:	af00      	add	r7, sp, #0
    2ba4:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	7e1b      	ldrb	r3, [r3, #24]
    2baa:	b2db      	uxtb	r3, r3
    2bac:	089b      	lsrs	r3, r3, #2
    2bae:	2201      	movs	r2, #1
    2bb0:	4013      	ands	r3, r2
    2bb2:	1e5a      	subs	r2, r3, #1
    2bb4:	4193      	sbcs	r3, r2
    2bb6:	b2db      	uxtb	r3, r3
}
    2bb8:	0018      	movs	r0, r3
    2bba:	46bd      	mov	sp, r7
    2bbc:	b002      	add	sp, #8
    2bbe:	bd80      	pop	{r7, pc}

00002bc0 <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    2bc0:	b580      	push	{r7, lr}
    2bc2:	b082      	sub	sp, #8
    2bc4:	af00      	add	r7, sp, #0
    2bc6:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	7e1b      	ldrb	r3, [r3, #24]
    2bcc:	b2db      	uxtb	r3, r3
    2bce:	09db      	lsrs	r3, r3, #7
    2bd0:	2201      	movs	r2, #1
    2bd2:	4013      	ands	r3, r2
    2bd4:	1e5a      	subs	r2, r3, #1
    2bd6:	4193      	sbcs	r3, r2
    2bd8:	b2db      	uxtb	r3, r3
}
    2bda:	0018      	movs	r0, r3
    2bdc:	46bd      	mov	sp, r7
    2bde:	b002      	add	sp, #8
    2be0:	bd80      	pop	{r7, pc}

00002be2 <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    2be2:	b580      	push	{r7, lr}
    2be4:	b082      	sub	sp, #8
    2be6:	af00      	add	r7, sp, #0
    2be8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	2280      	movs	r2, #128	; 0x80
    2bee:	761a      	strb	r2, [r3, #24]
}
    2bf0:	46c0      	nop			; (mov r8, r8)
    2bf2:	46bd      	mov	sp, r7
    2bf4:	b002      	add	sp, #8
    2bf6:	bd80      	pop	{r7, pc}

00002bf8 <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    2bf8:	b580      	push	{r7, lr}
    2bfa:	b082      	sub	sp, #8
    2bfc:	af00      	add	r7, sp, #0
    2bfe:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	2201      	movs	r2, #1
    2c04:	759a      	strb	r2, [r3, #22]
}
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	46bd      	mov	sp, r7
    2c0a:	b002      	add	sp, #8
    2c0c:	bd80      	pop	{r7, pc}

00002c0e <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    2c0e:	b580      	push	{r7, lr}
    2c10:	b082      	sub	sp, #8
    2c12:	af00      	add	r7, sp, #0
    2c14:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	7d9b      	ldrb	r3, [r3, #22]
    2c1a:	b2db      	uxtb	r3, r3
    2c1c:	001a      	movs	r2, r3
    2c1e:	2301      	movs	r3, #1
    2c20:	4013      	ands	r3, r2
    2c22:	1e5a      	subs	r2, r3, #1
    2c24:	4193      	sbcs	r3, r2
    2c26:	b2db      	uxtb	r3, r3
}
    2c28:	0018      	movs	r0, r3
    2c2a:	46bd      	mov	sp, r7
    2c2c:	b002      	add	sp, #8
    2c2e:	bd80      	pop	{r7, pc}

00002c30 <hri_sercomusart_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	b082      	sub	sp, #8
    2c34:	af00      	add	r7, sp, #0
    2c36:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	2201      	movs	r2, #1
    2c3c:	751a      	strb	r2, [r3, #20]
}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	46bd      	mov	sp, r7
    2c42:	b002      	add	sp, #8
    2c44:	bd80      	pop	{r7, pc}

00002c46 <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    2c46:	b580      	push	{r7, lr}
    2c48:	b082      	sub	sp, #8
    2c4a:	af00      	add	r7, sp, #0
    2c4c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	2202      	movs	r2, #2
    2c52:	759a      	strb	r2, [r3, #22]
}
    2c54:	46c0      	nop			; (mov r8, r8)
    2c56:	46bd      	mov	sp, r7
    2c58:	b002      	add	sp, #8
    2c5a:	bd80      	pop	{r7, pc}

00002c5c <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b082      	sub	sp, #8
    2c60:	af00      	add	r7, sp, #0
    2c62:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2c64:	687b      	ldr	r3, [r7, #4]
    2c66:	7d9b      	ldrb	r3, [r3, #22]
    2c68:	b2db      	uxtb	r3, r3
    2c6a:	085b      	lsrs	r3, r3, #1
    2c6c:	2201      	movs	r2, #1
    2c6e:	4013      	ands	r3, r2
    2c70:	1e5a      	subs	r2, r3, #1
    2c72:	4193      	sbcs	r3, r2
    2c74:	b2db      	uxtb	r3, r3
}
    2c76:	0018      	movs	r0, r3
    2c78:	46bd      	mov	sp, r7
    2c7a:	b002      	add	sp, #8
    2c7c:	bd80      	pop	{r7, pc}

00002c7e <hri_sercomusart_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    2c7e:	b580      	push	{r7, lr}
    2c80:	b082      	sub	sp, #8
    2c82:	af00      	add	r7, sp, #0
    2c84:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	2202      	movs	r2, #2
    2c8a:	751a      	strb	r2, [r3, #20]
}
    2c8c:	46c0      	nop			; (mov r8, r8)
    2c8e:	46bd      	mov	sp, r7
    2c90:	b002      	add	sp, #8
    2c92:	bd80      	pop	{r7, pc}

00002c94 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2c94:	b580      	push	{r7, lr}
    2c96:	b082      	sub	sp, #8
    2c98:	af00      	add	r7, sp, #0
    2c9a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	681b      	ldr	r3, [r3, #0]
    2ca0:	2202      	movs	r2, #2
    2ca2:	4393      	bics	r3, r2
    2ca4:	001a      	movs	r2, r3
    2ca6:	687b      	ldr	r3, [r7, #4]
    2ca8:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	2103      	movs	r1, #3
    2cae:	0018      	movs	r0, r3
    2cb0:	4b02      	ldr	r3, [pc, #8]	; (2cbc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x28>)
    2cb2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2cb4:	46c0      	nop			; (mov r8, r8)
    2cb6:	46bd      	mov	sp, r7
    2cb8:	b002      	add	sp, #8
    2cba:	bd80      	pop	{r7, pc}
    2cbc:	00002a9d 	.word	0x00002a9d

00002cc0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    2cc0:	b580      	push	{r7, lr}
    2cc2:	b084      	sub	sp, #16
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	681b      	ldr	r3, [r3, #0]
    2ccc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2cce:	68fb      	ldr	r3, [r7, #12]
    2cd0:	0edb      	lsrs	r3, r3, #27
    2cd2:	2201      	movs	r2, #1
    2cd4:	4013      	ands	r3, r2
    2cd6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    2cd8:	68fb      	ldr	r3, [r7, #12]
    2cda:	1e5a      	subs	r2, r3, #1
    2cdc:	4193      	sbcs	r3, r2
    2cde:	b2db      	uxtb	r3, r3
}
    2ce0:	0018      	movs	r0, r3
    2ce2:	46bd      	mov	sp, r7
    2ce4:	b004      	add	sp, #16
    2ce6:	bd80      	pop	{r7, pc}

00002ce8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    2ce8:	b580      	push	{r7, lr}
    2cea:	b084      	sub	sp, #16
    2cec:	af00      	add	r7, sp, #0
    2cee:	6078      	str	r0, [r7, #4]
    2cf0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	2103      	movs	r1, #3
    2cf6:	0018      	movs	r0, r3
    2cf8:	4b06      	ldr	r3, [pc, #24]	; (2d14 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    2cfa:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2d02:	68fb      	ldr	r3, [r7, #12]
    2d04:	683a      	ldr	r2, [r7, #0]
    2d06:	4013      	ands	r3, r2
    2d08:	60fb      	str	r3, [r7, #12]
	return tmp;
    2d0a:	68fb      	ldr	r3, [r7, #12]
}
    2d0c:	0018      	movs	r0, r3
    2d0e:	46bd      	mov	sp, r7
    2d10:	b004      	add	sp, #16
    2d12:	bd80      	pop	{r7, pc}
    2d14:	00002a9d 	.word	0x00002a9d

00002d18 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	b082      	sub	sp, #8
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
    2d20:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	683a      	ldr	r2, [r7, #0]
    2d26:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	2103      	movs	r1, #3
    2d2c:	0018      	movs	r0, r3
    2d2e:	4b03      	ldr	r3, [pc, #12]	; (2d3c <hri_sercomi2cm_write_CTRLA_reg+0x24>)
    2d30:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	46bd      	mov	sp, r7
    2d36:	b002      	add	sp, #8
    2d38:	bd80      	pop	{r7, pc}
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	00002a9d 	.word	0x00002a9d

00002d40 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2d40:	b580      	push	{r7, lr}
    2d42:	b082      	sub	sp, #8
    2d44:	af00      	add	r7, sp, #0
    2d46:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	681b      	ldr	r3, [r3, #0]
    2d4c:	2202      	movs	r2, #2
    2d4e:	4393      	bics	r3, r2
    2d50:	001a      	movs	r2, r3
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	2103      	movs	r1, #3
    2d5a:	0018      	movs	r0, r3
    2d5c:	4b02      	ldr	r3, [pc, #8]	; (2d68 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    2d5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d60:	46c0      	nop			; (mov r8, r8)
    2d62:	46bd      	mov	sp, r7
    2d64:	b002      	add	sp, #8
    2d66:	bd80      	pop	{r7, pc}
    2d68:	00002adb 	.word	0x00002adb

00002d6c <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    2d6c:	b580      	push	{r7, lr}
    2d6e:	b084      	sub	sp, #16
    2d70:	af00      	add	r7, sp, #0
    2d72:	6078      	str	r0, [r7, #4]
    2d74:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2d76:	687b      	ldr	r3, [r7, #4]
    2d78:	2103      	movs	r1, #3
    2d7a:	0018      	movs	r0, r3
    2d7c:	4b06      	ldr	r3, [pc, #24]	; (2d98 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    2d7e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	681b      	ldr	r3, [r3, #0]
    2d84:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2d86:	68fb      	ldr	r3, [r7, #12]
    2d88:	683a      	ldr	r2, [r7, #0]
    2d8a:	4013      	ands	r3, r2
    2d8c:	60fb      	str	r3, [r7, #12]
	return tmp;
    2d8e:	68fb      	ldr	r3, [r7, #12]
}
    2d90:	0018      	movs	r0, r3
    2d92:	46bd      	mov	sp, r7
    2d94:	b004      	add	sp, #16
    2d96:	bd80      	pop	{r7, pc}
    2d98:	00002adb 	.word	0x00002adb

00002d9c <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b082      	sub	sp, #8
    2da0:	af00      	add	r7, sp, #0
    2da2:	6078      	str	r0, [r7, #4]
    2da4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	683a      	ldr	r2, [r7, #0]
    2daa:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	2103      	movs	r1, #3
    2db0:	0018      	movs	r0, r3
    2db2:	4b03      	ldr	r3, [pc, #12]	; (2dc0 <hri_sercomusart_write_CTRLA_reg+0x24>)
    2db4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	46bd      	mov	sp, r7
    2dba:	b002      	add	sp, #8
    2dbc:	bd80      	pop	{r7, pc}
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	00002adb 	.word	0x00002adb

00002dc4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	b082      	sub	sp, #8
    2dc8:	af00      	add	r7, sp, #0
    2dca:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	685b      	ldr	r3, [r3, #4]
    2dd0:	2280      	movs	r2, #128	; 0x80
    2dd2:	0052      	lsls	r2, r2, #1
    2dd4:	431a      	orrs	r2, r3
    2dd6:	687b      	ldr	r3, [r7, #4]
    2dd8:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2dda:	687b      	ldr	r3, [r7, #4]
    2ddc:	2104      	movs	r1, #4
    2dde:	0018      	movs	r0, r3
    2de0:	4b02      	ldr	r3, [pc, #8]	; (2dec <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x28>)
    2de2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2de4:	46c0      	nop			; (mov r8, r8)
    2de6:	46bd      	mov	sp, r7
    2de8:	b002      	add	sp, #8
    2dea:	bd80      	pop	{r7, pc}
    2dec:	00002a9d 	.word	0x00002a9d

00002df0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	b082      	sub	sp, #8
    2df4:	af00      	add	r7, sp, #0
    2df6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    2df8:	687b      	ldr	r3, [r7, #4]
    2dfa:	685b      	ldr	r3, [r3, #4]
    2dfc:	4a06      	ldr	r2, [pc, #24]	; (2e18 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x28>)
    2dfe:	401a      	ands	r2, r3
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2e04:	687b      	ldr	r3, [r7, #4]
    2e06:	2104      	movs	r1, #4
    2e08:	0018      	movs	r0, r3
    2e0a:	4b04      	ldr	r3, [pc, #16]	; (2e1c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x2c>)
    2e0c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	46bd      	mov	sp, r7
    2e12:	b002      	add	sp, #8
    2e14:	bd80      	pop	{r7, pc}
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	fffffeff 	.word	0xfffffeff
    2e1c:	00002a9d 	.word	0x00002a9d

00002e20 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    2e20:	b580      	push	{r7, lr}
    2e22:	b082      	sub	sp, #8
    2e24:	af00      	add	r7, sp, #0
    2e26:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	685b      	ldr	r3, [r3, #4]
    2e2c:	2280      	movs	r2, #128	; 0x80
    2e2e:	02d2      	lsls	r2, r2, #11
    2e30:	431a      	orrs	r2, r3
    2e32:	687b      	ldr	r3, [r7, #4]
    2e34:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2e36:	687b      	ldr	r3, [r7, #4]
    2e38:	2104      	movs	r1, #4
    2e3a:	0018      	movs	r0, r3
    2e3c:	4b02      	ldr	r3, [pc, #8]	; (2e48 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x28>)
    2e3e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2e40:	46c0      	nop			; (mov r8, r8)
    2e42:	46bd      	mov	sp, r7
    2e44:	b002      	add	sp, #8
    2e46:	bd80      	pop	{r7, pc}
    2e48:	00002a9d 	.word	0x00002a9d

00002e4c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	b082      	sub	sp, #8
    2e50:	af00      	add	r7, sp, #0
    2e52:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2e54:	687b      	ldr	r3, [r7, #4]
    2e56:	685b      	ldr	r3, [r3, #4]
    2e58:	4a06      	ldr	r2, [pc, #24]	; (2e74 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x28>)
    2e5a:	401a      	ands	r2, r3
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	2104      	movs	r1, #4
    2e64:	0018      	movs	r0, r3
    2e66:	4b04      	ldr	r3, [pc, #16]	; (2e78 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x2c>)
    2e68:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	46bd      	mov	sp, r7
    2e6e:	b002      	add	sp, #8
    2e70:	bd80      	pop	{r7, pc}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	fffbffff 	.word	0xfffbffff
    2e78:	00002a9d 	.word	0x00002a9d

00002e7c <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b082      	sub	sp, #8
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
    2e84:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2e86:	687b      	ldr	r3, [r7, #4]
    2e88:	685a      	ldr	r2, [r3, #4]
    2e8a:	683b      	ldr	r3, [r7, #0]
    2e8c:	0419      	lsls	r1, r3, #16
    2e8e:	23c0      	movs	r3, #192	; 0xc0
    2e90:	029b      	lsls	r3, r3, #10
    2e92:	400b      	ands	r3, r1
    2e94:	431a      	orrs	r2, r3
    2e96:	687b      	ldr	r3, [r7, #4]
    2e98:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	2104      	movs	r1, #4
    2e9e:	0018      	movs	r0, r3
    2ea0:	4b02      	ldr	r3, [pc, #8]	; (2eac <hri_sercomi2cm_set_CTRLB_CMD_bf+0x30>)
    2ea2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2ea4:	46c0      	nop			; (mov r8, r8)
    2ea6:	46bd      	mov	sp, r7
    2ea8:	b002      	add	sp, #8
    2eaa:	bd80      	pop	{r7, pc}
    2eac:	00002a9d 	.word	0x00002a9d

00002eb0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	b082      	sub	sp, #8
    2eb4:	af00      	add	r7, sp, #0
    2eb6:	6078      	str	r0, [r7, #4]
    2eb8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	683a      	ldr	r2, [r7, #0]
    2ebe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	2104      	movs	r1, #4
    2ec4:	0018      	movs	r0, r3
    2ec6:	4b03      	ldr	r3, [pc, #12]	; (2ed4 <hri_sercomi2cm_write_CTRLB_reg+0x24>)
    2ec8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	46bd      	mov	sp, r7
    2ece:	b002      	add	sp, #8
    2ed0:	bd80      	pop	{r7, pc}
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	00002a9d 	.word	0x00002a9d

00002ed8 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    2ed8:	b580      	push	{r7, lr}
    2eda:	b082      	sub	sp, #8
    2edc:	af00      	add	r7, sp, #0
    2ede:	6078      	str	r0, [r7, #4]
    2ee0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2ee2:	687b      	ldr	r3, [r7, #4]
    2ee4:	683a      	ldr	r2, [r7, #0]
    2ee6:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	2107      	movs	r1, #7
    2eec:	0018      	movs	r0, r3
    2eee:	4b03      	ldr	r3, [pc, #12]	; (2efc <hri_sercomusart_write_CTRLB_reg+0x24>)
    2ef0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	46bd      	mov	sp, r7
    2ef6:	b002      	add	sp, #8
    2ef8:	bd80      	pop	{r7, pc}
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	00002adb 	.word	0x00002adb

00002f00 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	b082      	sub	sp, #8
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
    2f08:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	683a      	ldr	r2, [r7, #0]
    2f0e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2f10:	46c0      	nop			; (mov r8, r8)
    2f12:	46bd      	mov	sp, r7
    2f14:	b002      	add	sp, #8
    2f16:	bd80      	pop	{r7, pc}

00002f18 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	b082      	sub	sp, #8
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	6078      	str	r0, [r7, #4]
    2f20:	000a      	movs	r2, r1
    2f22:	1cbb      	adds	r3, r7, #2
    2f24:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    2f26:	687b      	ldr	r3, [r7, #4]
    2f28:	1cba      	adds	r2, r7, #2
    2f2a:	8812      	ldrh	r2, [r2, #0]
    2f2c:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	46bd      	mov	sp, r7
    2f32:	b002      	add	sp, #8
    2f34:	bd80      	pop	{r7, pc}

00002f36 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    2f36:	b580      	push	{r7, lr}
    2f38:	b082      	sub	sp, #8
    2f3a:	af00      	add	r7, sp, #0
    2f3c:	6078      	str	r0, [r7, #4]
    2f3e:	000a      	movs	r2, r1
    2f40:	1cfb      	adds	r3, r7, #3
    2f42:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	1cfa      	adds	r2, r7, #3
    2f48:	7812      	ldrb	r2, [r2, #0]
    2f4a:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2f4c:	46c0      	nop			; (mov r8, r8)
    2f4e:	46bd      	mov	sp, r7
    2f50:	b002      	add	sp, #8
    2f52:	bd80      	pop	{r7, pc}

00002f54 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    2f54:	b580      	push	{r7, lr}
    2f56:	b084      	sub	sp, #16
    2f58:	af00      	add	r7, sp, #0
    2f5a:	6078      	str	r0, [r7, #4]
    2f5c:	000a      	movs	r2, r1
    2f5e:	1cfb      	adds	r3, r7, #3
    2f60:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    2f62:	687b      	ldr	r3, [r7, #4]
    2f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f66:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    2f68:	68fb      	ldr	r3, [r7, #12]
    2f6a:	4a0b      	ldr	r2, [pc, #44]	; (2f98 <hri_sercomi2cm_write_ADDR_HS_bit+0x44>)
    2f6c:	4013      	ands	r3, r2
    2f6e:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    2f70:	1cfb      	adds	r3, r7, #3
    2f72:	781b      	ldrb	r3, [r3, #0]
    2f74:	039b      	lsls	r3, r3, #14
    2f76:	001a      	movs	r2, r3
    2f78:	68fb      	ldr	r3, [r7, #12]
    2f7a:	4313      	orrs	r3, r2
    2f7c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    2f7e:	687b      	ldr	r3, [r7, #4]
    2f80:	68fa      	ldr	r2, [r7, #12]
    2f82:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	2104      	movs	r1, #4
    2f88:	0018      	movs	r0, r3
    2f8a:	4b04      	ldr	r3, [pc, #16]	; (2f9c <hri_sercomi2cm_write_ADDR_HS_bit+0x48>)
    2f8c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	46bd      	mov	sp, r7
    2f92:	b004      	add	sp, #16
    2f94:	bd80      	pop	{r7, pc}
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	ffffbfff 	.word	0xffffbfff
    2f9c:	00002a9d 	.word	0x00002a9d

00002fa0 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b082      	sub	sp, #8
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
    2fa8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	683a      	ldr	r2, [r7, #0]
    2fae:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	2104      	movs	r1, #4
    2fb4:	0018      	movs	r0, r3
    2fb6:	4b03      	ldr	r3, [pc, #12]	; (2fc4 <hri_sercomi2cm_write_ADDR_reg+0x24>)
    2fb8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	46bd      	mov	sp, r7
    2fbe:	b002      	add	sp, #8
    2fc0:	bd80      	pop	{r7, pc}
    2fc2:	46c0      	nop			; (mov r8, r8)
    2fc4:	00002a9d 	.word	0x00002a9d

00002fc8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    2fc8:	b580      	push	{r7, lr}
    2fca:	b082      	sub	sp, #8
    2fcc:	af00      	add	r7, sp, #0
    2fce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	2104      	movs	r1, #4
    2fd4:	0018      	movs	r0, r3
    2fd6:	4b04      	ldr	r3, [pc, #16]	; (2fe8 <hri_sercomi2cm_read_ADDR_reg+0x20>)
    2fd8:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    2fde:	0018      	movs	r0, r3
    2fe0:	46bd      	mov	sp, r7
    2fe2:	b002      	add	sp, #8
    2fe4:	bd80      	pop	{r7, pc}
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	00002a9d 	.word	0x00002a9d

00002fec <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    2fec:	b580      	push	{r7, lr}
    2fee:	b082      	sub	sp, #8
    2ff0:	af00      	add	r7, sp, #0
    2ff2:	6078      	str	r0, [r7, #4]
    2ff4:	000a      	movs	r2, r1
    2ff6:	1cfb      	adds	r3, r7, #3
    2ff8:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	1cfa      	adds	r2, r7, #3
    2ffe:	2128      	movs	r1, #40	; 0x28
    3000:	7812      	ldrb	r2, [r2, #0]
    3002:	545a      	strb	r2, [r3, r1]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	2104      	movs	r1, #4
    3008:	0018      	movs	r0, r3
    300a:	4b03      	ldr	r3, [pc, #12]	; (3018 <hri_sercomi2cm_write_DATA_reg+0x2c>)
    300c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	46bd      	mov	sp, r7
    3012:	b002      	add	sp, #8
    3014:	bd80      	pop	{r7, pc}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	00002a9d 	.word	0x00002a9d

0000301c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    301c:	b580      	push	{r7, lr}
    301e:	b082      	sub	sp, #8
    3020:	af00      	add	r7, sp, #0
    3022:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	2104      	movs	r1, #4
    3028:	0018      	movs	r0, r3
    302a:	4b05      	ldr	r3, [pc, #20]	; (3040 <hri_sercomi2cm_read_DATA_reg+0x24>)
    302c:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    302e:	687b      	ldr	r3, [r7, #4]
    3030:	2228      	movs	r2, #40	; 0x28
    3032:	5c9b      	ldrb	r3, [r3, r2]
    3034:	b2db      	uxtb	r3, r3
}
    3036:	0018      	movs	r0, r3
    3038:	46bd      	mov	sp, r7
    303a:	b002      	add	sp, #8
    303c:	bd80      	pop	{r7, pc}
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	00002a9d 	.word	0x00002a9d

00003044 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    3044:	b580      	push	{r7, lr}
    3046:	b082      	sub	sp, #8
    3048:	af00      	add	r7, sp, #0
    304a:	6078      	str	r0, [r7, #4]
    304c:	000a      	movs	r2, r1
    304e:	1cbb      	adds	r3, r7, #2
    3050:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    3052:	687b      	ldr	r3, [r7, #4]
    3054:	1cba      	adds	r2, r7, #2
    3056:	8812      	ldrh	r2, [r2, #0]
    3058:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	46bd      	mov	sp, r7
    305e:	b002      	add	sp, #8
    3060:	bd80      	pop	{r7, pc}

00003062 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    3062:	b580      	push	{r7, lr}
    3064:	b082      	sub	sp, #8
    3066:	af00      	add	r7, sp, #0
    3068:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    306e:	b29b      	uxth	r3, r3
}
    3070:	0018      	movs	r0, r3
    3072:	46bd      	mov	sp, r7
    3074:	b002      	add	sp, #8
    3076:	bd80      	pop	{r7, pc}

00003078 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    3078:	b580      	push	{r7, lr}
    307a:	b082      	sub	sp, #8
    307c:	af00      	add	r7, sp, #0
    307e:	6078      	str	r0, [r7, #4]
    3080:	000a      	movs	r2, r1
    3082:	1cfb      	adds	r3, r7, #3
    3084:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3086:	687b      	ldr	r3, [r7, #4]
    3088:	1cfa      	adds	r2, r7, #3
    308a:	2130      	movs	r1, #48	; 0x30
    308c:	7812      	ldrb	r2, [r2, #0]
    308e:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3090:	46c0      	nop			; (mov r8, r8)
    3092:	46bd      	mov	sp, r7
    3094:	b002      	add	sp, #8
    3096:	bd80      	pop	{r7, pc}

00003098 <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    3098:	b580      	push	{r7, lr}
    309a:	b082      	sub	sp, #8
    309c:	af00      	add	r7, sp, #0
    309e:	6078      	str	r0, [r7, #4]
    30a0:	000a      	movs	r2, r1
    30a2:	1cbb      	adds	r3, r7, #2
    30a4:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    30a6:	687b      	ldr	r3, [r7, #4]
    30a8:	1cba      	adds	r2, r7, #2
    30aa:	8812      	ldrh	r2, [r2, #0]
    30ac:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	46bd      	mov	sp, r7
    30b2:	b002      	add	sp, #8
    30b4:	bd80      	pop	{r7, pc}

000030b6 <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    30b6:	b580      	push	{r7, lr}
    30b8:	b082      	sub	sp, #8
    30ba:	af00      	add	r7, sp, #0
    30bc:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	8b5b      	ldrh	r3, [r3, #26]
    30c2:	b29b      	uxth	r3, r3
}
    30c4:	0018      	movs	r0, r3
    30c6:	46bd      	mov	sp, r7
    30c8:	b002      	add	sp, #8
    30ca:	bd80      	pop	{r7, pc}

000030cc <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    30cc:	b580      	push	{r7, lr}
    30ce:	b082      	sub	sp, #8
    30d0:	af00      	add	r7, sp, #0
    30d2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	2104      	movs	r1, #4
    30d8:	0018      	movs	r0, r3
    30da:	4b04      	ldr	r3, [pc, #16]	; (30ec <hri_sercomi2cm_read_STATUS_reg+0x20>)
    30dc:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	8b5b      	ldrh	r3, [r3, #26]
    30e2:	b29b      	uxth	r3, r3
}
    30e4:	0018      	movs	r0, r3
    30e6:	46bd      	mov	sp, r7
    30e8:	b002      	add	sp, #8
    30ea:	bd80      	pop	{r7, pc}
    30ec:	00002a9d 	.word	0x00002a9d

000030f0 <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    30f0:	b580      	push	{r7, lr}
    30f2:	b084      	sub	sp, #16
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
    30f8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	1e5a      	subs	r2, r3, #1
    30fe:	4193      	sbcs	r3, r2
    3100:	b2db      	uxtb	r3, r3
    3102:	491c      	ldr	r1, [pc, #112]	; (3174 <_usart_async_init+0x84>)
    3104:	22c8      	movs	r2, #200	; 0xc8
    3106:	0018      	movs	r0, r3
    3108:	4b1b      	ldr	r3, [pc, #108]	; (3178 <_usart_async_init+0x88>)
    310a:	4798      	blx	r3

	init_status = _usart_init(hw);
    310c:	683b      	ldr	r3, [r7, #0]
    310e:	0018      	movs	r0, r3
    3110:	4b1a      	ldr	r3, [pc, #104]	; (317c <_usart_async_init+0x8c>)
    3112:	4798      	blx	r3
    3114:	0003      	movs	r3, r0
    3116:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	2b00      	cmp	r3, #0
    311c:	d001      	beq.n	3122 <_usart_async_init+0x32>
		return init_status;
    311e:	68fb      	ldr	r3, [r7, #12]
    3120:	e024      	b.n	316c <_usart_async_init+0x7c>
	}
	device->hw = hw;
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	683a      	ldr	r2, [r7, #0]
    3126:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    3128:	687a      	ldr	r2, [r7, #4]
    312a:	683b      	ldr	r3, [r7, #0]
    312c:	0011      	movs	r1, r2
    312e:	0018      	movs	r0, r3
    3130:	4b13      	ldr	r3, [pc, #76]	; (3180 <_usart_async_init+0x90>)
    3132:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    3134:	683b      	ldr	r3, [r7, #0]
    3136:	0018      	movs	r0, r3
    3138:	4b12      	ldr	r3, [pc, #72]	; (3184 <_usart_async_init+0x94>)
    313a:	4798      	blx	r3
    313c:	0003      	movs	r3, r0
    313e:	b25b      	sxtb	r3, r3
    3140:	0018      	movs	r0, r3
    3142:	4b11      	ldr	r3, [pc, #68]	; (3188 <_usart_async_init+0x98>)
    3144:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    3146:	683b      	ldr	r3, [r7, #0]
    3148:	0018      	movs	r0, r3
    314a:	4b0e      	ldr	r3, [pc, #56]	; (3184 <_usart_async_init+0x94>)
    314c:	4798      	blx	r3
    314e:	0003      	movs	r3, r0
    3150:	b25b      	sxtb	r3, r3
    3152:	0018      	movs	r0, r3
    3154:	4b0d      	ldr	r3, [pc, #52]	; (318c <_usart_async_init+0x9c>)
    3156:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    3158:	683b      	ldr	r3, [r7, #0]
    315a:	0018      	movs	r0, r3
    315c:	4b09      	ldr	r3, [pc, #36]	; (3184 <_usart_async_init+0x94>)
    315e:	4798      	blx	r3
    3160:	0003      	movs	r3, r0
    3162:	b25b      	sxtb	r3, r3
    3164:	0018      	movs	r0, r3
    3166:	4b0a      	ldr	r3, [pc, #40]	; (3190 <_usart_async_init+0xa0>)
    3168:	4798      	blx	r3

	return ERR_NONE;
    316a:	2300      	movs	r3, #0
}
    316c:	0018      	movs	r0, r3
    316e:	46bd      	mov	sp, r7
    3170:	b004      	add	sp, #16
    3172:	bd80      	pop	{r7, pc}
    3174:	00004c68 	.word	0x00004c68
    3178:	00001cf7 	.word	0x00001cf7
    317c:	00003415 	.word	0x00003415
    3180:	000033c1 	.word	0x000033c1
    3184:	00003921 	.word	0x00003921
    3188:	00002a25 	.word	0x00002a25
    318c:	00002a65 	.word	0x00002a65
    3190:	000029f1 	.word	0x000029f1

00003194 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    3194:	b580      	push	{r7, lr}
    3196:	b082      	sub	sp, #8
    3198:	af00      	add	r7, sp, #0
    319a:	6078      	str	r0, [r7, #4]
    319c:	000a      	movs	r2, r1
    319e:	1cfb      	adds	r3, r7, #3
    31a0:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	699a      	ldr	r2, [r3, #24]
    31a6:	1cfb      	adds	r3, r7, #3
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	b29b      	uxth	r3, r3
    31ac:	0019      	movs	r1, r3
    31ae:	0010      	movs	r0, r2
    31b0:	4b02      	ldr	r3, [pc, #8]	; (31bc <_usart_async_write_byte+0x28>)
    31b2:	4798      	blx	r3
}
    31b4:	46c0      	nop			; (mov r8, r8)
    31b6:	46bd      	mov	sp, r7
    31b8:	b002      	add	sp, #8
    31ba:	bd80      	pop	{r7, pc}
    31bc:	00003045 	.word	0x00003045

000031c0 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    31c0:	b580      	push	{r7, lr}
    31c2:	b082      	sub	sp, #8
    31c4:	af00      	add	r7, sp, #0
    31c6:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	699b      	ldr	r3, [r3, #24]
    31cc:	0018      	movs	r0, r3
    31ce:	4b03      	ldr	r3, [pc, #12]	; (31dc <_usart_async_enable_byte_sent_irq+0x1c>)
    31d0:	4798      	blx	r3
}
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	46bd      	mov	sp, r7
    31d6:	b002      	add	sp, #8
    31d8:	bd80      	pop	{r7, pc}
    31da:	46c0      	nop			; (mov r8, r8)
    31dc:	00002bf9 	.word	0x00002bf9

000031e0 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    31e0:	b580      	push	{r7, lr}
    31e2:	b082      	sub	sp, #8
    31e4:	af00      	add	r7, sp, #0
    31e6:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	699b      	ldr	r3, [r3, #24]
    31ec:	0018      	movs	r0, r3
    31ee:	4b03      	ldr	r3, [pc, #12]	; (31fc <_usart_async_enable_tx_done_irq+0x1c>)
    31f0:	4798      	blx	r3
}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	46bd      	mov	sp, r7
    31f6:	b002      	add	sp, #8
    31f8:	bd80      	pop	{r7, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	00002c47 	.word	0x00002c47

00003200 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3200:	b580      	push	{r7, lr}
    3202:	b082      	sub	sp, #8
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
		return 5;
	}
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	4a04      	ldr	r2, [pc, #16]	; (321c <_sercom_get_hardware_index+0x1c>)
    320c:	4694      	mov	ip, r2
    320e:	4463      	add	r3, ip
    3210:	0a9b      	lsrs	r3, r3, #10
    3212:	b2db      	uxtb	r3, r3
}
    3214:	0018      	movs	r0, r3
    3216:	46bd      	mov	sp, r7
    3218:	b002      	add	sp, #8
    321a:	bd80      	pop	{r7, pc}
    321c:	bdfff800 	.word	0xbdfff800

00003220 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    3220:	b590      	push	{r4, r7, lr}
    3222:	b085      	sub	sp, #20
    3224:	af00      	add	r7, sp, #0
    3226:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	699b      	ldr	r3, [r3, #24]
    322c:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    322e:	68fb      	ldr	r3, [r7, #12]
    3230:	0018      	movs	r0, r3
    3232:	4b35      	ldr	r3, [pc, #212]	; (3308 <_sercom_usart_interrupt_handler+0xe8>)
    3234:	4798      	blx	r3
    3236:	1e03      	subs	r3, r0, #0
    3238:	d00f      	beq.n	325a <_sercom_usart_interrupt_handler+0x3a>
    323a:	68fb      	ldr	r3, [r7, #12]
    323c:	0018      	movs	r0, r3
    323e:	4b33      	ldr	r3, [pc, #204]	; (330c <_sercom_usart_interrupt_handler+0xec>)
    3240:	4798      	blx	r3
    3242:	1e03      	subs	r3, r0, #0
    3244:	d009      	beq.n	325a <_sercom_usart_interrupt_handler+0x3a>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    3246:	68fb      	ldr	r3, [r7, #12]
    3248:	0018      	movs	r0, r3
    324a:	4b31      	ldr	r3, [pc, #196]	; (3310 <_sercom_usart_interrupt_handler+0xf0>)
    324c:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	681b      	ldr	r3, [r3, #0]
    3252:	687a      	ldr	r2, [r7, #4]
    3254:	0010      	movs	r0, r2
    3256:	4798      	blx	r3
    3258:	e053      	b.n	3302 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    325a:	68fb      	ldr	r3, [r7, #12]
    325c:	0018      	movs	r0, r3
    325e:	4b2d      	ldr	r3, [pc, #180]	; (3314 <_sercom_usart_interrupt_handler+0xf4>)
    3260:	4798      	blx	r3
    3262:	1e03      	subs	r3, r0, #0
    3264:	d00f      	beq.n	3286 <_sercom_usart_interrupt_handler+0x66>
    3266:	68fb      	ldr	r3, [r7, #12]
    3268:	0018      	movs	r0, r3
    326a:	4b2b      	ldr	r3, [pc, #172]	; (3318 <_sercom_usart_interrupt_handler+0xf8>)
    326c:	4798      	blx	r3
    326e:	1e03      	subs	r3, r0, #0
    3270:	d009      	beq.n	3286 <_sercom_usart_interrupt_handler+0x66>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    3272:	68fb      	ldr	r3, [r7, #12]
    3274:	0018      	movs	r0, r3
    3276:	4b29      	ldr	r3, [pc, #164]	; (331c <_sercom_usart_interrupt_handler+0xfc>)
    3278:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	689b      	ldr	r3, [r3, #8]
    327e:	687a      	ldr	r2, [r7, #4]
    3280:	0010      	movs	r0, r2
    3282:	4798      	blx	r3
    3284:	e03d      	b.n	3302 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    3286:	68fb      	ldr	r3, [r7, #12]
    3288:	0018      	movs	r0, r3
    328a:	4b25      	ldr	r3, [pc, #148]	; (3320 <_sercom_usart_interrupt_handler+0x100>)
    328c:	4798      	blx	r3
    328e:	1e03      	subs	r3, r0, #0
    3290:	d01b      	beq.n	32ca <_sercom_usart_interrupt_handler+0xaa>
		if (hri_sercomusart_read_STATUS_reg(hw)
    3292:	68fb      	ldr	r3, [r7, #12]
    3294:	0018      	movs	r0, r3
    3296:	4b23      	ldr	r3, [pc, #140]	; (3324 <_sercom_usart_interrupt_handler+0x104>)
    3298:	4798      	blx	r3
    329a:	0003      	movs	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    329c:	001a      	movs	r2, r3
    329e:	2337      	movs	r3, #55	; 0x37
    32a0:	4013      	ands	r3, r2
		if (hri_sercomusart_read_STATUS_reg(hw)
    32a2:	d005      	beq.n	32b0 <_sercom_usart_interrupt_handler+0x90>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    32a4:	68fb      	ldr	r3, [r7, #12]
    32a6:	213f      	movs	r1, #63	; 0x3f
    32a8:	0018      	movs	r0, r3
    32aa:	4b1f      	ldr	r3, [pc, #124]	; (3328 <_sercom_usart_interrupt_handler+0x108>)
    32ac:	4798      	blx	r3
			return;
    32ae:	e028      	b.n	3302 <_sercom_usart_interrupt_handler+0xe2>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    32b0:	687b      	ldr	r3, [r7, #4]
    32b2:	685c      	ldr	r4, [r3, #4]
    32b4:	68fb      	ldr	r3, [r7, #12]
    32b6:	0018      	movs	r0, r3
    32b8:	4b1c      	ldr	r3, [pc, #112]	; (332c <_sercom_usart_interrupt_handler+0x10c>)
    32ba:	4798      	blx	r3
    32bc:	0003      	movs	r3, r0
    32be:	b2da      	uxtb	r2, r3
    32c0:	687b      	ldr	r3, [r7, #4]
    32c2:	0011      	movs	r1, r2
    32c4:	0018      	movs	r0, r3
    32c6:	47a0      	blx	r4
    32c8:	e01b      	b.n	3302 <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    32ca:	68fb      	ldr	r3, [r7, #12]
    32cc:	0018      	movs	r0, r3
    32ce:	4b18      	ldr	r3, [pc, #96]	; (3330 <_sercom_usart_interrupt_handler+0x110>)
    32d0:	4798      	blx	r3
    32d2:	1e03      	subs	r3, r0, #0
    32d4:	d015      	beq.n	3302 <_sercom_usart_interrupt_handler+0xe2>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    32d6:	68fb      	ldr	r3, [r7, #12]
    32d8:	0018      	movs	r0, r3
    32da:	4b16      	ldr	r3, [pc, #88]	; (3334 <_sercom_usart_interrupt_handler+0x114>)
    32dc:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    32de:	687b      	ldr	r3, [r7, #4]
    32e0:	68db      	ldr	r3, [r3, #12]
    32e2:	687a      	ldr	r2, [r7, #4]
    32e4:	0010      	movs	r0, r2
    32e6:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    32e8:	68fb      	ldr	r3, [r7, #12]
    32ea:	0018      	movs	r0, r3
    32ec:	4b0d      	ldr	r3, [pc, #52]	; (3324 <_sercom_usart_interrupt_handler+0x104>)
    32ee:	4798      	blx	r3
    32f0:	0003      	movs	r3, r0
    32f2:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    32f4:	68bb      	ldr	r3, [r7, #8]
    32f6:	b29a      	uxth	r2, r3
    32f8:	68fb      	ldr	r3, [r7, #12]
    32fa:	0011      	movs	r1, r2
    32fc:	0018      	movs	r0, r3
    32fe:	4b0a      	ldr	r3, [pc, #40]	; (3328 <_sercom_usart_interrupt_handler+0x108>)
    3300:	4798      	blx	r3
	}
}
    3302:	46bd      	mov	sp, r7
    3304:	b005      	add	sp, #20
    3306:	bd90      	pop	{r4, r7, pc}
    3308:	00002b5b 	.word	0x00002b5b
    330c:	00002c0f 	.word	0x00002c0f
    3310:	00002c31 	.word	0x00002c31
    3314:	00002b7d 	.word	0x00002b7d
    3318:	00002c5d 	.word	0x00002c5d
    331c:	00002c7f 	.word	0x00002c7f
    3320:	00002b9f 	.word	0x00002b9f
    3324:	000030b7 	.word	0x000030b7
    3328:	00003099 	.word	0x00003099
    332c:	00003063 	.word	0x00003063
    3330:	00002bc1 	.word	0x00002bc1
    3334:	00002be3 	.word	0x00002be3

00003338 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    3338:	b590      	push	{r4, r7, lr}
    333a:	b085      	sub	sp, #20
    333c:	af00      	add	r7, sp, #0
    333e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3340:	230e      	movs	r3, #14
    3342:	18fc      	adds	r4, r7, r3
    3344:	687b      	ldr	r3, [r7, #4]
    3346:	0018      	movs	r0, r3
    3348:	4b18      	ldr	r3, [pc, #96]	; (33ac <_get_sercom_index+0x74>)
    334a:	4798      	blx	r3
    334c:	0003      	movs	r3, r0
    334e:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3350:	230f      	movs	r3, #15
    3352:	18fb      	adds	r3, r7, r3
    3354:	2200      	movs	r2, #0
    3356:	701a      	strb	r2, [r3, #0]
    3358:	e018      	b.n	338c <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    335a:	230f      	movs	r3, #15
    335c:	18fb      	adds	r3, r7, r3
    335e:	781a      	ldrb	r2, [r3, #0]
    3360:	4913      	ldr	r1, [pc, #76]	; (33b0 <_get_sercom_index+0x78>)
    3362:	0013      	movs	r3, r2
    3364:	009b      	lsls	r3, r3, #2
    3366:	189b      	adds	r3, r3, r2
    3368:	009b      	lsls	r3, r3, #2
    336a:	5c5b      	ldrb	r3, [r3, r1]
    336c:	220e      	movs	r2, #14
    336e:	18ba      	adds	r2, r7, r2
    3370:	7812      	ldrb	r2, [r2, #0]
    3372:	429a      	cmp	r2, r3
    3374:	d103      	bne.n	337e <_get_sercom_index+0x46>
			return i;
    3376:	230f      	movs	r3, #15
    3378:	18fb      	adds	r3, r7, r3
    337a:	781b      	ldrb	r3, [r3, #0]
    337c:	e012      	b.n	33a4 <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    337e:	230f      	movs	r3, #15
    3380:	18fb      	adds	r3, r7, r3
    3382:	781a      	ldrb	r2, [r3, #0]
    3384:	230f      	movs	r3, #15
    3386:	18fb      	adds	r3, r7, r3
    3388:	3201      	adds	r2, #1
    338a:	701a      	strb	r2, [r3, #0]
    338c:	230f      	movs	r3, #15
    338e:	18fb      	adds	r3, r7, r3
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	2b02      	cmp	r3, #2
    3394:	d9e1      	bls.n	335a <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    3396:	4a07      	ldr	r2, [pc, #28]	; (33b4 <_get_sercom_index+0x7c>)
    3398:	4b07      	ldr	r3, [pc, #28]	; (33b8 <_get_sercom_index+0x80>)
    339a:	0019      	movs	r1, r3
    339c:	2000      	movs	r0, #0
    339e:	4b07      	ldr	r3, [pc, #28]	; (33bc <_get_sercom_index+0x84>)
    33a0:	4798      	blx	r3
	return 0;
    33a2:	2300      	movs	r3, #0
}
    33a4:	0018      	movs	r0, r3
    33a6:	46bd      	mov	sp, r7
    33a8:	b005      	add	sp, #20
    33aa:	bd90      	pop	{r4, r7, pc}
    33ac:	00003201 	.word	0x00003201
    33b0:	2000001c 	.word	0x2000001c
    33b4:	00000269 	.word	0x00000269
    33b8:	00004c68 	.word	0x00004c68
    33bc:	00001cf7 	.word	0x00001cf7

000033c0 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    33c0:	b580      	push	{r7, lr}
    33c2:	b082      	sub	sp, #8
    33c4:	af00      	add	r7, sp, #0
    33c6:	6078      	str	r0, [r7, #4]
    33c8:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM0) {
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	4a0b      	ldr	r2, [pc, #44]	; (33fc <_sercom_init_irq_param+0x3c>)
    33ce:	4293      	cmp	r3, r2
    33d0:	d102      	bne.n	33d8 <_sercom_init_irq_param+0x18>
		_sercom0_dev = (struct _usart_async_device *)dev;
    33d2:	4b0b      	ldr	r3, [pc, #44]	; (3400 <_sercom_init_irq_param+0x40>)
    33d4:	683a      	ldr	r2, [r7, #0]
    33d6:	601a      	str	r2, [r3, #0]
	}

	if (hw == SERCOM4) {
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	4a0a      	ldr	r2, [pc, #40]	; (3404 <_sercom_init_irq_param+0x44>)
    33dc:	4293      	cmp	r3, r2
    33de:	d102      	bne.n	33e6 <_sercom_init_irq_param+0x26>
		_sercom4_dev = (struct _usart_async_device *)dev;
    33e0:	4b09      	ldr	r3, [pc, #36]	; (3408 <_sercom_init_irq_param+0x48>)
    33e2:	683a      	ldr	r2, [r7, #0]
    33e4:	601a      	str	r2, [r3, #0]
	}

	if (hw == SERCOM5) {
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	4a08      	ldr	r2, [pc, #32]	; (340c <_sercom_init_irq_param+0x4c>)
    33ea:	4293      	cmp	r3, r2
    33ec:	d102      	bne.n	33f4 <_sercom_init_irq_param+0x34>
		_sercom5_dev = (struct _usart_async_device *)dev;
    33ee:	4b08      	ldr	r3, [pc, #32]	; (3410 <_sercom_init_irq_param+0x50>)
    33f0:	683a      	ldr	r2, [r7, #0]
    33f2:	601a      	str	r2, [r3, #0]
	}
}
    33f4:	46c0      	nop			; (mov r8, r8)
    33f6:	46bd      	mov	sp, r7
    33f8:	b002      	add	sp, #8
    33fa:	bd80      	pop	{r7, pc}
    33fc:	42000800 	.word	0x42000800
    3400:	20000124 	.word	0x20000124
    3404:	42001800 	.word	0x42001800
    3408:	20000128 	.word	0x20000128
    340c:	42001c00 	.word	0x42001c00
    3410:	2000012c 	.word	0x2000012c

00003414 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    3414:	b590      	push	{r4, r7, lr}
    3416:	b085      	sub	sp, #20
    3418:	af00      	add	r7, sp, #0
    341a:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    341c:	230f      	movs	r3, #15
    341e:	18fc      	adds	r4, r7, r3
    3420:	687b      	ldr	r3, [r7, #4]
    3422:	0018      	movs	r0, r3
    3424:	4b6f      	ldr	r3, [pc, #444]	; (35e4 <_usart_init+0x1d0>)
    3426:	4798      	blx	r3
    3428:	0003      	movs	r3, r0
    342a:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	2101      	movs	r1, #1
    3430:	0018      	movs	r0, r3
    3432:	4b6d      	ldr	r3, [pc, #436]	; (35e8 <_usart_init+0x1d4>)
    3434:	4798      	blx	r3
    3436:	0003      	movs	r3, r0
    3438:	001a      	movs	r2, r3
    343a:	2301      	movs	r3, #1
    343c:	4053      	eors	r3, r2
    343e:	b2db      	uxtb	r3, r3
    3440:	2b00      	cmp	r3, #0
    3442:	d025      	beq.n	3490 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3444:	230f      	movs	r3, #15
    3446:	18fb      	adds	r3, r7, r3
    3448:	781a      	ldrb	r2, [r3, #0]
    344a:	4968      	ldr	r1, [pc, #416]	; (35ec <_usart_init+0x1d8>)
    344c:	0013      	movs	r3, r2
    344e:	009b      	lsls	r3, r3, #2
    3450:	189b      	adds	r3, r3, r2
    3452:	009b      	lsls	r3, r3, #2
    3454:	18cb      	adds	r3, r1, r3
    3456:	3304      	adds	r3, #4
    3458:	681b      	ldr	r3, [r3, #0]
    345a:	221c      	movs	r2, #28
    345c:	4013      	ands	r3, r2
    345e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3460:	687b      	ldr	r3, [r7, #4]
    3462:	2102      	movs	r1, #2
    3464:	0018      	movs	r0, r3
    3466:	4b62      	ldr	r3, [pc, #392]	; (35f0 <_usart_init+0x1dc>)
    3468:	4798      	blx	r3
    346a:	1e03      	subs	r3, r0, #0
    346c:	d008      	beq.n	3480 <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    346e:	687b      	ldr	r3, [r7, #4]
    3470:	0018      	movs	r0, r3
    3472:	4b60      	ldr	r3, [pc, #384]	; (35f4 <_usart_init+0x1e0>)
    3474:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    3476:	687b      	ldr	r3, [r7, #4]
    3478:	2102      	movs	r1, #2
    347a:	0018      	movs	r0, r3
    347c:	4b5e      	ldr	r3, [pc, #376]	; (35f8 <_usart_init+0x1e4>)
    347e:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    3480:	68bb      	ldr	r3, [r7, #8]
    3482:	2201      	movs	r2, #1
    3484:	431a      	orrs	r2, r3
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	0011      	movs	r1, r2
    348a:	0018      	movs	r0, r3
    348c:	4b5b      	ldr	r3, [pc, #364]	; (35fc <_usart_init+0x1e8>)
    348e:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	2101      	movs	r1, #1
    3494:	0018      	movs	r0, r3
    3496:	4b58      	ldr	r3, [pc, #352]	; (35f8 <_usart_init+0x1e4>)
    3498:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    349a:	230f      	movs	r3, #15
    349c:	18fb      	adds	r3, r7, r3
    349e:	781a      	ldrb	r2, [r3, #0]
    34a0:	4952      	ldr	r1, [pc, #328]	; (35ec <_usart_init+0x1d8>)
    34a2:	0013      	movs	r3, r2
    34a4:	009b      	lsls	r3, r3, #2
    34a6:	189b      	adds	r3, r3, r2
    34a8:	009b      	lsls	r3, r3, #2
    34aa:	18cb      	adds	r3, r1, r3
    34ac:	3304      	adds	r3, #4
    34ae:	681a      	ldr	r2, [r3, #0]
    34b0:	687b      	ldr	r3, [r7, #4]
    34b2:	0011      	movs	r1, r2
    34b4:	0018      	movs	r0, r3
    34b6:	4b51      	ldr	r3, [pc, #324]	; (35fc <_usart_init+0x1e8>)
    34b8:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    34ba:	230f      	movs	r3, #15
    34bc:	18fb      	adds	r3, r7, r3
    34be:	781a      	ldrb	r2, [r3, #0]
    34c0:	494a      	ldr	r1, [pc, #296]	; (35ec <_usart_init+0x1d8>)
    34c2:	0013      	movs	r3, r2
    34c4:	009b      	lsls	r3, r3, #2
    34c6:	189b      	adds	r3, r3, r2
    34c8:	009b      	lsls	r3, r3, #2
    34ca:	18cb      	adds	r3, r1, r3
    34cc:	3308      	adds	r3, #8
    34ce:	681a      	ldr	r2, [r3, #0]
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	0011      	movs	r1, r2
    34d4:	0018      	movs	r0, r3
    34d6:	4b4a      	ldr	r3, [pc, #296]	; (3600 <_usart_init+0x1ec>)
    34d8:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    34da:	230f      	movs	r3, #15
    34dc:	18fb      	adds	r3, r7, r3
    34de:	781a      	ldrb	r2, [r3, #0]
    34e0:	4942      	ldr	r1, [pc, #264]	; (35ec <_usart_init+0x1d8>)
    34e2:	0013      	movs	r3, r2
    34e4:	009b      	lsls	r3, r3, #2
    34e6:	189b      	adds	r3, r3, r2
    34e8:	009b      	lsls	r3, r3, #2
    34ea:	18cb      	adds	r3, r1, r3
    34ec:	3304      	adds	r3, #4
    34ee:	681a      	ldr	r2, [r3, #0]
    34f0:	2380      	movs	r3, #128	; 0x80
    34f2:	019b      	lsls	r3, r3, #6
    34f4:	4013      	ands	r3, r2
    34f6:	d10e      	bne.n	3516 <_usart_init+0x102>
    34f8:	230f      	movs	r3, #15
    34fa:	18fb      	adds	r3, r7, r3
    34fc:	781a      	ldrb	r2, [r3, #0]
    34fe:	493b      	ldr	r1, [pc, #236]	; (35ec <_usart_init+0x1d8>)
    3500:	0013      	movs	r3, r2
    3502:	009b      	lsls	r3, r3, #2
    3504:	189b      	adds	r3, r3, r2
    3506:	009b      	lsls	r3, r3, #2
    3508:	18cb      	adds	r3, r1, r3
    350a:	3304      	adds	r3, #4
    350c:	681a      	ldr	r2, [r3, #0]
    350e:	23c0      	movs	r3, #192	; 0xc0
    3510:	01db      	lsls	r3, r3, #7
    3512:	4013      	ands	r3, r2
    3514:	d030      	beq.n	3578 <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3516:	230f      	movs	r3, #15
    3518:	18fb      	adds	r3, r7, r3
    351a:	781a      	ldrb	r2, [r3, #0]
    351c:	4933      	ldr	r1, [pc, #204]	; (35ec <_usart_init+0x1d8>)
    351e:	0013      	movs	r3, r2
    3520:	009b      	lsls	r3, r3, #2
    3522:	189b      	adds	r3, r3, r2
    3524:	009b      	lsls	r3, r3, #2
    3526:	18cb      	adds	r3, r1, r3
    3528:	330c      	adds	r3, #12
    352a:	881b      	ldrh	r3, [r3, #0]
    352c:	04db      	lsls	r3, r3, #19
    352e:	0cdb      	lsrs	r3, r3, #19
    3530:	b299      	uxth	r1, r3
    3532:	687a      	ldr	r2, [r7, #4]
    3534:	8993      	ldrh	r3, [r2, #12]
    3536:	04c9      	lsls	r1, r1, #19
    3538:	0cc8      	lsrs	r0, r1, #19
    353a:	0b5b      	lsrs	r3, r3, #13
    353c:	035b      	lsls	r3, r3, #13
    353e:	1c19      	adds	r1, r3, #0
    3540:	1c03      	adds	r3, r0, #0
    3542:	430b      	orrs	r3, r1
    3544:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3546:	230f      	movs	r3, #15
    3548:	18fb      	adds	r3, r7, r3
    354a:	781a      	ldrb	r2, [r3, #0]
    354c:	4927      	ldr	r1, [pc, #156]	; (35ec <_usart_init+0x1d8>)
    354e:	0013      	movs	r3, r2
    3550:	009b      	lsls	r3, r3, #2
    3552:	189b      	adds	r3, r3, r2
    3554:	009b      	lsls	r3, r3, #2
    3556:	18cb      	adds	r3, r1, r3
    3558:	330e      	adds	r3, #14
    355a:	781b      	ldrb	r3, [r3, #0]
    355c:	1c1a      	adds	r2, r3, #0
    355e:	2307      	movs	r3, #7
    3560:	4013      	ands	r3, r2
    3562:	b2d9      	uxtb	r1, r3
    3564:	687a      	ldr	r2, [r7, #4]
    3566:	8993      	ldrh	r3, [r2, #12]
    3568:	0348      	lsls	r0, r1, #13
    356a:	04db      	lsls	r3, r3, #19
    356c:	0cdb      	lsrs	r3, r3, #19
    356e:	1c19      	adds	r1, r3, #0
    3570:	1c03      	adds	r3, r0, #0
    3572:	430b      	orrs	r3, r1
    3574:	8193      	strh	r3, [r2, #12]
    3576:	e00f      	b.n	3598 <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3578:	230f      	movs	r3, #15
    357a:	18fb      	adds	r3, r7, r3
    357c:	781a      	ldrb	r2, [r3, #0]
    357e:	491b      	ldr	r1, [pc, #108]	; (35ec <_usart_init+0x1d8>)
    3580:	0013      	movs	r3, r2
    3582:	009b      	lsls	r3, r3, #2
    3584:	189b      	adds	r3, r3, r2
    3586:	009b      	lsls	r3, r3, #2
    3588:	18cb      	adds	r3, r1, r3
    358a:	330c      	adds	r3, #12
    358c:	881a      	ldrh	r2, [r3, #0]
    358e:	687b      	ldr	r3, [r7, #4]
    3590:	0011      	movs	r1, r2
    3592:	0018      	movs	r0, r3
    3594:	4b1b      	ldr	r3, [pc, #108]	; (3604 <_usart_init+0x1f0>)
    3596:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3598:	230f      	movs	r3, #15
    359a:	18fb      	adds	r3, r7, r3
    359c:	781a      	ldrb	r2, [r3, #0]
    359e:	4913      	ldr	r1, [pc, #76]	; (35ec <_usart_init+0x1d8>)
    35a0:	0013      	movs	r3, r2
    35a2:	009b      	lsls	r3, r3, #2
    35a4:	189b      	adds	r3, r3, r2
    35a6:	009b      	lsls	r3, r3, #2
    35a8:	18cb      	adds	r3, r1, r3
    35aa:	330f      	adds	r3, #15
    35ac:	781a      	ldrb	r2, [r3, #0]
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	0011      	movs	r1, r2
    35b2:	0018      	movs	r0, r3
    35b4:	4b14      	ldr	r3, [pc, #80]	; (3608 <_usart_init+0x1f4>)
    35b6:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    35b8:	230f      	movs	r3, #15
    35ba:	18fb      	adds	r3, r7, r3
    35bc:	781a      	ldrb	r2, [r3, #0]
    35be:	490b      	ldr	r1, [pc, #44]	; (35ec <_usart_init+0x1d8>)
    35c0:	0013      	movs	r3, r2
    35c2:	009b      	lsls	r3, r3, #2
    35c4:	189b      	adds	r3, r3, r2
    35c6:	009b      	lsls	r3, r3, #2
    35c8:	18cb      	adds	r3, r1, r3
    35ca:	3310      	adds	r3, #16
    35cc:	781a      	ldrb	r2, [r3, #0]
    35ce:	687b      	ldr	r3, [r7, #4]
    35d0:	0011      	movs	r1, r2
    35d2:	0018      	movs	r0, r3
    35d4:	4b0d      	ldr	r3, [pc, #52]	; (360c <_usart_init+0x1f8>)
    35d6:	4798      	blx	r3

	return ERR_NONE;
    35d8:	2300      	movs	r3, #0
}
    35da:	0018      	movs	r0, r3
    35dc:	46bd      	mov	sp, r7
    35de:	b005      	add	sp, #20
    35e0:	bd90      	pop	{r4, r7, pc}
    35e2:	46c0      	nop			; (mov r8, r8)
    35e4:	00003339 	.word	0x00003339
    35e8:	00002af9 	.word	0x00002af9
    35ec:	2000001c 	.word	0x2000001c
    35f0:	00002d6d 	.word	0x00002d6d
    35f4:	00002d41 	.word	0x00002d41
    35f8:	00002adb 	.word	0x00002adb
    35fc:	00002d9d 	.word	0x00002d9d
    3600:	00002ed9 	.word	0x00002ed9
    3604:	00002f19 	.word	0x00002f19
    3608:	00002f37 	.word	0x00002f37
    360c:	00003079 	.word	0x00003079

00003610 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    3610:	b590      	push	{r4, r7, lr}
    3612:	b085      	sub	sp, #20
    3614:	af00      	add	r7, sp, #0
    3616:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3618:	230e      	movs	r3, #14
    361a:	18fc      	adds	r4, r7, r3
    361c:	687b      	ldr	r3, [r7, #4]
    361e:	0018      	movs	r0, r3
    3620:	4b19      	ldr	r3, [pc, #100]	; (3688 <_get_i2cm_index+0x78>)
    3622:	4798      	blx	r3
    3624:	0003      	movs	r3, r0
    3626:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    3628:	230f      	movs	r3, #15
    362a:	18fb      	adds	r3, r7, r3
    362c:	2200      	movs	r2, #0
    362e:	701a      	strb	r2, [r3, #0]
    3630:	e019      	b.n	3666 <_get_i2cm_index+0x56>
		if (_i2cms[i].number == sercom_offset) {
    3632:	230f      	movs	r3, #15
    3634:	18fb      	adds	r3, r7, r3
    3636:	781a      	ldrb	r2, [r3, #0]
    3638:	4914      	ldr	r1, [pc, #80]	; (368c <_get_i2cm_index+0x7c>)
    363a:	0013      	movs	r3, r2
    363c:	005b      	lsls	r3, r3, #1
    363e:	189b      	adds	r3, r3, r2
    3640:	00db      	lsls	r3, r3, #3
    3642:	5c5b      	ldrb	r3, [r3, r1]
    3644:	220e      	movs	r2, #14
    3646:	18ba      	adds	r2, r7, r2
    3648:	7812      	ldrb	r2, [r2, #0]
    364a:	429a      	cmp	r2, r3
    364c:	d104      	bne.n	3658 <_get_i2cm_index+0x48>
			return i;
    364e:	230f      	movs	r3, #15
    3650:	18fb      	adds	r3, r7, r3
    3652:	781b      	ldrb	r3, [r3, #0]
    3654:	b25b      	sxtb	r3, r3
    3656:	e013      	b.n	3680 <_get_i2cm_index+0x70>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    3658:	230f      	movs	r3, #15
    365a:	18fb      	adds	r3, r7, r3
    365c:	781a      	ldrb	r2, [r3, #0]
    365e:	230f      	movs	r3, #15
    3660:	18fb      	adds	r3, r7, r3
    3662:	3201      	adds	r2, #1
    3664:	701a      	strb	r2, [r3, #0]
    3666:	230f      	movs	r3, #15
    3668:	18fb      	adds	r3, r7, r3
    366a:	781b      	ldrb	r3, [r3, #0]
    366c:	2b00      	cmp	r3, #0
    366e:	d0e0      	beq.n	3632 <_get_i2cm_index+0x22>
		}
	}

	ASSERT(false);
    3670:	4a07      	ldr	r2, [pc, #28]	; (3690 <_get_i2cm_index+0x80>)
    3672:	4b08      	ldr	r3, [pc, #32]	; (3694 <_get_i2cm_index+0x84>)
    3674:	0019      	movs	r1, r3
    3676:	2000      	movs	r0, #0
    3678:	4b07      	ldr	r3, [pc, #28]	; (3698 <_get_i2cm_index+0x88>)
    367a:	4798      	blx	r3
	return -1;
    367c:	2301      	movs	r3, #1
    367e:	425b      	negs	r3, r3
}
    3680:	0018      	movs	r0, r3
    3682:	46bd      	mov	sp, r7
    3684:	b005      	add	sp, #20
    3686:	bd90      	pop	{r4, r7, pc}
    3688:	00003201 	.word	0x00003201
    368c:	20000058 	.word	0x20000058
    3690:	000003d3 	.word	0x000003d3
    3694:	00004c68 	.word	0x00004c68
    3698:	00001cf7 	.word	0x00001cf7

0000369c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    369c:	b580      	push	{r7, lr}
    369e:	b082      	sub	sp, #8
    36a0:	af00      	add	r7, sp, #0
    36a2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    36a4:	687b      	ldr	r3, [r7, #4]
    36a6:	2103      	movs	r1, #3
    36a8:	0018      	movs	r0, r3
    36aa:	4b03      	ldr	r3, [pc, #12]	; (36b8 <_sercom_i2c_send_stop+0x1c>)
    36ac:	4798      	blx	r3
}
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	46bd      	mov	sp, r7
    36b2:	b002      	add	sp, #8
    36b4:	bd80      	pop	{r7, pc}
    36b6:	46c0      	nop			; (mov r8, r8)
    36b8:	00002e7d 	.word	0x00002e7d

000036bc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    36bc:	b590      	push	{r4, r7, lr}
    36be:	b087      	sub	sp, #28
    36c0:	af00      	add	r7, sp, #0
    36c2:	60f8      	str	r0, [r7, #12]
    36c4:	60b9      	str	r1, [r7, #8]
    36c6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    36c8:	68fb      	ldr	r3, [r7, #12]
    36ca:	0018      	movs	r0, r3
    36cc:	4b87      	ldr	r3, [pc, #540]	; (38ec <_sercom_i2c_sync_analyse_flags+0x230>)
    36ce:	4798      	blx	r3
    36d0:	0003      	movs	r3, r0
    36d2:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    36d4:	2312      	movs	r3, #18
    36d6:	18fc      	adds	r4, r7, r3
    36d8:	68fb      	ldr	r3, [r7, #12]
    36da:	0018      	movs	r0, r3
    36dc:	4b84      	ldr	r3, [pc, #528]	; (38f0 <_sercom_i2c_sync_analyse_flags+0x234>)
    36de:	4798      	blx	r3
    36e0:	0003      	movs	r3, r0
    36e2:	8023      	strh	r3, [r4, #0]

	if (flags & MB_FLAG) {
    36e4:	68bb      	ldr	r3, [r7, #8]
    36e6:	2201      	movs	r2, #1
    36e8:	4013      	ands	r3, r2
    36ea:	d100      	bne.n	36ee <_sercom_i2c_sync_analyse_flags+0x32>
    36ec:	e0a3      	b.n	3836 <_sercom_i2c_sync_analyse_flags+0x17a>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    36ee:	2312      	movs	r3, #18
    36f0:	18fb      	adds	r3, r7, r3
    36f2:	881b      	ldrh	r3, [r3, #0]
    36f4:	2202      	movs	r2, #2
    36f6:	4013      	ands	r3, r2
    36f8:	d020      	beq.n	373c <_sercom_i2c_sync_analyse_flags+0x80>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    36fa:	68fb      	ldr	r3, [r7, #12]
    36fc:	0018      	movs	r0, r3
    36fe:	4b7d      	ldr	r3, [pc, #500]	; (38f4 <_sercom_i2c_sync_analyse_flags+0x238>)
    3700:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	885b      	ldrh	r3, [r3, #2]
    3706:	b29b      	uxth	r3, r3
    3708:	2280      	movs	r2, #128	; 0x80
    370a:	0152      	lsls	r2, r2, #5
    370c:	4313      	orrs	r3, r2
    370e:	b29a      	uxth	r2, r3
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	885b      	ldrh	r3, [r3, #2]
    3718:	b29b      	uxth	r3, r3
    371a:	4a77      	ldr	r2, [pc, #476]	; (38f8 <_sercom_i2c_sync_analyse_flags+0x23c>)
    371c:	4013      	ands	r3, r2
    371e:	b29a      	uxth	r2, r3
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    3724:	2312      	movs	r3, #18
    3726:	18fb      	adds	r3, r7, r3
    3728:	881b      	ldrh	r3, [r3, #0]
    372a:	2201      	movs	r2, #1
    372c:	4013      	ands	r3, r2
    372e:	d002      	beq.n	3736 <_sercom_i2c_sync_analyse_flags+0x7a>
				return I2C_ERR_BUS;
    3730:	2305      	movs	r3, #5
    3732:	425b      	negs	r3, r3
    3734:	e0d6      	b.n	38e4 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			return I2C_ERR_BAD_ADDRESS;
    3736:	2304      	movs	r3, #4
    3738:	425b      	negs	r3, r3
    373a:	e0d3      	b.n	38e4 <_sercom_i2c_sync_analyse_flags+0x228>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    373c:	2312      	movs	r3, #18
    373e:	18fb      	adds	r3, r7, r3
    3740:	881b      	ldrh	r3, [r3, #0]
    3742:	2204      	movs	r2, #4
    3744:	4013      	ands	r3, r2
    3746:	d021      	beq.n	378c <_sercom_i2c_sync_analyse_flags+0xd0>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    3748:	687b      	ldr	r3, [r7, #4]
    374a:	685b      	ldr	r3, [r3, #4]
    374c:	2b00      	cmp	r3, #0
    374e:	dd08      	ble.n	3762 <_sercom_i2c_sync_analyse_flags+0xa6>
					msg->flags |= I2C_M_FAIL;
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	885b      	ldrh	r3, [r3, #2]
    3754:	b29b      	uxth	r3, r3
    3756:	2280      	movs	r2, #128	; 0x80
    3758:	0152      	lsls	r2, r2, #5
    375a:	4313      	orrs	r3, r2
    375c:	b29a      	uxth	r2, r3
    375e:	687b      	ldr	r3, [r7, #4]
    3760:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    3762:	687b      	ldr	r3, [r7, #4]
    3764:	885b      	ldrh	r3, [r3, #2]
    3766:	b29b      	uxth	r3, r3
    3768:	b21b      	sxth	r3, r3
    376a:	2b00      	cmp	r3, #0
    376c:	da03      	bge.n	3776 <_sercom_i2c_sync_analyse_flags+0xba>
					_sercom_i2c_send_stop(hw);
    376e:	68fb      	ldr	r3, [r7, #12]
    3770:	0018      	movs	r0, r3
    3772:	4b62      	ldr	r3, [pc, #392]	; (38fc <_sercom_i2c_sync_analyse_flags+0x240>)
    3774:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    3776:	687b      	ldr	r3, [r7, #4]
    3778:	885b      	ldrh	r3, [r3, #2]
    377a:	b29b      	uxth	r3, r3
    377c:	4a5e      	ldr	r2, [pc, #376]	; (38f8 <_sercom_i2c_sync_analyse_flags+0x23c>)
    377e:	4013      	ands	r3, r2
    3780:	b29a      	uxth	r2, r3
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    3786:	2302      	movs	r3, #2
    3788:	425b      	negs	r3, r3
    378a:	e0ab      	b.n	38e4 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->flags & I2C_M_TEN) {
    378c:	687b      	ldr	r3, [r7, #4]
    378e:	885b      	ldrh	r3, [r3, #2]
    3790:	b29b      	uxth	r3, r3
    3792:	001a      	movs	r2, r3
    3794:	2380      	movs	r3, #128	; 0x80
    3796:	00db      	lsls	r3, r3, #3
    3798:	4013      	ands	r3, r2
    379a:	d021      	beq.n	37e0 <_sercom_i2c_sync_analyse_flags+0x124>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	881b      	ldrh	r3, [r3, #0]
    37a0:	121b      	asrs	r3, r3, #8
    37a2:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    37a4:	001a      	movs	r2, r3
    37a6:	2306      	movs	r3, #6
    37a8:	401a      	ands	r2, r3
    37aa:	0014      	movs	r4, r2
    37ac:	68fb      	ldr	r3, [r7, #12]
    37ae:	0018      	movs	r0, r3
    37b0:	4b53      	ldr	r3, [pc, #332]	; (3900 <_sercom_i2c_sync_analyse_flags+0x244>)
    37b2:	4798      	blx	r3
    37b4:	0002      	movs	r2, r0
    37b6:	2380      	movs	r3, #128	; 0x80
    37b8:	01db      	lsls	r3, r3, #7
    37ba:	4013      	ands	r3, r2
    37bc:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    37be:	22f1      	movs	r2, #241	; 0xf1
    37c0:	431a      	orrs	r2, r3
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	0011      	movs	r1, r2
    37c6:	0018      	movs	r0, r3
    37c8:	4b4e      	ldr	r3, [pc, #312]	; (3904 <_sercom_i2c_sync_analyse_flags+0x248>)
    37ca:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	885b      	ldrh	r3, [r3, #2]
    37d0:	b29b      	uxth	r3, r3
    37d2:	4a4d      	ldr	r2, [pc, #308]	; (3908 <_sercom_i2c_sync_analyse_flags+0x24c>)
    37d4:	4013      	ands	r3, r2
    37d6:	b29a      	uxth	r2, r3
    37d8:	687b      	ldr	r3, [r7, #4]
    37da:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    37dc:	2300      	movs	r3, #0
    37de:	e081      	b.n	38e4 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->len == 0) {
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	685b      	ldr	r3, [r3, #4]
    37e4:	2b00      	cmp	r3, #0
    37e6:	d112      	bne.n	380e <_sercom_i2c_sync_analyse_flags+0x152>
				if (msg->flags & I2C_M_STOP) {
    37e8:	687b      	ldr	r3, [r7, #4]
    37ea:	885b      	ldrh	r3, [r3, #2]
    37ec:	b29b      	uxth	r3, r3
    37ee:	b21b      	sxth	r3, r3
    37f0:	2b00      	cmp	r3, #0
    37f2:	da03      	bge.n	37fc <_sercom_i2c_sync_analyse_flags+0x140>
					_sercom_i2c_send_stop(hw);
    37f4:	68fb      	ldr	r3, [r7, #12]
    37f6:	0018      	movs	r0, r3
    37f8:	4b40      	ldr	r3, [pc, #256]	; (38fc <_sercom_i2c_sync_analyse_flags+0x240>)
    37fa:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    37fc:	687b      	ldr	r3, [r7, #4]
    37fe:	885b      	ldrh	r3, [r3, #2]
    3800:	b29b      	uxth	r3, r3
    3802:	4a3d      	ldr	r2, [pc, #244]	; (38f8 <_sercom_i2c_sync_analyse_flags+0x23c>)
    3804:	4013      	ands	r3, r2
    3806:	b29a      	uxth	r2, r3
    3808:	687b      	ldr	r3, [r7, #4]
    380a:	805a      	strh	r2, [r3, #2]
    380c:	e011      	b.n	3832 <_sercom_i2c_sync_analyse_flags+0x176>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    380e:	687b      	ldr	r3, [r7, #4]
    3810:	689b      	ldr	r3, [r3, #8]
    3812:	781a      	ldrb	r2, [r3, #0]
    3814:	68fb      	ldr	r3, [r7, #12]
    3816:	0011      	movs	r1, r2
    3818:	0018      	movs	r0, r3
    381a:	4b3c      	ldr	r3, [pc, #240]	; (390c <_sercom_i2c_sync_analyse_flags+0x250>)
    381c:	4798      	blx	r3
				msg->buffer++;
    381e:	687b      	ldr	r3, [r7, #4]
    3820:	689b      	ldr	r3, [r3, #8]
    3822:	1c5a      	adds	r2, r3, #1
    3824:	687b      	ldr	r3, [r7, #4]
    3826:	609a      	str	r2, [r3, #8]
				msg->len--;
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	685b      	ldr	r3, [r3, #4]
    382c:	1e5a      	subs	r2, r3, #1
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    3832:	2300      	movs	r3, #0
    3834:	e056      	b.n	38e4 <_sercom_i2c_sync_analyse_flags+0x228>
		}
	} else if (flags & SB_FLAG) {
    3836:	68bb      	ldr	r3, [r7, #8]
    3838:	2202      	movs	r2, #2
    383a:	4013      	ands	r3, r2
    383c:	d051      	beq.n	38e2 <_sercom_i2c_sync_analyse_flags+0x226>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    383e:	687b      	ldr	r3, [r7, #4]
    3840:	685b      	ldr	r3, [r3, #4]
    3842:	2b00      	cmp	r3, #0
    3844:	d046      	beq.n	38d4 <_sercom_i2c_sync_analyse_flags+0x218>
    3846:	2312      	movs	r3, #18
    3848:	18fb      	adds	r3, r7, r3
    384a:	881b      	ldrh	r3, [r3, #0]
    384c:	2204      	movs	r2, #4
    384e:	4013      	ands	r3, r2
    3850:	d140      	bne.n	38d4 <_sercom_i2c_sync_analyse_flags+0x218>
			msg->len--;
    3852:	687b      	ldr	r3, [r7, #4]
    3854:	685b      	ldr	r3, [r3, #4]
    3856:	1e5a      	subs	r2, r3, #1
    3858:	687b      	ldr	r3, [r7, #4]
    385a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    385c:	687b      	ldr	r3, [r7, #4]
    385e:	685b      	ldr	r3, [r3, #4]
    3860:	2b00      	cmp	r3, #0
    3862:	d102      	bne.n	386a <_sercom_i2c_sync_analyse_flags+0x1ae>
    3864:	697b      	ldr	r3, [r7, #20]
    3866:	2b00      	cmp	r3, #0
    3868:	d006      	beq.n	3878 <_sercom_i2c_sync_analyse_flags+0x1bc>
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	685b      	ldr	r3, [r3, #4]
    386e:	2b01      	cmp	r3, #1
    3870:	d106      	bne.n	3880 <_sercom_i2c_sync_analyse_flags+0x1c4>
    3872:	697b      	ldr	r3, [r7, #20]
    3874:	2b00      	cmp	r3, #0
    3876:	d003      	beq.n	3880 <_sercom_i2c_sync_analyse_flags+0x1c4>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    3878:	68fb      	ldr	r3, [r7, #12]
    387a:	0018      	movs	r0, r3
    387c:	4b24      	ldr	r3, [pc, #144]	; (3910 <_sercom_i2c_sync_analyse_flags+0x254>)
    387e:	4798      	blx	r3
			}

			if (msg->len == 0) {
    3880:	687b      	ldr	r3, [r7, #4]
    3882:	685b      	ldr	r3, [r3, #4]
    3884:	2b00      	cmp	r3, #0
    3886:	d115      	bne.n	38b4 <_sercom_i2c_sync_analyse_flags+0x1f8>
				if (msg->flags & I2C_M_STOP) {
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	885b      	ldrh	r3, [r3, #2]
    388c:	b29b      	uxth	r3, r3
    388e:	b21b      	sxth	r3, r3
    3890:	2b00      	cmp	r3, #0
    3892:	da07      	bge.n	38a4 <_sercom_i2c_sync_analyse_flags+0x1e8>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    3894:	68fb      	ldr	r3, [r7, #12]
    3896:	0018      	movs	r0, r3
    3898:	4b1e      	ldr	r3, [pc, #120]	; (3914 <_sercom_i2c_sync_analyse_flags+0x258>)
    389a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    389c:	68fb      	ldr	r3, [r7, #12]
    389e:	0018      	movs	r0, r3
    38a0:	4b16      	ldr	r3, [pc, #88]	; (38fc <_sercom_i2c_sync_analyse_flags+0x240>)
    38a2:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	885b      	ldrh	r3, [r3, #2]
    38a8:	b29b      	uxth	r3, r3
    38aa:	4a13      	ldr	r2, [pc, #76]	; (38f8 <_sercom_i2c_sync_analyse_flags+0x23c>)
    38ac:	4013      	ands	r3, r2
    38ae:	b29a      	uxth	r2, r3
    38b0:	687b      	ldr	r3, [r7, #4]
    38b2:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    38b4:	687b      	ldr	r3, [r7, #4]
    38b6:	689c      	ldr	r4, [r3, #8]
    38b8:	1c62      	adds	r2, r4, #1
    38ba:	687b      	ldr	r3, [r7, #4]
    38bc:	609a      	str	r2, [r3, #8]
    38be:	68fb      	ldr	r3, [r7, #12]
    38c0:	0018      	movs	r0, r3
    38c2:	4b15      	ldr	r3, [pc, #84]	; (3918 <_sercom_i2c_sync_analyse_flags+0x25c>)
    38c4:	4798      	blx	r3
    38c6:	0003      	movs	r3, r0
    38c8:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    38ca:	68fb      	ldr	r3, [r7, #12]
    38cc:	0018      	movs	r0, r3
    38ce:	4b13      	ldr	r3, [pc, #76]	; (391c <_sercom_i2c_sync_analyse_flags+0x260>)
    38d0:	4798      	blx	r3
    38d2:	e006      	b.n	38e2 <_sercom_i2c_sync_analyse_flags+0x226>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    38d4:	68fb      	ldr	r3, [r7, #12]
    38d6:	0018      	movs	r0, r3
    38d8:	4b10      	ldr	r3, [pc, #64]	; (391c <_sercom_i2c_sync_analyse_flags+0x260>)
    38da:	4798      	blx	r3
			return I2C_NACK;
    38dc:	2302      	movs	r3, #2
    38de:	425b      	negs	r3, r3
    38e0:	e000      	b.n	38e4 <_sercom_i2c_sync_analyse_flags+0x228>
	}

	return I2C_OK;
    38e2:	2300      	movs	r3, #0
}
    38e4:	0018      	movs	r0, r3
    38e6:	46bd      	mov	sp, r7
    38e8:	b007      	add	sp, #28
    38ea:	bd90      	pop	{r4, r7, pc}
    38ec:	00002cc1 	.word	0x00002cc1
    38f0:	000030cd 	.word	0x000030cd
    38f4:	00002b19 	.word	0x00002b19
    38f8:	fffffeff 	.word	0xfffffeff
    38fc:	0000369d 	.word	0x0000369d
    3900:	00002fc9 	.word	0x00002fc9
    3904:	00002fa1 	.word	0x00002fa1
    3908:	fffffbff 	.word	0xfffffbff
    390c:	00002fed 	.word	0x00002fed
    3910:	00002e21 	.word	0x00002e21
    3914:	00002df1 	.word	0x00002df1
    3918:	0000301d 	.word	0x0000301d
    391c:	00002b2f 	.word	0x00002b2f

00003920 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3920:	b580      	push	{r7, lr}
    3922:	b082      	sub	sp, #8
    3924:	af00      	add	r7, sp, #0
    3926:	6078      	str	r0, [r7, #4]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    3928:	687b      	ldr	r3, [r7, #4]
    392a:	0018      	movs	r0, r3
    392c:	4b04      	ldr	r3, [pc, #16]	; (3940 <_sercom_get_irq_num+0x20>)
    392e:	4798      	blx	r3
    3930:	0003      	movs	r3, r0
    3932:	3309      	adds	r3, #9
    3934:	b2db      	uxtb	r3, r3
}
    3936:	0018      	movs	r0, r3
    3938:	46bd      	mov	sp, r7
    393a:	b002      	add	sp, #8
    393c:	bd80      	pop	{r7, pc}
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	00003201 	.word	0x00003201

00003944 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    3944:	b580      	push	{r7, lr}
    3946:	b082      	sub	sp, #8
    3948:	af00      	add	r7, sp, #0
    394a:	6078      	str	r0, [r7, #4]
    394c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	1e5a      	subs	r2, r3, #1
    3952:	4193      	sbcs	r3, r2
    3954:	b2db      	uxtb	r3, r3
    3956:	4a09      	ldr	r2, [pc, #36]	; (397c <_i2c_m_sync_init+0x38>)
    3958:	4909      	ldr	r1, [pc, #36]	; (3980 <_i2c_m_sync_init+0x3c>)
    395a:	0018      	movs	r0, r3
    395c:	4b09      	ldr	r3, [pc, #36]	; (3984 <_i2c_m_sync_init+0x40>)
    395e:	4798      	blx	r3

	i2c_dev->hw = hw;
    3960:	687b      	ldr	r3, [r7, #4]
    3962:	683a      	ldr	r2, [r7, #0]
    3964:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	683a      	ldr	r2, [r7, #0]
    396a:	0011      	movs	r1, r2
    396c:	0018      	movs	r0, r3
    396e:	4b06      	ldr	r3, [pc, #24]	; (3988 <_i2c_m_sync_init+0x44>)
    3970:	4798      	blx	r3
    3972:	0003      	movs	r3, r0
}
    3974:	0018      	movs	r0, r3
    3976:	46bd      	mov	sp, r7
    3978:	b002      	add	sp, #8
    397a:	bd80      	pop	{r7, pc}
    397c:	00000544 	.word	0x00000544
    3980:	00004c68 	.word	0x00004c68
    3984:	00001cf7 	.word	0x00001cf7
    3988:	00003c65 	.word	0x00003c65

0000398c <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    398c:	b580      	push	{r7, lr}
    398e:	b084      	sub	sp, #16
    3990:	af00      	add	r7, sp, #0
    3992:	6078      	str	r0, [r7, #4]
    3994:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    3996:	4b12      	ldr	r3, [pc, #72]	; (39e0 <_sercom_i2c_sync_wait_bus+0x54>)
    3998:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	691b      	ldr	r3, [r3, #16]
    399e:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    39a0:	68bb      	ldr	r3, [r7, #8]
    39a2:	0018      	movs	r0, r3
    39a4:	4b0f      	ldr	r3, [pc, #60]	; (39e4 <_sercom_i2c_sync_wait_bus+0x58>)
    39a6:	4798      	blx	r3
    39a8:	0003      	movs	r3, r0
    39aa:	001a      	movs	r2, r3
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    39b0:	68fb      	ldr	r3, [r7, #12]
    39b2:	1e5a      	subs	r2, r3, #1
    39b4:	60fa      	str	r2, [r7, #12]
    39b6:	2b00      	cmp	r3, #0
    39b8:	d102      	bne.n	39c0 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    39ba:	2305      	movs	r3, #5
    39bc:	425b      	negs	r3, r3
    39be:	e00a      	b.n	39d6 <_sercom_i2c_sync_wait_bus+0x4a>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    39c0:	683b      	ldr	r3, [r7, #0]
    39c2:	681b      	ldr	r3, [r3, #0]
    39c4:	2201      	movs	r2, #1
    39c6:	4013      	ands	r3, r2
    39c8:	d104      	bne.n	39d4 <_sercom_i2c_sync_wait_bus+0x48>
    39ca:	683b      	ldr	r3, [r7, #0]
    39cc:	681b      	ldr	r3, [r3, #0]
    39ce:	2202      	movs	r2, #2
    39d0:	4013      	ands	r3, r2
    39d2:	d0e5      	beq.n	39a0 <_sercom_i2c_sync_wait_bus+0x14>

	return I2C_OK;
    39d4:	2300      	movs	r3, #0
}
    39d6:	0018      	movs	r0, r3
    39d8:	46bd      	mov	sp, r7
    39da:	b004      	add	sp, #16
    39dc:	bd80      	pop	{r7, pc}
    39de:	46c0      	nop			; (mov r8, r8)
    39e0:	0000ffff 	.word	0x0000ffff
    39e4:	00002b45 	.word	0x00002b45

000039e8 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    39e8:	b590      	push	{r4, r7, lr}
    39ea:	b087      	sub	sp, #28
    39ec:	af00      	add	r7, sp, #0
    39ee:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    39f0:	687b      	ldr	r3, [r7, #4]
    39f2:	691b      	ldr	r3, [r3, #16]
    39f4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    39fa:	697b      	ldr	r3, [r7, #20]
    39fc:	0018      	movs	r0, r3
    39fe:	4b3f      	ldr	r3, [pc, #252]	; (3afc <_sercom_i2c_sync_send_address+0x114>)
    3a00:	4798      	blx	r3
    3a02:	0003      	movs	r3, r0
    3a04:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	1e5a      	subs	r2, r3, #1
    3a0a:	4193      	sbcs	r3, r2
    3a0c:	b2db      	uxtb	r3, r3
    3a0e:	4a3c      	ldr	r2, [pc, #240]	; (3b00 <_sercom_i2c_sync_send_address+0x118>)
    3a10:	493c      	ldr	r1, [pc, #240]	; (3b04 <_sercom_i2c_sync_send_address+0x11c>)
    3a12:	0018      	movs	r0, r3
    3a14:	4b3c      	ldr	r3, [pc, #240]	; (3b08 <_sercom_i2c_sync_send_address+0x120>)
    3a16:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    3a18:	693b      	ldr	r3, [r7, #16]
    3a1a:	685b      	ldr	r3, [r3, #4]
    3a1c:	2b01      	cmp	r3, #1
    3a1e:	d107      	bne.n	3a30 <_sercom_i2c_sync_send_address+0x48>
    3a20:	68fb      	ldr	r3, [r7, #12]
    3a22:	2b00      	cmp	r3, #0
    3a24:	d004      	beq.n	3a30 <_sercom_i2c_sync_send_address+0x48>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    3a26:	697b      	ldr	r3, [r7, #20]
    3a28:	0018      	movs	r0, r3
    3a2a:	4b38      	ldr	r3, [pc, #224]	; (3b0c <_sercom_i2c_sync_send_address+0x124>)
    3a2c:	4798      	blx	r3
    3a2e:	e003      	b.n	3a38 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    3a30:	697b      	ldr	r3, [r7, #20]
    3a32:	0018      	movs	r0, r3
    3a34:	4b36      	ldr	r3, [pc, #216]	; (3b10 <_sercom_i2c_sync_send_address+0x128>)
    3a36:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    3a38:	693b      	ldr	r3, [r7, #16]
    3a3a:	881b      	ldrh	r3, [r3, #0]
    3a3c:	001a      	movs	r2, r3
    3a3e:	2380      	movs	r3, #128	; 0x80
    3a40:	00db      	lsls	r3, r3, #3
    3a42:	4013      	ands	r3, r2
    3a44:	d028      	beq.n	3a98 <_sercom_i2c_sync_send_address+0xb0>
		if (msg->flags & I2C_M_RD) {
    3a46:	693b      	ldr	r3, [r7, #16]
    3a48:	885b      	ldrh	r3, [r3, #2]
    3a4a:	b29b      	uxth	r3, r3
    3a4c:	001a      	movs	r2, r3
    3a4e:	2301      	movs	r3, #1
    3a50:	4013      	ands	r3, r2
    3a52:	d008      	beq.n	3a66 <_sercom_i2c_sync_send_address+0x7e>
			msg->flags |= I2C_M_TEN;
    3a54:	693b      	ldr	r3, [r7, #16]
    3a56:	885b      	ldrh	r3, [r3, #2]
    3a58:	b29b      	uxth	r3, r3
    3a5a:	2280      	movs	r2, #128	; 0x80
    3a5c:	00d2      	lsls	r2, r2, #3
    3a5e:	4313      	orrs	r3, r2
    3a60:	b29a      	uxth	r2, r3
    3a62:	693b      	ldr	r3, [r7, #16]
    3a64:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    3a66:	693b      	ldr	r3, [r7, #16]
    3a68:	881b      	ldrh	r3, [r3, #0]
    3a6a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3a6c:	001a      	movs	r2, r3
    3a6e:	4b29      	ldr	r3, [pc, #164]	; (3b14 <_sercom_i2c_sync_send_address+0x12c>)
    3a70:	401a      	ands	r2, r3
    3a72:	0014      	movs	r4, r2
    3a74:	697b      	ldr	r3, [r7, #20]
    3a76:	0018      	movs	r0, r3
    3a78:	4b27      	ldr	r3, [pc, #156]	; (3b18 <_sercom_i2c_sync_send_address+0x130>)
    3a7a:	4798      	blx	r3
    3a7c:	0002      	movs	r2, r0
    3a7e:	2380      	movs	r3, #128	; 0x80
    3a80:	01db      	lsls	r3, r3, #7
    3a82:	4013      	ands	r3, r2
    3a84:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    3a86:	2280      	movs	r2, #128	; 0x80
    3a88:	0212      	lsls	r2, r2, #8
    3a8a:	431a      	orrs	r2, r3
    3a8c:	697b      	ldr	r3, [r7, #20]
    3a8e:	0011      	movs	r1, r2
    3a90:	0018      	movs	r0, r3
    3a92:	4b22      	ldr	r3, [pc, #136]	; (3b1c <_sercom_i2c_sync_send_address+0x134>)
    3a94:	4798      	blx	r3
    3a96:	e01e      	b.n	3ad6 <_sercom_i2c_sync_send_address+0xee>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    3a98:	693b      	ldr	r3, [r7, #16]
    3a9a:	881b      	ldrh	r3, [r3, #0]
    3a9c:	005b      	lsls	r3, r3, #1
    3a9e:	22ff      	movs	r2, #255	; 0xff
    3aa0:	4013      	ands	r3, r2
    3aa2:	693a      	ldr	r2, [r7, #16]
    3aa4:	8852      	ldrh	r2, [r2, #2]
    3aa6:	b292      	uxth	r2, r2
    3aa8:	0011      	movs	r1, r2
    3aaa:	2201      	movs	r2, #1
    3aac:	400a      	ands	r2, r1
    3aae:	1e51      	subs	r1, r2, #1
    3ab0:	418a      	sbcs	r2, r1
    3ab2:	b2d2      	uxtb	r2, r2
    3ab4:	4313      	orrs	r3, r2
    3ab6:	001c      	movs	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3ab8:	697b      	ldr	r3, [r7, #20]
    3aba:	0018      	movs	r0, r3
    3abc:	4b16      	ldr	r3, [pc, #88]	; (3b18 <_sercom_i2c_sync_send_address+0x130>)
    3abe:	4798      	blx	r3
    3ac0:	0002      	movs	r2, r0
    3ac2:	2380      	movs	r3, #128	; 0x80
    3ac4:	01db      	lsls	r3, r3, #7
    3ac6:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    3ac8:	0022      	movs	r2, r4
    3aca:	431a      	orrs	r2, r3
    3acc:	697b      	ldr	r3, [r7, #20]
    3ace:	0011      	movs	r1, r2
    3ad0:	0018      	movs	r0, r3
    3ad2:	4b12      	ldr	r3, [pc, #72]	; (3b1c <_sercom_i2c_sync_send_address+0x134>)
    3ad4:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    3ad6:	2308      	movs	r3, #8
    3ad8:	18fa      	adds	r2, r7, r3
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	0011      	movs	r1, r2
    3ade:	0018      	movs	r0, r3
    3ae0:	4b0f      	ldr	r3, [pc, #60]	; (3b20 <_sercom_i2c_sync_send_address+0x138>)
    3ae2:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    3ae4:	68b9      	ldr	r1, [r7, #8]
    3ae6:	693a      	ldr	r2, [r7, #16]
    3ae8:	697b      	ldr	r3, [r7, #20]
    3aea:	0018      	movs	r0, r3
    3aec:	4b0d      	ldr	r3, [pc, #52]	; (3b24 <_sercom_i2c_sync_send_address+0x13c>)
    3aee:	4798      	blx	r3
    3af0:	0003      	movs	r3, r0
}
    3af2:	0018      	movs	r0, r3
    3af4:	46bd      	mov	sp, r7
    3af6:	b007      	add	sp, #28
    3af8:	bd90      	pop	{r4, r7, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	00002cc1 	.word	0x00002cc1
    3b00:	000005d3 	.word	0x000005d3
    3b04:	00004c68 	.word	0x00004c68
    3b08:	00001cf7 	.word	0x00001cf7
    3b0c:	00002e21 	.word	0x00002e21
    3b10:	00002e4d 	.word	0x00002e4d
    3b14:	000007fe 	.word	0x000007fe
    3b18:	00002fc9 	.word	0x00002fc9
    3b1c:	00002fa1 	.word	0x00002fa1
    3b20:	0000398d 	.word	0x0000398d
    3b24:	000036bd 	.word	0x000036bd

00003b28 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    3b28:	b590      	push	{r4, r7, lr}
    3b2a:	b087      	sub	sp, #28
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	6078      	str	r0, [r7, #4]
    3b30:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	691b      	ldr	r3, [r3, #16]
    3b36:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    3b38:	687b      	ldr	r3, [r7, #4]
    3b3a:	1e5a      	subs	r2, r3, #1
    3b3c:	4193      	sbcs	r3, r2
    3b3e:	b2db      	uxtb	r3, r3
    3b40:	4a3e      	ldr	r2, [pc, #248]	; (3c3c <_i2c_m_sync_transfer+0x114>)
    3b42:	493f      	ldr	r1, [pc, #252]	; (3c40 <_i2c_m_sync_transfer+0x118>)
    3b44:	0018      	movs	r0, r3
    3b46:	4b3f      	ldr	r3, [pc, #252]	; (3c44 <_i2c_m_sync_transfer+0x11c>)
    3b48:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    3b4a:	687b      	ldr	r3, [r7, #4]
    3b4c:	691b      	ldr	r3, [r3, #16]
    3b4e:	1e5a      	subs	r2, r3, #1
    3b50:	4193      	sbcs	r3, r2
    3b52:	b2db      	uxtb	r3, r3
    3b54:	4a3c      	ldr	r2, [pc, #240]	; (3c48 <_i2c_m_sync_transfer+0x120>)
    3b56:	493a      	ldr	r1, [pc, #232]	; (3c40 <_i2c_m_sync_transfer+0x118>)
    3b58:	0018      	movs	r0, r3
    3b5a:	4b3a      	ldr	r3, [pc, #232]	; (3c44 <_i2c_m_sync_transfer+0x11c>)
    3b5c:	4798      	blx	r3
	ASSERT(msg);
    3b5e:	683b      	ldr	r3, [r7, #0]
    3b60:	1e5a      	subs	r2, r3, #1
    3b62:	4193      	sbcs	r3, r2
    3b64:	b2d8      	uxtb	r0, r3
    3b66:	23c0      	movs	r3, #192	; 0xc0
    3b68:	00da      	lsls	r2, r3, #3
    3b6a:	4b35      	ldr	r3, [pc, #212]	; (3c40 <_i2c_m_sync_transfer+0x118>)
    3b6c:	0019      	movs	r1, r3
    3b6e:	4b35      	ldr	r3, [pc, #212]	; (3c44 <_i2c_m_sync_transfer+0x11c>)
    3b70:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3b72:	687b      	ldr	r3, [r7, #4]
    3b74:	885b      	ldrh	r3, [r3, #2]
    3b76:	b29b      	uxth	r3, r3
    3b78:	001a      	movs	r2, r3
    3b7a:	2380      	movs	r3, #128	; 0x80
    3b7c:	005b      	lsls	r3, r3, #1
    3b7e:	4013      	ands	r3, r2
    3b80:	d002      	beq.n	3b88 <_i2c_m_sync_transfer+0x60>
		return I2C_ERR_BUSY;
    3b82:	2306      	movs	r3, #6
    3b84:	425b      	negs	r3, r3
    3b86:	e054      	b.n	3c32 <_i2c_m_sync_transfer+0x10a>
	}

	msg->flags |= I2C_M_BUSY;
    3b88:	683b      	ldr	r3, [r7, #0]
    3b8a:	885b      	ldrh	r3, [r3, #2]
    3b8c:	b29b      	uxth	r3, r3
    3b8e:	2280      	movs	r2, #128	; 0x80
    3b90:	0052      	lsls	r2, r2, #1
    3b92:	4313      	orrs	r3, r2
    3b94:	b29a      	uxth	r2, r3
    3b96:	683b      	ldr	r3, [r7, #0]
    3b98:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	683a      	ldr	r2, [r7, #0]
    3b9e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3ba0:	c313      	stmia	r3!, {r0, r1, r4}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    3ba2:	693b      	ldr	r3, [r7, #16]
    3ba4:	0018      	movs	r0, r3
    3ba6:	4b29      	ldr	r3, [pc, #164]	; (3c4c <_i2c_m_sync_transfer+0x124>)
    3ba8:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	0018      	movs	r0, r3
    3bae:	4b28      	ldr	r3, [pc, #160]	; (3c50 <_i2c_m_sync_transfer+0x128>)
    3bb0:	4798      	blx	r3
    3bb2:	0003      	movs	r3, r0
    3bb4:	617b      	str	r3, [r7, #20]

	if (ret) {
    3bb6:	697b      	ldr	r3, [r7, #20]
    3bb8:	2b00      	cmp	r3, #0
    3bba:	d031      	beq.n	3c20 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3bbc:	687b      	ldr	r3, [r7, #4]
    3bbe:	885b      	ldrh	r3, [r3, #2]
    3bc0:	b29b      	uxth	r3, r3
    3bc2:	4a24      	ldr	r2, [pc, #144]	; (3c54 <_i2c_m_sync_transfer+0x12c>)
    3bc4:	4013      	ands	r3, r2
    3bc6:	b29a      	uxth	r2, r3
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	805a      	strh	r2, [r3, #2]

		return ret;
    3bcc:	697b      	ldr	r3, [r7, #20]
    3bce:	e030      	b.n	3c32 <_i2c_m_sync_transfer+0x10a>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    3bd0:	230c      	movs	r3, #12
    3bd2:	18fa      	adds	r2, r7, r3
    3bd4:	687b      	ldr	r3, [r7, #4]
    3bd6:	0011      	movs	r1, r2
    3bd8:	0018      	movs	r0, r3
    3bda:	4b1f      	ldr	r3, [pc, #124]	; (3c58 <_i2c_m_sync_transfer+0x130>)
    3bdc:	4798      	blx	r3
    3bde:	0003      	movs	r3, r0
    3be0:	617b      	str	r3, [r7, #20]

		if (ret) {
    3be2:	697b      	ldr	r3, [r7, #20]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d013      	beq.n	3c10 <_i2c_m_sync_transfer+0xe8>
			if (msg->flags & I2C_M_STOP) {
    3be8:	683b      	ldr	r3, [r7, #0]
    3bea:	885b      	ldrh	r3, [r3, #2]
    3bec:	b29b      	uxth	r3, r3
    3bee:	b21b      	sxth	r3, r3
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	da03      	bge.n	3bfc <_i2c_m_sync_transfer+0xd4>
				_sercom_i2c_send_stop(hw);
    3bf4:	693b      	ldr	r3, [r7, #16]
    3bf6:	0018      	movs	r0, r3
    3bf8:	4b18      	ldr	r3, [pc, #96]	; (3c5c <_i2c_m_sync_transfer+0x134>)
    3bfa:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3bfc:	687b      	ldr	r3, [r7, #4]
    3bfe:	885b      	ldrh	r3, [r3, #2]
    3c00:	b29b      	uxth	r3, r3
    3c02:	4a14      	ldr	r2, [pc, #80]	; (3c54 <_i2c_m_sync_transfer+0x12c>)
    3c04:	4013      	ands	r3, r2
    3c06:	b29a      	uxth	r2, r3
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	805a      	strh	r2, [r3, #2]

			return ret;
    3c0c:	697b      	ldr	r3, [r7, #20]
    3c0e:	e010      	b.n	3c32 <_i2c_m_sync_transfer+0x10a>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    3c10:	68f9      	ldr	r1, [r7, #12]
    3c12:	687a      	ldr	r2, [r7, #4]
    3c14:	693b      	ldr	r3, [r7, #16]
    3c16:	0018      	movs	r0, r3
    3c18:	4b11      	ldr	r3, [pc, #68]	; (3c60 <_i2c_m_sync_transfer+0x138>)
    3c1a:	4798      	blx	r3
    3c1c:	0003      	movs	r3, r0
    3c1e:	617b      	str	r3, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3c20:	687b      	ldr	r3, [r7, #4]
    3c22:	885b      	ldrh	r3, [r3, #2]
    3c24:	b29b      	uxth	r3, r3
    3c26:	001a      	movs	r2, r3
    3c28:	2380      	movs	r3, #128	; 0x80
    3c2a:	005b      	lsls	r3, r3, #1
    3c2c:	4013      	ands	r3, r2
    3c2e:	d1cf      	bne.n	3bd0 <_i2c_m_sync_transfer+0xa8>
	}

	return ret;
    3c30:	697b      	ldr	r3, [r7, #20]
}
    3c32:	0018      	movs	r0, r3
    3c34:	46bd      	mov	sp, r7
    3c36:	b007      	add	sp, #28
    3c38:	bd90      	pop	{r4, r7, pc}
    3c3a:	46c0      	nop			; (mov r8, r8)
    3c3c:	000005fe 	.word	0x000005fe
    3c40:	00004c68 	.word	0x00004c68
    3c44:	00001cf7 	.word	0x00001cf7
    3c48:	000005ff 	.word	0x000005ff
    3c4c:	00002dc5 	.word	0x00002dc5
    3c50:	000039e9 	.word	0x000039e9
    3c54:	fffffeff 	.word	0xfffffeff
    3c58:	0000398d 	.word	0x0000398d
    3c5c:	0000369d 	.word	0x0000369d
    3c60:	000036bd 	.word	0x000036bd

00003c64 <_i2c_m_sync_init_impl>:
		}
	}
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    3c64:	b580      	push	{r7, lr}
    3c66:	b084      	sub	sp, #16
    3c68:	af00      	add	r7, sp, #0
    3c6a:	6078      	str	r0, [r7, #4]
    3c6c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    3c6e:	683b      	ldr	r3, [r7, #0]
    3c70:	0018      	movs	r0, r3
    3c72:	4b4f      	ldr	r3, [pc, #316]	; (3db0 <_i2c_m_sync_init_impl+0x14c>)
    3c74:	4798      	blx	r3
    3c76:	0003      	movs	r3, r0
    3c78:	001a      	movs	r2, r3
    3c7a:	230f      	movs	r3, #15
    3c7c:	18fb      	adds	r3, r7, r3
    3c7e:	701a      	strb	r2, [r3, #0]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    3c80:	683b      	ldr	r3, [r7, #0]
    3c82:	2101      	movs	r1, #1
    3c84:	0018      	movs	r0, r3
    3c86:	4b4b      	ldr	r3, [pc, #300]	; (3db4 <_i2c_m_sync_init_impl+0x150>)
    3c88:	4798      	blx	r3
    3c8a:	0003      	movs	r3, r0
    3c8c:	001a      	movs	r2, r3
    3c8e:	2301      	movs	r3, #1
    3c90:	4053      	eors	r3, r2
    3c92:	b2db      	uxtb	r3, r3
    3c94:	2b00      	cmp	r3, #0
    3c96:	d025      	beq.n	3ce4 <_i2c_m_sync_init_impl+0x80>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    3c98:	230f      	movs	r3, #15
    3c9a:	18fb      	adds	r3, r7, r3
    3c9c:	781a      	ldrb	r2, [r3, #0]
    3c9e:	4946      	ldr	r1, [pc, #280]	; (3db8 <_i2c_m_sync_init_impl+0x154>)
    3ca0:	0013      	movs	r3, r2
    3ca2:	005b      	lsls	r3, r3, #1
    3ca4:	189b      	adds	r3, r3, r2
    3ca6:	00db      	lsls	r3, r3, #3
    3ca8:	18cb      	adds	r3, r1, r3
    3caa:	3304      	adds	r3, #4
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	221c      	movs	r2, #28
    3cb0:	4013      	ands	r3, r2
    3cb2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    3cb4:	683b      	ldr	r3, [r7, #0]
    3cb6:	2102      	movs	r1, #2
    3cb8:	0018      	movs	r0, r3
    3cba:	4b40      	ldr	r3, [pc, #256]	; (3dbc <_i2c_m_sync_init_impl+0x158>)
    3cbc:	4798      	blx	r3
    3cbe:	1e03      	subs	r3, r0, #0
    3cc0:	d008      	beq.n	3cd4 <_i2c_m_sync_init_impl+0x70>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    3cc2:	683b      	ldr	r3, [r7, #0]
    3cc4:	0018      	movs	r0, r3
    3cc6:	4b3e      	ldr	r3, [pc, #248]	; (3dc0 <_i2c_m_sync_init_impl+0x15c>)
    3cc8:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    3cca:	683b      	ldr	r3, [r7, #0]
    3ccc:	2102      	movs	r1, #2
    3cce:	0018      	movs	r0, r3
    3cd0:	4b3c      	ldr	r3, [pc, #240]	; (3dc4 <_i2c_m_sync_init_impl+0x160>)
    3cd2:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    3cd4:	68bb      	ldr	r3, [r7, #8]
    3cd6:	2201      	movs	r2, #1
    3cd8:	431a      	orrs	r2, r3
    3cda:	683b      	ldr	r3, [r7, #0]
    3cdc:	0011      	movs	r1, r2
    3cde:	0018      	movs	r0, r3
    3ce0:	4b39      	ldr	r3, [pc, #228]	; (3dc8 <_i2c_m_sync_init_impl+0x164>)
    3ce2:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    3ce4:	683b      	ldr	r3, [r7, #0]
    3ce6:	2101      	movs	r1, #1
    3ce8:	0018      	movs	r0, r3
    3cea:	4b36      	ldr	r3, [pc, #216]	; (3dc4 <_i2c_m_sync_init_impl+0x160>)
    3cec:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    3cee:	230f      	movs	r3, #15
    3cf0:	18fb      	adds	r3, r7, r3
    3cf2:	781a      	ldrb	r2, [r3, #0]
    3cf4:	4930      	ldr	r1, [pc, #192]	; (3db8 <_i2c_m_sync_init_impl+0x154>)
    3cf6:	0013      	movs	r3, r2
    3cf8:	005b      	lsls	r3, r3, #1
    3cfa:	189b      	adds	r3, r3, r2
    3cfc:	00db      	lsls	r3, r3, #3
    3cfe:	18cb      	adds	r3, r1, r3
    3d00:	3304      	adds	r3, #4
    3d02:	681a      	ldr	r2, [r3, #0]
    3d04:	683b      	ldr	r3, [r7, #0]
    3d06:	0011      	movs	r1, r2
    3d08:	0018      	movs	r0, r3
    3d0a:	4b2f      	ldr	r3, [pc, #188]	; (3dc8 <_i2c_m_sync_init_impl+0x164>)
    3d0c:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    3d0e:	230f      	movs	r3, #15
    3d10:	18fb      	adds	r3, r7, r3
    3d12:	781a      	ldrb	r2, [r3, #0]
    3d14:	4928      	ldr	r1, [pc, #160]	; (3db8 <_i2c_m_sync_init_impl+0x154>)
    3d16:	0013      	movs	r3, r2
    3d18:	005b      	lsls	r3, r3, #1
    3d1a:	189b      	adds	r3, r3, r2
    3d1c:	00db      	lsls	r3, r3, #3
    3d1e:	18cb      	adds	r3, r1, r3
    3d20:	3308      	adds	r3, #8
    3d22:	681a      	ldr	r2, [r3, #0]
    3d24:	683b      	ldr	r3, [r7, #0]
    3d26:	0011      	movs	r1, r2
    3d28:	0018      	movs	r0, r3
    3d2a:	4b28      	ldr	r3, [pc, #160]	; (3dcc <_i2c_m_sync_init_impl+0x168>)
    3d2c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    3d2e:	230f      	movs	r3, #15
    3d30:	18fb      	adds	r3, r7, r3
    3d32:	781a      	ldrb	r2, [r3, #0]
    3d34:	4920      	ldr	r1, [pc, #128]	; (3db8 <_i2c_m_sync_init_impl+0x154>)
    3d36:	0013      	movs	r3, r2
    3d38:	005b      	lsls	r3, r3, #1
    3d3a:	189b      	adds	r3, r3, r2
    3d3c:	00db      	lsls	r3, r3, #3
    3d3e:	18cb      	adds	r3, r1, r3
    3d40:	330c      	adds	r3, #12
    3d42:	681a      	ldr	r2, [r3, #0]
    3d44:	683b      	ldr	r3, [r7, #0]
    3d46:	0011      	movs	r1, r2
    3d48:	0018      	movs	r0, r3
    3d4a:	4b21      	ldr	r3, [pc, #132]	; (3dd0 <_i2c_m_sync_init_impl+0x16c>)
    3d4c:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    3d4e:	230f      	movs	r3, #15
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	781a      	ldrb	r2, [r3, #0]
    3d54:	4918      	ldr	r1, [pc, #96]	; (3db8 <_i2c_m_sync_init_impl+0x154>)
    3d56:	0013      	movs	r3, r2
    3d58:	005b      	lsls	r3, r3, #1
    3d5a:	189b      	adds	r3, r3, r2
    3d5c:	00db      	lsls	r3, r3, #3
    3d5e:	18cb      	adds	r3, r1, r3
    3d60:	3304      	adds	r3, #4
    3d62:	681b      	ldr	r3, [r3, #0]
    3d64:	0e1b      	lsrs	r3, r3, #24
    3d66:	b29b      	uxth	r3, r3
    3d68:	2203      	movs	r2, #3
    3d6a:	4013      	ands	r3, r2
    3d6c:	b29a      	uxth	r2, r3
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	899b      	ldrh	r3, [r3, #12]
    3d76:	2201      	movs	r2, #1
    3d78:	429a      	cmp	r2, r3
    3d7a:	419b      	sbcs	r3, r3
    3d7c:	425b      	negs	r3, r3
    3d7e:	b2da      	uxtb	r2, r3
    3d80:	683b      	ldr	r3, [r7, #0]
    3d82:	0011      	movs	r1, r2
    3d84:	0018      	movs	r0, r3
    3d86:	4b13      	ldr	r3, [pc, #76]	; (3dd4 <_i2c_m_sync_init_impl+0x170>)
    3d88:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    3d8a:	230f      	movs	r3, #15
    3d8c:	18fb      	adds	r3, r7, r3
    3d8e:	781a      	ldrb	r2, [r3, #0]
    3d90:	4909      	ldr	r1, [pc, #36]	; (3db8 <_i2c_m_sync_init_impl+0x154>)
    3d92:	0013      	movs	r3, r2
    3d94:	005b      	lsls	r3, r3, #1
    3d96:	189b      	adds	r3, r3, r2
    3d98:	00db      	lsls	r3, r3, #3
    3d9a:	18cb      	adds	r3, r1, r3
    3d9c:	3312      	adds	r3, #18
    3d9e:	881a      	ldrh	r2, [r3, #0]
    3da0:	687b      	ldr	r3, [r7, #4]
    3da2:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    3da4:	2300      	movs	r3, #0
}
    3da6:	0018      	movs	r0, r3
    3da8:	46bd      	mov	sp, r7
    3daa:	b004      	add	sp, #16
    3dac:	bd80      	pop	{r7, pc}
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	00003611 	.word	0x00003611
    3db4:	00002abb 	.word	0x00002abb
    3db8:	20000058 	.word	0x20000058
    3dbc:	00002ce9 	.word	0x00002ce9
    3dc0:	00002c95 	.word	0x00002c95
    3dc4:	00002a9d 	.word	0x00002a9d
    3dc8:	00002d19 	.word	0x00002d19
    3dcc:	00002eb1 	.word	0x00002eb1
    3dd0:	00002f01 	.word	0x00002f01
    3dd4:	00002f55 	.word	0x00002f55

00003dd8 <SERCOM0_Handler>:

	return NULL;
}

void SERCOM0_Handler(void)
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3ddc:	4b03      	ldr	r3, [pc, #12]	; (3dec <SERCOM0_Handler+0x14>)
    3dde:	681b      	ldr	r3, [r3, #0]
    3de0:	0018      	movs	r0, r3
    3de2:	4b03      	ldr	r3, [pc, #12]	; (3df0 <SERCOM0_Handler+0x18>)
    3de4:	4798      	blx	r3
}
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	46bd      	mov	sp, r7
    3dea:	bd80      	pop	{r7, pc}
    3dec:	20000124 	.word	0x20000124
    3df0:	00003221 	.word	0x00003221

00003df4 <SERCOM4_Handler>:

void SERCOM4_Handler(void)
{
    3df4:	b580      	push	{r7, lr}
    3df6:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3df8:	4b03      	ldr	r3, [pc, #12]	; (3e08 <SERCOM4_Handler+0x14>)
    3dfa:	681b      	ldr	r3, [r3, #0]
    3dfc:	0018      	movs	r0, r3
    3dfe:	4b03      	ldr	r3, [pc, #12]	; (3e0c <SERCOM4_Handler+0x18>)
    3e00:	4798      	blx	r3
}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	46bd      	mov	sp, r7
    3e06:	bd80      	pop	{r7, pc}
    3e08:	20000128 	.word	0x20000128
    3e0c:	00003221 	.word	0x00003221

00003e10 <SERCOM5_Handler>:

void SERCOM5_Handler(void)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3e14:	4b03      	ldr	r3, [pc, #12]	; (3e24 <SERCOM5_Handler+0x14>)
    3e16:	681b      	ldr	r3, [r3, #0]
    3e18:	0018      	movs	r0, r3
    3e1a:	4b03      	ldr	r3, [pc, #12]	; (3e28 <SERCOM5_Handler+0x18>)
    3e1c:	4798      	blx	r3
}
    3e1e:	46c0      	nop			; (mov r8, r8)
    3e20:	46bd      	mov	sp, r7
    3e22:	bd80      	pop	{r7, pc}
    3e24:	2000012c 	.word	0x2000012c
    3e28:	00003221 	.word	0x00003221

00003e2c <hri_sysctrl_get_PCLKSR_OSC8MRDY_bit>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
    3e2c:	b580      	push	{r7, lr}
    3e2e:	b082      	sub	sp, #8
    3e30:	af00      	add	r7, sp, #0
    3e32:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3e34:	687b      	ldr	r3, [r7, #4]
    3e36:	68db      	ldr	r3, [r3, #12]
    3e38:	08db      	lsrs	r3, r3, #3
    3e3a:	2201      	movs	r2, #1
    3e3c:	4013      	ands	r3, r2
    3e3e:	1e5a      	subs	r2, r3, #1
    3e40:	4193      	sbcs	r3, r2
    3e42:	b2db      	uxtb	r3, r3
}
    3e44:	0018      	movs	r0, r3
    3e46:	46bd      	mov	sp, r7
    3e48:	b002      	add	sp, #8
    3e4a:	bd80      	pop	{r7, pc}

00003e4c <hri_sysctrl_set_OSC32K_ENABLE_bit>:
{
	return ((Sysctrl *)hw)->XOSC32K.reg;
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
    3e4c:	b580      	push	{r7, lr}
    3e4e:	b082      	sub	sp, #8
    3e50:	af00      	add	r7, sp, #0
    3e52:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3e54:	687b      	ldr	r3, [r7, #4]
    3e56:	699b      	ldr	r3, [r3, #24]
    3e58:	2202      	movs	r2, #2
    3e5a:	431a      	orrs	r2, r3
    3e5c:	687b      	ldr	r3, [r7, #4]
    3e5e:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3e60:	46c0      	nop			; (mov r8, r8)
    3e62:	46bd      	mov	sp, r7
    3e64:	b002      	add	sp, #8
    3e66:	bd80      	pop	{r7, pc}

00003e68 <hri_sysctrl_clear_OSC32K_ENABLE_bit>:
	((Sysctrl *)hw)->OSC32K.reg = tmp;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_clear_OSC32K_ENABLE_bit(const void *const hw)
{
    3e68:	b580      	push	{r7, lr}
    3e6a:	b082      	sub	sp, #8
    3e6c:	af00      	add	r7, sp, #0
    3e6e:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    3e70:	687b      	ldr	r3, [r7, #4]
    3e72:	699b      	ldr	r3, [r3, #24]
    3e74:	2202      	movs	r2, #2
    3e76:	4393      	bics	r3, r2
    3e78:	001a      	movs	r2, r3
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3e7e:	46c0      	nop			; (mov r8, r8)
    3e80:	46bd      	mov	sp, r7
    3e82:	b002      	add	sp, #8
    3e84:	bd80      	pop	{r7, pc}

00003e86 <hri_sysctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
    3e86:	b580      	push	{r7, lr}
    3e88:	b082      	sub	sp, #8
    3e8a:	af00      	add	r7, sp, #0
    3e8c:	6078      	str	r0, [r7, #4]
    3e8e:	000a      	movs	r2, r1
    3e90:	1cfb      	adds	r3, r7, #3
    3e92:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	1cfa      	adds	r2, r7, #3
    3e98:	7812      	ldrb	r2, [r2, #0]
    3e9a:	771a      	strb	r2, [r3, #28]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3e9c:	46c0      	nop			; (mov r8, r8)
    3e9e:	46bd      	mov	sp, r7
    3ea0:	b002      	add	sp, #8
    3ea2:	bd80      	pop	{r7, pc}

00003ea4 <hri_sysctrl_set_OSC8M_ONDEMAND_bit>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_RUNSTDBY;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_set_OSC8M_ONDEMAND_bit(const void *const hw)
{
    3ea4:	b580      	push	{r7, lr}
    3ea6:	b082      	sub	sp, #8
    3ea8:	af00      	add	r7, sp, #0
    3eaa:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    3eac:	687b      	ldr	r3, [r7, #4]
    3eae:	6a1b      	ldr	r3, [r3, #32]
    3eb0:	2280      	movs	r2, #128	; 0x80
    3eb2:	431a      	orrs	r2, r3
    3eb4:	687b      	ldr	r3, [r7, #4]
    3eb6:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3eb8:	46c0      	nop			; (mov r8, r8)
    3eba:	46bd      	mov	sp, r7
    3ebc:	b002      	add	sp, #8
    3ebe:	bd80      	pop	{r7, pc}

00003ec0 <hri_sysctrl_read_OSC8M_CALIB_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b084      	sub	sp, #16
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	6a1b      	ldr	r3, [r3, #32]
    3ecc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    3ece:	68fb      	ldr	r3, [r7, #12]
    3ed0:	0c1b      	lsrs	r3, r3, #16
    3ed2:	051b      	lsls	r3, r3, #20
    3ed4:	0d1b      	lsrs	r3, r3, #20
    3ed6:	60fb      	str	r3, [r7, #12]
	return tmp;
    3ed8:	68fb      	ldr	r3, [r7, #12]
}
    3eda:	0018      	movs	r0, r3
    3edc:	46bd      	mov	sp, r7
    3ede:	b004      	add	sp, #16
    3ee0:	bd80      	pop	{r7, pc}

00003ee2 <hri_sysctrl_read_OSC8M_FRANGE_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_FRANGE(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
    3ee2:	b580      	push	{r7, lr}
    3ee4:	b084      	sub	sp, #16
    3ee6:	af00      	add	r7, sp, #0
    3ee8:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	6a1b      	ldr	r3, [r3, #32]
    3eee:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    3ef0:	68fb      	ldr	r3, [r7, #12]
    3ef2:	0f9b      	lsrs	r3, r3, #30
    3ef4:	60fb      	str	r3, [r7, #12]
	return tmp;
    3ef6:	68fb      	ldr	r3, [r7, #12]
}
    3ef8:	0018      	movs	r0, r3
    3efa:	46bd      	mov	sp, r7
    3efc:	b004      	add	sp, #16
    3efe:	bd80      	pop	{r7, pc}

00003f00 <hri_sysctrl_write_OSC8M_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	b082      	sub	sp, #8
    3f04:	af00      	add	r7, sp, #0
    3f06:	6078      	str	r0, [r7, #4]
    3f08:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    3f0a:	687b      	ldr	r3, [r7, #4]
    3f0c:	683a      	ldr	r2, [r7, #0]
    3f0e:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3f10:	46c0      	nop			; (mov r8, r8)
    3f12:	46bd      	mov	sp, r7
    3f14:	b002      	add	sp, #8
    3f16:	bd80      	pop	{r7, pc}

00003f18 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	b082      	sub	sp, #8
    3f1c:	af00      	add	r7, sp, #0
	void *   hw = (void *)SYSCTRL;
    3f1e:	4b20      	ldr	r3, [pc, #128]	; (3fa0 <_sysctrl_init_sources+0x88>)
    3f20:	607b      	str	r3, [r7, #4]
	        | (CONF_XOSC_RUNSTDBY << SYSCTRL_XOSC_RUNSTDBY_Pos) | (CONF_XOSC_XTALEN << SYSCTRL_XOSC_XTALEN_Pos)
	        | (CONF_XOSC_ENABLE << SYSCTRL_XOSC_ENABLE_Pos));
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	0018      	movs	r0, r3
    3f26:	4b1f      	ldr	r3, [pc, #124]	; (3fa4 <_sysctrl_init_sources+0x8c>)
    3f28:	4798      	blx	r3
    3f2a:	0002      	movs	r2, r0
    3f2c:	1cbb      	adds	r3, r7, #2
    3f2e:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	0018      	movs	r0, r3
    3f34:	4b1c      	ldr	r3, [pc, #112]	; (3fa8 <_sysctrl_init_sources+0x90>)
    3f36:	4798      	blx	r3
    3f38:	0003      	movs	r3, r0
    3f3a:	079a      	lsls	r2, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    3f3c:	1cbb      	adds	r3, r7, #2
    3f3e:	881b      	ldrh	r3, [r3, #0]
    3f40:	041b      	lsls	r3, r3, #16
    3f42:	0019      	movs	r1, r3
    3f44:	4b19      	ldr	r3, [pc, #100]	; (3fac <_sysctrl_init_sources+0x94>)
    3f46:	400b      	ands	r3, r1
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    3f48:	4313      	orrs	r3, r2
	hri_sysctrl_write_OSC8M_reg(hw,
    3f4a:	2202      	movs	r2, #2
    3f4c:	431a      	orrs	r2, r3
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	0011      	movs	r1, r2
    3f52:	0018      	movs	r0, r3
    3f54:	4b16      	ldr	r3, [pc, #88]	; (3fb0 <_sysctrl_init_sources+0x98>)
    3f56:	4798      	blx	r3
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
#else
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	0018      	movs	r0, r3
    3f5c:	4b15      	ldr	r3, [pc, #84]	; (3fb4 <_sysctrl_init_sources+0x9c>)
    3f5e:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	hri_sysctrl_write_OSCULP32K_reg(hw,
    3f60:	1cbb      	adds	r3, r7, #2
    3f62:	881b      	ldrh	r3, [r3, #0]
    3f64:	b2db      	uxtb	r3, r3
    3f66:	221f      	movs	r2, #31
    3f68:	4013      	ands	r3, r2
    3f6a:	b2da      	uxtb	r2, r3
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	0011      	movs	r1, r2
    3f70:	0018      	movs	r0, r3
    3f72:	4b11      	ldr	r3, [pc, #68]	; (3fb8 <_sysctrl_init_sources+0xa0>)
    3f74:	4798      	blx	r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	0018      	movs	r0, r3
    3f7c:	4b0f      	ldr	r3, [pc, #60]	; (3fbc <_sysctrl_init_sources+0xa4>)
    3f7e:	4798      	blx	r3
    3f80:	0003      	movs	r3, r0
    3f82:	001a      	movs	r2, r3
    3f84:	2301      	movs	r3, #1
    3f86:	4053      	eors	r3, r2
    3f88:	b2db      	uxtb	r3, r3
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d1f4      	bne.n	3f78 <_sysctrl_init_sources+0x60>
		;
#endif
#if CONF_OSC8M_ONDEMAND == 1
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	0018      	movs	r0, r3
    3f92:	4b0b      	ldr	r3, [pc, #44]	; (3fc0 <_sysctrl_init_sources+0xa8>)
    3f94:	4798      	blx	r3
#endif
#endif

	(void)calib, (void)hw;
}
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	46bd      	mov	sp, r7
    3f9a:	b002      	add	sp, #8
    3f9c:	bd80      	pop	{r7, pc}
    3f9e:	46c0      	nop			; (mov r8, r8)
    3fa0:	40000800 	.word	0x40000800
    3fa4:	00003ec1 	.word	0x00003ec1
    3fa8:	00003ee3 	.word	0x00003ee3
    3fac:	0fff0000 	.word	0x0fff0000
    3fb0:	00003f01 	.word	0x00003f01
    3fb4:	00003e4d 	.word	0x00003e4d
    3fb8:	00003e87 	.word	0x00003e87
    3fbc:	00003e2d 	.word	0x00003e2d
    3fc0:	00003ea5 	.word	0x00003ea5

00003fc4 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    3fc4:	b580      	push	{r7, lr}
    3fc6:	b082      	sub	sp, #8
    3fc8:	af00      	add	r7, sp, #0
	void *hw = (void *)SYSCTRL;
    3fca:	4b05      	ldr	r3, [pc, #20]	; (3fe0 <_sysctrl_init_referenced_generators+0x1c>)
    3fcc:	607b      	str	r3, [r7, #4]
		;
#endif

#if CONF_OSC32K_CONFIG == 0 || CONF_OSC32K_ENABLE == 0
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	0018      	movs	r0, r3
    3fd2:	4b04      	ldr	r3, [pc, #16]	; (3fe4 <_sysctrl_init_referenced_generators+0x20>)
    3fd4:	4798      	blx	r3
#endif

	(void)hw;
}
    3fd6:	46c0      	nop			; (mov r8, r8)
    3fd8:	46bd      	mov	sp, r7
    3fda:	b002      	add	sp, #8
    3fdc:	bd80      	pop	{r7, pc}
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	40000800 	.word	0x40000800
    3fe4:	00003e69 	.word	0x00003e69

00003fe8 <__NVIC_EnableIRQ>:
{
    3fe8:	b580      	push	{r7, lr}
    3fea:	b082      	sub	sp, #8
    3fec:	af00      	add	r7, sp, #0
    3fee:	0002      	movs	r2, r0
    3ff0:	1dfb      	adds	r3, r7, #7
    3ff2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3ff4:	1dfb      	adds	r3, r7, #7
    3ff6:	781b      	ldrb	r3, [r3, #0]
    3ff8:	2b7f      	cmp	r3, #127	; 0x7f
    3ffa:	d809      	bhi.n	4010 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ffc:	4b06      	ldr	r3, [pc, #24]	; (4018 <__NVIC_EnableIRQ+0x30>)
    3ffe:	1dfa      	adds	r2, r7, #7
    4000:	7812      	ldrb	r2, [r2, #0]
    4002:	0011      	movs	r1, r2
    4004:	221f      	movs	r2, #31
    4006:	400a      	ands	r2, r1
    4008:	2101      	movs	r1, #1
    400a:	4091      	lsls	r1, r2
    400c:	000a      	movs	r2, r1
    400e:	601a      	str	r2, [r3, #0]
}
    4010:	46c0      	nop			; (mov r8, r8)
    4012:	46bd      	mov	sp, r7
    4014:	b002      	add	sp, #8
    4016:	bd80      	pop	{r7, pc}
    4018:	e000e100 	.word	0xe000e100

0000401c <__NVIC_DisableIRQ>:
{
    401c:	b580      	push	{r7, lr}
    401e:	b082      	sub	sp, #8
    4020:	af00      	add	r7, sp, #0
    4022:	0002      	movs	r2, r0
    4024:	1dfb      	adds	r3, r7, #7
    4026:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    4028:	1dfb      	adds	r3, r7, #7
    402a:	781b      	ldrb	r3, [r3, #0]
    402c:	2b7f      	cmp	r3, #127	; 0x7f
    402e:	d80e      	bhi.n	404e <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4030:	4909      	ldr	r1, [pc, #36]	; (4058 <__NVIC_DisableIRQ+0x3c>)
    4032:	1dfb      	adds	r3, r7, #7
    4034:	781b      	ldrb	r3, [r3, #0]
    4036:	001a      	movs	r2, r3
    4038:	231f      	movs	r3, #31
    403a:	4013      	ands	r3, r2
    403c:	2201      	movs	r2, #1
    403e:	409a      	lsls	r2, r3
    4040:	0013      	movs	r3, r2
    4042:	2280      	movs	r2, #128	; 0x80
    4044:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    4046:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    404a:	f3bf 8f6f 	isb	sy
}
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	46bd      	mov	sp, r7
    4052:	b002      	add	sp, #8
    4054:	bd80      	pop	{r7, pc}
    4056:	46c0      	nop			; (mov r8, r8)
    4058:	e000e100 	.word	0xe000e100

0000405c <__NVIC_ClearPendingIRQ>:
{
    405c:	b580      	push	{r7, lr}
    405e:	b082      	sub	sp, #8
    4060:	af00      	add	r7, sp, #0
    4062:	0002      	movs	r2, r0
    4064:	1dfb      	adds	r3, r7, #7
    4066:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    4068:	1dfb      	adds	r3, r7, #7
    406a:	781b      	ldrb	r3, [r3, #0]
    406c:	2b7f      	cmp	r3, #127	; 0x7f
    406e:	d80a      	bhi.n	4086 <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4070:	4907      	ldr	r1, [pc, #28]	; (4090 <__NVIC_ClearPendingIRQ+0x34>)
    4072:	1dfb      	adds	r3, r7, #7
    4074:	781b      	ldrb	r3, [r3, #0]
    4076:	001a      	movs	r2, r3
    4078:	231f      	movs	r3, #31
    407a:	4013      	ands	r3, r2
    407c:	2201      	movs	r2, #1
    407e:	409a      	lsls	r2, r3
    4080:	23c0      	movs	r3, #192	; 0xc0
    4082:	005b      	lsls	r3, r3, #1
    4084:	50ca      	str	r2, [r1, r3]
}
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	46bd      	mov	sp, r7
    408a:	b002      	add	sp, #8
    408c:	bd80      	pop	{r7, pc}
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	e000e100 	.word	0xe000e100

00004094 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    4094:	b580      	push	{r7, lr}
    4096:	b082      	sub	sp, #8
    4098:	af00      	add	r7, sp, #0
    409a:	6078      	str	r0, [r7, #4]
    409c:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    409e:	46c0      	nop			; (mov r8, r8)
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	689b      	ldr	r3, [r3, #8]
    40a4:	683a      	ldr	r2, [r7, #0]
    40a6:	4013      	ands	r3, r2
    40a8:	d1fa      	bne.n	40a0 <hri_tcc_wait_for_sync+0xc>
	};
}
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	46bd      	mov	sp, r7
    40ae:	b002      	add	sp, #8
    40b0:	bd80      	pop	{r7, pc}

000040b2 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    40b2:	b580      	push	{r7, lr}
    40b4:	b082      	sub	sp, #8
    40b6:	af00      	add	r7, sp, #0
    40b8:	6078      	str	r0, [r7, #4]
    40ba:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	689b      	ldr	r3, [r3, #8]
    40c0:	683a      	ldr	r2, [r7, #0]
    40c2:	4013      	ands	r3, r2
    40c4:	1e5a      	subs	r2, r3, #1
    40c6:	4193      	sbcs	r3, r2
    40c8:	b2db      	uxtb	r3, r3
}
    40ca:	0018      	movs	r0, r3
    40cc:	46bd      	mov	sp, r7
    40ce:	b002      	add	sp, #8
    40d0:	bd80      	pop	{r7, pc}

000040d2 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC3;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    40d2:	b580      	push	{r7, lr}
    40d4:	b082      	sub	sp, #8
    40d6:	af00      	add	r7, sp, #0
    40d8:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    40de:	2201      	movs	r2, #1
    40e0:	4013      	ands	r3, r2
    40e2:	1e5a      	subs	r2, r3, #1
    40e4:	4193      	sbcs	r3, r2
    40e6:	b2db      	uxtb	r3, r3
}
    40e8:	0018      	movs	r0, r3
    40ea:	46bd      	mov	sp, r7
    40ec:	b002      	add	sp, #8
    40ee:	bd80      	pop	{r7, pc}

000040f0 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    40f0:	b580      	push	{r7, lr}
    40f2:	b082      	sub	sp, #8
    40f4:	af00      	add	r7, sp, #0
    40f6:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    40f8:	687b      	ldr	r3, [r7, #4]
    40fa:	2201      	movs	r2, #1
    40fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	46bd      	mov	sp, r7
    4102:	b002      	add	sp, #8
    4104:	bd80      	pop	{r7, pc}

00004106 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    4106:	b580      	push	{r7, lr}
    4108:	b082      	sub	sp, #8
    410a:	af00      	add	r7, sp, #0
    410c:	6078      	str	r0, [r7, #4]
    410e:	000a      	movs	r2, r1
    4110:	1cfb      	adds	r3, r7, #3
    4112:	701a      	strb	r2, [r3, #0]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	1cfa      	adds	r2, r7, #3
    4118:	7812      	ldrb	r2, [r2, #0]
    411a:	715a      	strb	r2, [r3, #5]
}
    411c:	46c0      	nop			; (mov r8, r8)
    411e:	46bd      	mov	sp, r7
    4120:	b002      	add	sp, #8
    4122:	bd80      	pop	{r7, pc}

00004124 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    4124:	b580      	push	{r7, lr}
    4126:	b082      	sub	sp, #8
    4128:	af00      	add	r7, sp, #0
    412a:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	2201      	movs	r2, #1
    4130:	629a      	str	r2, [r3, #40]	; 0x28
}
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	46bd      	mov	sp, r7
    4136:	b002      	add	sp, #8
    4138:	bd80      	pop	{r7, pc}
	...

0000413c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    413c:	b580      	push	{r7, lr}
    413e:	b082      	sub	sp, #8
    4140:	af00      	add	r7, sp, #0
    4142:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	681b      	ldr	r3, [r3, #0]
    4148:	2202      	movs	r2, #2
    414a:	4393      	bics	r3, r2
    414c:	001a      	movs	r2, r3
    414e:	687b      	ldr	r3, [r7, #4]
    4150:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	2103      	movs	r1, #3
    4156:	0018      	movs	r0, r3
    4158:	4b02      	ldr	r3, [pc, #8]	; (4164 <hri_tcc_clear_CTRLA_ENABLE_bit+0x28>)
    415a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    415c:	46c0      	nop			; (mov r8, r8)
    415e:	46bd      	mov	sp, r7
    4160:	b002      	add	sp, #8
    4162:	bd80      	pop	{r7, pc}
    4164:	00004095 	.word	0x00004095

00004168 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    4168:	b580      	push	{r7, lr}
    416a:	b084      	sub	sp, #16
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
    4170:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	2103      	movs	r1, #3
    4176:	0018      	movs	r0, r3
    4178:	4b06      	ldr	r3, [pc, #24]	; (4194 <hri_tcc_get_CTRLA_reg+0x2c>)
    417a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	681b      	ldr	r3, [r3, #0]
    4180:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4182:	68fb      	ldr	r3, [r7, #12]
    4184:	683a      	ldr	r2, [r7, #0]
    4186:	4013      	ands	r3, r2
    4188:	60fb      	str	r3, [r7, #12]
	return tmp;
    418a:	68fb      	ldr	r3, [r7, #12]
}
    418c:	0018      	movs	r0, r3
    418e:	46bd      	mov	sp, r7
    4190:	b004      	add	sp, #16
    4192:	bd80      	pop	{r7, pc}
    4194:	00004095 	.word	0x00004095

00004198 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    4198:	b580      	push	{r7, lr}
    419a:	b082      	sub	sp, #8
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
    41a0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	683a      	ldr	r2, [r7, #0]
    41a6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	2103      	movs	r1, #3
    41ac:	0018      	movs	r0, r3
    41ae:	4b03      	ldr	r3, [pc, #12]	; (41bc <hri_tcc_write_CTRLA_reg+0x24>)
    41b0:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    41b2:	46c0      	nop			; (mov r8, r8)
    41b4:	46bd      	mov	sp, r7
    41b6:	b002      	add	sp, #8
    41b8:	bd80      	pop	{r7, pc}
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	00004095 	.word	0x00004095

000041c0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    41c0:	b580      	push	{r7, lr}
    41c2:	b082      	sub	sp, #8
    41c4:	af00      	add	r7, sp, #0
    41c6:	6078      	str	r0, [r7, #4]
    41c8:	000a      	movs	r2, r1
    41ca:	1cfb      	adds	r3, r7, #3
    41cc:	701a      	strb	r2, [r3, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	1cfa      	adds	r2, r7, #3
    41d2:	7812      	ldrb	r2, [r2, #0]
    41d4:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    41d6:	46c0      	nop			; (mov r8, r8)
    41d8:	46bd      	mov	sp, r7
    41da:	b002      	add	sp, #8
    41dc:	bd80      	pop	{r7, pc}

000041de <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    41de:	b580      	push	{r7, lr}
    41e0:	b082      	sub	sp, #8
    41e2:	af00      	add	r7, sp, #0
    41e4:	6078      	str	r0, [r7, #4]
    41e6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	683a      	ldr	r2, [r7, #0]
    41ec:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    41ee:	46c0      	nop			; (mov r8, r8)
    41f0:	46bd      	mov	sp, r7
    41f2:	b002      	add	sp, #8
    41f4:	bd80      	pop	{r7, pc}
	...

000041f8 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    41f8:	b580      	push	{r7, lr}
    41fa:	b082      	sub	sp, #8
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    4200:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    4202:	687b      	ldr	r3, [r7, #4]
    4204:	683a      	ldr	r2, [r7, #0]
    4206:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	2180      	movs	r1, #128	; 0x80
    420c:	0018      	movs	r0, r3
    420e:	4b03      	ldr	r3, [pc, #12]	; (421c <hri_tcc_write_PER_reg+0x24>)
    4210:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    4212:	46c0      	nop			; (mov r8, r8)
    4214:	46bd      	mov	sp, r7
    4216:	b002      	add	sp, #8
    4218:	bd80      	pop	{r7, pc}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	00004095 	.word	0x00004095

00004220 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    4220:	b580      	push	{r7, lr}
    4222:	b082      	sub	sp, #8
    4224:	af00      	add	r7, sp, #0
    4226:	6078      	str	r0, [r7, #4]
    4228:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	4a04      	ldr	r2, [pc, #16]	; (4240 <_tcc_init_irq_param+0x20>)
    422e:	4293      	cmp	r3, r2
    4230:	d102      	bne.n	4238 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    4232:	4b04      	ldr	r3, [pc, #16]	; (4244 <_tcc_init_irq_param+0x24>)
    4234:	683a      	ldr	r2, [r7, #0]
    4236:	601a      	str	r2, [r3, #0]
	}
}
    4238:	46c0      	nop			; (mov r8, r8)
    423a:	46bd      	mov	sp, r7
    423c:	b002      	add	sp, #8
    423e:	bd80      	pop	{r7, pc}
    4240:	42002000 	.word	0x42002000
    4244:	20000140 	.word	0x20000140

00004248 <_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    4248:	b580      	push	{r7, lr}
    424a:	b084      	sub	sp, #16
    424c:	af00      	add	r7, sp, #0
    424e:	6078      	str	r0, [r7, #4]
    4250:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    4252:	683b      	ldr	r3, [r7, #0]
    4254:	0018      	movs	r0, r3
    4256:	4b3b      	ldr	r3, [pc, #236]	; (4344 <_timer_init+0xfc>)
    4258:	4798      	blx	r3
    425a:	0003      	movs	r3, r0
    425c:	60fb      	str	r3, [r7, #12]
	if (cfg == NULL) {
    425e:	68fb      	ldr	r3, [r7, #12]
    4260:	2b00      	cmp	r3, #0
    4262:	d102      	bne.n	426a <_timer_init+0x22>
		return ERR_NOT_FOUND;
    4264:	230a      	movs	r3, #10
    4266:	425b      	negs	r3, r3
    4268:	e068      	b.n	433c <_timer_init+0xf4>
	}

	device->hw = hw;
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	683a      	ldr	r2, [r7, #0]
    426e:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    4270:	683b      	ldr	r3, [r7, #0]
    4272:	2101      	movs	r1, #1
    4274:	0018      	movs	r0, r3
    4276:	4b34      	ldr	r3, [pc, #208]	; (4348 <_timer_init+0x100>)
    4278:	4798      	blx	r3
    427a:	0003      	movs	r3, r0
    427c:	001a      	movs	r2, r3
    427e:	2301      	movs	r3, #1
    4280:	4053      	eors	r3, r2
    4282:	b2db      	uxtb	r3, r3
    4284:	2b00      	cmp	r3, #0
    4286:	d014      	beq.n	42b2 <_timer_init+0x6a>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    4288:	683b      	ldr	r3, [r7, #0]
    428a:	2102      	movs	r1, #2
    428c:	0018      	movs	r0, r3
    428e:	4b2f      	ldr	r3, [pc, #188]	; (434c <_timer_init+0x104>)
    4290:	4798      	blx	r3
    4292:	1e03      	subs	r3, r0, #0
    4294:	d008      	beq.n	42a8 <_timer_init+0x60>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    4296:	683b      	ldr	r3, [r7, #0]
    4298:	0018      	movs	r0, r3
    429a:	4b2d      	ldr	r3, [pc, #180]	; (4350 <_timer_init+0x108>)
    429c:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    429e:	683b      	ldr	r3, [r7, #0]
    42a0:	2102      	movs	r1, #2
    42a2:	0018      	movs	r0, r3
    42a4:	4b2b      	ldr	r3, [pc, #172]	; (4354 <_timer_init+0x10c>)
    42a6:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    42a8:	683b      	ldr	r3, [r7, #0]
    42aa:	2101      	movs	r1, #1
    42ac:	0018      	movs	r0, r3
    42ae:	4b2a      	ldr	r3, [pc, #168]	; (4358 <_timer_init+0x110>)
    42b0:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    42b2:	683b      	ldr	r3, [r7, #0]
    42b4:	2101      	movs	r1, #1
    42b6:	0018      	movs	r0, r3
    42b8:	4b26      	ldr	r3, [pc, #152]	; (4354 <_timer_init+0x10c>)
    42ba:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    42bc:	68fb      	ldr	r3, [r7, #12]
    42be:	689a      	ldr	r2, [r3, #8]
    42c0:	683b      	ldr	r3, [r7, #0]
    42c2:	0011      	movs	r1, r2
    42c4:	0018      	movs	r0, r3
    42c6:	4b24      	ldr	r3, [pc, #144]	; (4358 <_timer_init+0x110>)
    42c8:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    42ca:	68fb      	ldr	r3, [r7, #12]
    42cc:	7b1a      	ldrb	r2, [r3, #12]
    42ce:	683b      	ldr	r3, [r7, #0]
    42d0:	0011      	movs	r1, r2
    42d2:	0018      	movs	r0, r3
    42d4:	4b21      	ldr	r3, [pc, #132]	; (435c <_timer_init+0x114>)
    42d6:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    42d8:	68fb      	ldr	r3, [r7, #12]
    42da:	7b5a      	ldrb	r2, [r3, #13]
    42dc:	683b      	ldr	r3, [r7, #0]
    42de:	0011      	movs	r1, r2
    42e0:	0018      	movs	r0, r3
    42e2:	4b1f      	ldr	r3, [pc, #124]	; (4360 <_timer_init+0x118>)
    42e4:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    42e6:	68fb      	ldr	r3, [r7, #12]
    42e8:	691a      	ldr	r2, [r3, #16]
    42ea:	683b      	ldr	r3, [r7, #0]
    42ec:	0011      	movs	r1, r2
    42ee:	0018      	movs	r0, r3
    42f0:	4b1c      	ldr	r3, [pc, #112]	; (4364 <_timer_init+0x11c>)
    42f2:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    42f4:	68fb      	ldr	r3, [r7, #12]
    42f6:	695a      	ldr	r2, [r3, #20]
    42f8:	683b      	ldr	r3, [r7, #0]
    42fa:	0011      	movs	r1, r2
    42fc:	0018      	movs	r0, r3
    42fe:	4b1a      	ldr	r3, [pc, #104]	; (4368 <_timer_init+0x120>)
    4300:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    4302:	683b      	ldr	r3, [r7, #0]
    4304:	0018      	movs	r0, r3
    4306:	4b19      	ldr	r3, [pc, #100]	; (436c <_timer_init+0x124>)
    4308:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    430a:	687a      	ldr	r2, [r7, #4]
    430c:	683b      	ldr	r3, [r7, #0]
    430e:	0011      	movs	r1, r2
    4310:	0018      	movs	r0, r3
    4312:	4b17      	ldr	r3, [pc, #92]	; (4370 <_timer_init+0x128>)
    4314:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    4316:	68fb      	ldr	r3, [r7, #12]
    4318:	791b      	ldrb	r3, [r3, #4]
    431a:	b25b      	sxtb	r3, r3
    431c:	0018      	movs	r0, r3
    431e:	4b15      	ldr	r3, [pc, #84]	; (4374 <_timer_init+0x12c>)
    4320:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    4322:	68fb      	ldr	r3, [r7, #12]
    4324:	791b      	ldrb	r3, [r3, #4]
    4326:	b25b      	sxtb	r3, r3
    4328:	0018      	movs	r0, r3
    432a:	4b13      	ldr	r3, [pc, #76]	; (4378 <_timer_init+0x130>)
    432c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    432e:	68fb      	ldr	r3, [r7, #12]
    4330:	791b      	ldrb	r3, [r3, #4]
    4332:	b25b      	sxtb	r3, r3
    4334:	0018      	movs	r0, r3
    4336:	4b11      	ldr	r3, [pc, #68]	; (437c <_timer_init+0x134>)
    4338:	4798      	blx	r3

	return ERR_NONE;
    433a:	2300      	movs	r3, #0
}
    433c:	0018      	movs	r0, r3
    433e:	46bd      	mov	sp, r7
    4340:	b004      	add	sp, #16
    4342:	bd80      	pop	{r7, pc}
    4344:	000043e5 	.word	0x000043e5
    4348:	000040b3 	.word	0x000040b3
    434c:	00004169 	.word	0x00004169
    4350:	0000413d 	.word	0x0000413d
    4354:	00004095 	.word	0x00004095
    4358:	00004199 	.word	0x00004199
    435c:	00004107 	.word	0x00004107
    4360:	000041c1 	.word	0x000041c1
    4364:	000041df 	.word	0x000041df
    4368:	000041f9 	.word	0x000041f9
    436c:	00004125 	.word	0x00004125
    4370:	00004221 	.word	0x00004221
    4374:	0000401d 	.word	0x0000401d
    4378:	0000405d 	.word	0x0000405d
    437c:	00003fe9 	.word	0x00003fe9

00004380 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    4380:	b580      	push	{r7, lr}
    4382:	af00      	add	r7, sp, #0
	return NULL;
    4384:	2300      	movs	r3, #0
}
    4386:	0018      	movs	r0, r3
    4388:	46bd      	mov	sp, r7
    438a:	bd80      	pop	{r7, pc}

0000438c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    438c:	b580      	push	{r7, lr}
    438e:	b084      	sub	sp, #16
    4390:	af00      	add	r7, sp, #0
    4392:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	68db      	ldr	r3, [r3, #12]
    4398:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	0018      	movs	r0, r3
    439e:	4b08      	ldr	r3, [pc, #32]	; (43c0 <tcc_interrupt_handler+0x34>)
    43a0:	4798      	blx	r3
    43a2:	1e03      	subs	r3, r0, #0
    43a4:	d008      	beq.n	43b8 <tcc_interrupt_handler+0x2c>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    43a6:	68fb      	ldr	r3, [r7, #12]
    43a8:	0018      	movs	r0, r3
    43aa:	4b06      	ldr	r3, [pc, #24]	; (43c4 <tcc_interrupt_handler+0x38>)
    43ac:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	687a      	ldr	r2, [r7, #4]
    43b4:	0010      	movs	r0, r2
    43b6:	4798      	blx	r3
	}
}
    43b8:	46c0      	nop			; (mov r8, r8)
    43ba:	46bd      	mov	sp, r7
    43bc:	b004      	add	sp, #16
    43be:	bd80      	pop	{r7, pc}
    43c0:	000040d3 	.word	0x000040d3
    43c4:	000040f1 	.word	0x000040f1

000043c8 <TCC0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_Handler(void)
{
    43c8:	b580      	push	{r7, lr}
    43ca:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    43cc:	4b03      	ldr	r3, [pc, #12]	; (43dc <TCC0_Handler+0x14>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	0018      	movs	r0, r3
    43d2:	4b03      	ldr	r3, [pc, #12]	; (43e0 <TCC0_Handler+0x18>)
    43d4:	4798      	blx	r3
}
    43d6:	46c0      	nop			; (mov r8, r8)
    43d8:	46bd      	mov	sp, r7
    43da:	bd80      	pop	{r7, pc}
    43dc:	20000140 	.word	0x20000140
    43e0:	0000438d 	.word	0x0000438d

000043e4 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    43e4:	b580      	push	{r7, lr}
    43e6:	b084      	sub	sp, #16
    43e8:	af00      	add	r7, sp, #0
    43ea:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    43ec:	230f      	movs	r3, #15
    43ee:	18fb      	adds	r3, r7, r3
    43f0:	2200      	movs	r2, #0
    43f2:	701a      	strb	r2, [r3, #0]
    43f4:	e01c      	b.n	4430 <_get_tcc_cfg+0x4c>
		if (_cfgs[i].hw == hw) {
    43f6:	230f      	movs	r3, #15
    43f8:	18fb      	adds	r3, r7, r3
    43fa:	781a      	ldrb	r2, [r3, #0]
    43fc:	4911      	ldr	r1, [pc, #68]	; (4444 <_get_tcc_cfg+0x60>)
    43fe:	0013      	movs	r3, r2
    4400:	009b      	lsls	r3, r3, #2
    4402:	189b      	adds	r3, r3, r2
    4404:	00db      	lsls	r3, r3, #3
    4406:	585a      	ldr	r2, [r3, r1]
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	429a      	cmp	r2, r3
    440c:	d109      	bne.n	4422 <_get_tcc_cfg+0x3e>
			return &(_cfgs[i]);
    440e:	230f      	movs	r3, #15
    4410:	18fb      	adds	r3, r7, r3
    4412:	781a      	ldrb	r2, [r3, #0]
    4414:	0013      	movs	r3, r2
    4416:	009b      	lsls	r3, r3, #2
    4418:	189b      	adds	r3, r3, r2
    441a:	00db      	lsls	r3, r3, #3
    441c:	4a09      	ldr	r2, [pc, #36]	; (4444 <_get_tcc_cfg+0x60>)
    441e:	189b      	adds	r3, r3, r2
    4420:	e00c      	b.n	443c <_get_tcc_cfg+0x58>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    4422:	230f      	movs	r3, #15
    4424:	18fb      	adds	r3, r7, r3
    4426:	781a      	ldrb	r2, [r3, #0]
    4428:	230f      	movs	r3, #15
    442a:	18fb      	adds	r3, r7, r3
    442c:	3201      	adds	r2, #1
    442e:	701a      	strb	r2, [r3, #0]
    4430:	230f      	movs	r3, #15
    4432:	18fb      	adds	r3, r7, r3
    4434:	781b      	ldrb	r3, [r3, #0]
    4436:	2b00      	cmp	r3, #0
    4438:	d0dd      	beq.n	43f6 <_get_tcc_cfg+0x12>
		}
	}
	return NULL;
    443a:	2300      	movs	r3, #0
}
    443c:	0018      	movs	r0, r3
    443e:	46bd      	mov	sp, r7
    4440:	b004      	add	sp, #16
    4442:	bd80      	pop	{r7, pc}
    4444:	20000070 	.word	0x20000070

00004448 <__NVIC_EnableIRQ>:
{
    4448:	b580      	push	{r7, lr}
    444a:	b082      	sub	sp, #8
    444c:	af00      	add	r7, sp, #0
    444e:	0002      	movs	r2, r0
    4450:	1dfb      	adds	r3, r7, #7
    4452:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    4454:	1dfb      	adds	r3, r7, #7
    4456:	781b      	ldrb	r3, [r3, #0]
    4458:	2b7f      	cmp	r3, #127	; 0x7f
    445a:	d809      	bhi.n	4470 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    445c:	4b06      	ldr	r3, [pc, #24]	; (4478 <__NVIC_EnableIRQ+0x30>)
    445e:	1dfa      	adds	r2, r7, #7
    4460:	7812      	ldrb	r2, [r2, #0]
    4462:	0011      	movs	r1, r2
    4464:	221f      	movs	r2, #31
    4466:	400a      	ands	r2, r1
    4468:	2101      	movs	r1, #1
    446a:	4091      	lsls	r1, r2
    446c:	000a      	movs	r2, r1
    446e:	601a      	str	r2, [r3, #0]
}
    4470:	46c0      	nop			; (mov r8, r8)
    4472:	46bd      	mov	sp, r7
    4474:	b002      	add	sp, #8
    4476:	bd80      	pop	{r7, pc}
    4478:	e000e100 	.word	0xe000e100

0000447c <__NVIC_DisableIRQ>:
{
    447c:	b580      	push	{r7, lr}
    447e:	b082      	sub	sp, #8
    4480:	af00      	add	r7, sp, #0
    4482:	0002      	movs	r2, r0
    4484:	1dfb      	adds	r3, r7, #7
    4486:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    4488:	1dfb      	adds	r3, r7, #7
    448a:	781b      	ldrb	r3, [r3, #0]
    448c:	2b7f      	cmp	r3, #127	; 0x7f
    448e:	d80e      	bhi.n	44ae <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4490:	4909      	ldr	r1, [pc, #36]	; (44b8 <__NVIC_DisableIRQ+0x3c>)
    4492:	1dfb      	adds	r3, r7, #7
    4494:	781b      	ldrb	r3, [r3, #0]
    4496:	001a      	movs	r2, r3
    4498:	231f      	movs	r3, #31
    449a:	4013      	ands	r3, r2
    449c:	2201      	movs	r2, #1
    449e:	409a      	lsls	r2, r3
    44a0:	0013      	movs	r3, r2
    44a2:	2280      	movs	r2, #128	; 0x80
    44a4:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    44a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    44aa:	f3bf 8f6f 	isb	sy
}
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	46bd      	mov	sp, r7
    44b2:	b002      	add	sp, #8
    44b4:	bd80      	pop	{r7, pc}
    44b6:	46c0      	nop			; (mov r8, r8)
    44b8:	e000e100 	.word	0xe000e100

000044bc <__NVIC_ClearPendingIRQ>:
{
    44bc:	b580      	push	{r7, lr}
    44be:	b082      	sub	sp, #8
    44c0:	af00      	add	r7, sp, #0
    44c2:	0002      	movs	r2, r0
    44c4:	1dfb      	adds	r3, r7, #7
    44c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    44c8:	1dfb      	adds	r3, r7, #7
    44ca:	781b      	ldrb	r3, [r3, #0]
    44cc:	2b7f      	cmp	r3, #127	; 0x7f
    44ce:	d80a      	bhi.n	44e6 <__NVIC_ClearPendingIRQ+0x2a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    44d0:	4907      	ldr	r1, [pc, #28]	; (44f0 <__NVIC_ClearPendingIRQ+0x34>)
    44d2:	1dfb      	adds	r3, r7, #7
    44d4:	781b      	ldrb	r3, [r3, #0]
    44d6:	001a      	movs	r2, r3
    44d8:	231f      	movs	r3, #31
    44da:	4013      	ands	r3, r2
    44dc:	2201      	movs	r2, #1
    44de:	409a      	lsls	r2, r3
    44e0:	23c0      	movs	r3, #192	; 0xc0
    44e2:	005b      	lsls	r3, r3, #1
    44e4:	50ca      	str	r2, [r1, r3]
}
    44e6:	46c0      	nop			; (mov r8, r8)
    44e8:	46bd      	mov	sp, r7
    44ea:	b002      	add	sp, #8
    44ec:	bd80      	pop	{r7, pc}
    44ee:	46c0      	nop			; (mov r8, r8)
    44f0:	e000e100 	.word	0xe000e100

000044f4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_cc_reg_t;
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
    44f4:	b580      	push	{r7, lr}
    44f6:	b082      	sub	sp, #8
    44f8:	af00      	add	r7, sp, #0
    44fa:	6078      	str	r0, [r7, #4]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    44fc:	46c0      	nop			; (mov r8, r8)
    44fe:	687b      	ldr	r3, [r7, #4]
    4500:	7bdb      	ldrb	r3, [r3, #15]
    4502:	061b      	lsls	r3, r3, #24
    4504:	0fdb      	lsrs	r3, r3, #31
    4506:	b2db      	uxtb	r3, r3
    4508:	2b00      	cmp	r3, #0
    450a:	d1f8      	bne.n	44fe <hri_tc_wait_for_sync+0xa>
		;
}
    450c:	46c0      	nop			; (mov r8, r8)
    450e:	46bd      	mov	sp, r7
    4510:	b002      	add	sp, #8
    4512:	bd80      	pop	{r7, pc}

00004514 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    4514:	b580      	push	{r7, lr}
    4516:	b082      	sub	sp, #8
    4518:	af00      	add	r7, sp, #0
    451a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	7b9b      	ldrb	r3, [r3, #14]
    4520:	b2db      	uxtb	r3, r3
    4522:	001a      	movs	r2, r3
    4524:	2301      	movs	r3, #1
    4526:	4013      	ands	r3, r2
    4528:	1e5a      	subs	r2, r3, #1
    452a:	4193      	sbcs	r3, r2
    452c:	b2db      	uxtb	r3, r3
}
    452e:	0018      	movs	r0, r3
    4530:	46bd      	mov	sp, r7
    4532:	b002      	add	sp, #8
    4534:	bd80      	pop	{r7, pc}

00004536 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    4536:	b580      	push	{r7, lr}
    4538:	b082      	sub	sp, #8
    453a:	af00      	add	r7, sp, #0
    453c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	2201      	movs	r2, #1
    4542:	739a      	strb	r2, [r3, #14]
}
    4544:	46c0      	nop			; (mov r8, r8)
    4546:	46bd      	mov	sp, r7
    4548:	b002      	add	sp, #8
    454a:	bd80      	pop	{r7, pc}

0000454c <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    454c:	b580      	push	{r7, lr}
    454e:	b082      	sub	sp, #8
    4550:	af00      	add	r7, sp, #0
    4552:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    4554:	687b      	ldr	r3, [r7, #4]
    4556:	2202      	movs	r2, #2
    4558:	739a      	strb	r2, [r3, #14]
}
    455a:	46c0      	nop			; (mov r8, r8)
    455c:	46bd      	mov	sp, r7
    455e:	b002      	add	sp, #8
    4560:	bd80      	pop	{r7, pc}

00004562 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    4562:	b580      	push	{r7, lr}
    4564:	b082      	sub	sp, #8
    4566:	af00      	add	r7, sp, #0
    4568:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	7b5b      	ldrb	r3, [r3, #13]
    456e:	b2db      	uxtb	r3, r3
    4570:	085b      	lsrs	r3, r3, #1
    4572:	2201      	movs	r2, #1
    4574:	4013      	ands	r3, r2
    4576:	1e5a      	subs	r2, r3, #1
    4578:	4193      	sbcs	r3, r2
    457a:	b2db      	uxtb	r3, r3
}
    457c:	0018      	movs	r0, r3
    457e:	46bd      	mov	sp, r7
    4580:	b002      	add	sp, #8
    4582:	bd80      	pop	{r7, pc}

00004584 <hri_tc_get_CTRLA_reg>:
	((Tc *)hw)->COUNT16.CTRLA.reg |= mask;
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    4584:	b580      	push	{r7, lr}
    4586:	b084      	sub	sp, #16
    4588:	af00      	add	r7, sp, #0
    458a:	6078      	str	r0, [r7, #4]
    458c:	000a      	movs	r2, r1
    458e:	1cbb      	adds	r3, r7, #2
    4590:	801a      	strh	r2, [r3, #0]
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4592:	230e      	movs	r3, #14
    4594:	18fb      	adds	r3, r7, r3
    4596:	687a      	ldr	r2, [r7, #4]
    4598:	8812      	ldrh	r2, [r2, #0]
    459a:	801a      	strh	r2, [r3, #0]
	tmp &= mask;
    459c:	230e      	movs	r3, #14
    459e:	18fb      	adds	r3, r7, r3
    45a0:	220e      	movs	r2, #14
    45a2:	18ba      	adds	r2, r7, r2
    45a4:	1cb9      	adds	r1, r7, #2
    45a6:	8812      	ldrh	r2, [r2, #0]
    45a8:	8809      	ldrh	r1, [r1, #0]
    45aa:	400a      	ands	r2, r1
    45ac:	801a      	strh	r2, [r3, #0]
	return tmp;
    45ae:	230e      	movs	r3, #14
    45b0:	18fb      	adds	r3, r7, r3
    45b2:	881b      	ldrh	r3, [r3, #0]
}
    45b4:	0018      	movs	r0, r3
    45b6:	46bd      	mov	sp, r7
    45b8:	b004      	add	sp, #16
    45ba:	bd80      	pop	{r7, pc}

000045bc <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    45bc:	b580      	push	{r7, lr}
    45be:	b082      	sub	sp, #8
    45c0:	af00      	add	r7, sp, #0
    45c2:	6078      	str	r0, [r7, #4]
    45c4:	000a      	movs	r2, r1
    45c6:	1cbb      	adds	r3, r7, #2
    45c8:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	1cba      	adds	r2, r7, #2
    45ce:	8812      	ldrh	r2, [r2, #0]
    45d0:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_LEAVE();
}
    45d2:	46c0      	nop			; (mov r8, r8)
    45d4:	46bd      	mov	sp, r7
    45d6:	b002      	add	sp, #8
    45d8:	bd80      	pop	{r7, pc}

000045da <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    45da:	b580      	push	{r7, lr}
    45dc:	b082      	sub	sp, #8
    45de:	af00      	add	r7, sp, #0
    45e0:	6078      	str	r0, [r7, #4]
    45e2:	000a      	movs	r2, r1
    45e4:	1cfb      	adds	r3, r7, #3
    45e6:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    45e8:	687b      	ldr	r3, [r7, #4]
    45ea:	1cfa      	adds	r2, r7, #3
    45ec:	7812      	ldrb	r2, [r2, #0]
    45ee:	721a      	strb	r2, [r3, #8]
	TC_CRITICAL_SECTION_LEAVE();
}
    45f0:	46c0      	nop			; (mov r8, r8)
    45f2:	46bd      	mov	sp, r7
    45f4:	b002      	add	sp, #8
    45f6:	bd80      	pop	{r7, pc}

000045f8 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    45f8:	b580      	push	{r7, lr}
    45fa:	b082      	sub	sp, #8
    45fc:	af00      	add	r7, sp, #0
    45fe:	6078      	str	r0, [r7, #4]
    4600:	000a      	movs	r2, r1
    4602:	1cbb      	adds	r3, r7, #2
    4604:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    4606:	687b      	ldr	r3, [r7, #4]
    4608:	1cba      	adds	r2, r7, #2
    460a:	8812      	ldrh	r2, [r2, #0]
    460c:	815a      	strh	r2, [r3, #10]
	TC_CRITICAL_SECTION_LEAVE();
}
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	46bd      	mov	sp, r7
    4612:	b002      	add	sp, #8
    4614:	bd80      	pop	{r7, pc}

00004616 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    4616:	b580      	push	{r7, lr}
    4618:	b082      	sub	sp, #8
    461a:	af00      	add	r7, sp, #0
    461c:	6078      	str	r0, [r7, #4]
    461e:	0008      	movs	r0, r1
    4620:	0011      	movs	r1, r2
    4622:	1cfb      	adds	r3, r7, #3
    4624:	1c02      	adds	r2, r0, #0
    4626:	701a      	strb	r2, [r3, #0]
    4628:	003b      	movs	r3, r7
    462a:	1c0a      	adds	r2, r1, #0
    462c:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    462e:	1cfb      	adds	r3, r7, #3
    4630:	781a      	ldrb	r2, [r3, #0]
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	320c      	adds	r2, #12
    4636:	0052      	lsls	r2, r2, #1
    4638:	0039      	movs	r1, r7
    463a:	8809      	ldrh	r1, [r1, #0]
    463c:	52d1      	strh	r1, [r2, r3]
	TC_CRITICAL_SECTION_LEAVE();
}
    463e:	46c0      	nop			; (mov r8, r8)
    4640:	46bd      	mov	sp, r7
    4642:	b002      	add	sp, #8
    4644:	bd80      	pop	{r7, pc}

00004646 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    4646:	b580      	push	{r7, lr}
    4648:	b084      	sub	sp, #16
    464a:	af00      	add	r7, sp, #0
    464c:	60f8      	str	r0, [r7, #12]
    464e:	607a      	str	r2, [r7, #4]
    4650:	230b      	movs	r3, #11
    4652:	18fb      	adds	r3, r7, r3
    4654:	1c0a      	adds	r2, r1, #0
    4656:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4658:	230b      	movs	r3, #11
    465a:	18fb      	adds	r3, r7, r3
    465c:	781a      	ldrb	r2, [r3, #0]
    465e:	68fb      	ldr	r3, [r7, #12]
    4660:	3206      	adds	r2, #6
    4662:	0092      	lsls	r2, r2, #2
    4664:	6879      	ldr	r1, [r7, #4]
    4666:	50d1      	str	r1, [r2, r3]
	TC_CRITICAL_SECTION_LEAVE();
}
    4668:	46c0      	nop			; (mov r8, r8)
    466a:	46bd      	mov	sp, r7
    466c:	b004      	add	sp, #16
    466e:	bd80      	pop	{r7, pc}

00004670 <_pwm_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    4670:	b590      	push	{r4, r7, lr}
    4672:	b085      	sub	sp, #20
    4674:	af00      	add	r7, sp, #0
    4676:	6078      	str	r0, [r7, #4]
    4678:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    467a:	230f      	movs	r3, #15
    467c:	18fc      	adds	r4, r7, r3
    467e:	683b      	ldr	r3, [r7, #0]
    4680:	0018      	movs	r0, r3
    4682:	4b77      	ldr	r3, [pc, #476]	; (4860 <_pwm_init+0x1f0>)
    4684:	4798      	blx	r3
    4686:	0003      	movs	r3, r0
    4688:	7023      	strb	r3, [r4, #0]
	device->hw = hw;
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	683a      	ldr	r2, [r7, #0]
    468e:	611a      	str	r2, [r3, #16]

	hri_tc_wait_for_sync(hw);
    4690:	683b      	ldr	r3, [r7, #0]
    4692:	0018      	movs	r0, r3
    4694:	4b73      	ldr	r3, [pc, #460]	; (4864 <_pwm_init+0x1f4>)
    4696:	4798      	blx	r3
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    4698:	683b      	ldr	r3, [r7, #0]
    469a:	2102      	movs	r1, #2
    469c:	0018      	movs	r0, r3
    469e:	4b72      	ldr	r3, [pc, #456]	; (4868 <_pwm_init+0x1f8>)
    46a0:	4798      	blx	r3
    46a2:	1e03      	subs	r3, r0, #0
    46a4:	d008      	beq.n	46b8 <_pwm_init+0x48>
		hri_tc_write_CTRLA_reg(hw, 0);
    46a6:	683b      	ldr	r3, [r7, #0]
    46a8:	2100      	movs	r1, #0
    46aa:	0018      	movs	r0, r3
    46ac:	4b6f      	ldr	r3, [pc, #444]	; (486c <_pwm_init+0x1fc>)
    46ae:	4798      	blx	r3
		hri_tc_wait_for_sync(hw);
    46b0:	683b      	ldr	r3, [r7, #0]
    46b2:	0018      	movs	r0, r3
    46b4:	4b6b      	ldr	r3, [pc, #428]	; (4864 <_pwm_init+0x1f4>)
    46b6:	4798      	blx	r3
	}
	hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    46b8:	683b      	ldr	r3, [r7, #0]
    46ba:	2101      	movs	r1, #1
    46bc:	0018      	movs	r0, r3
    46be:	4b6b      	ldr	r3, [pc, #428]	; (486c <_pwm_init+0x1fc>)
    46c0:	4798      	blx	r3
	hri_tc_wait_for_sync(hw);
    46c2:	683b      	ldr	r3, [r7, #0]
    46c4:	0018      	movs	r0, r3
    46c6:	4b67      	ldr	r3, [pc, #412]	; (4864 <_pwm_init+0x1f4>)
    46c8:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    46ca:	230f      	movs	r3, #15
    46cc:	18fb      	adds	r3, r7, r3
    46ce:	2200      	movs	r2, #0
    46d0:	569a      	ldrsb	r2, [r3, r2]
    46d2:	4967      	ldr	r1, [pc, #412]	; (4870 <_pwm_init+0x200>)
    46d4:	0013      	movs	r3, r2
    46d6:	009b      	lsls	r3, r3, #2
    46d8:	189b      	adds	r3, r3, r2
    46da:	009b      	lsls	r3, r3, #2
    46dc:	18cb      	adds	r3, r1, r3
    46de:	3302      	adds	r3, #2
    46e0:	881a      	ldrh	r2, [r3, #0]
    46e2:	683b      	ldr	r3, [r7, #0]
    46e4:	0011      	movs	r1, r2
    46e6:	0018      	movs	r0, r3
    46e8:	4b60      	ldr	r3, [pc, #384]	; (486c <_pwm_init+0x1fc>)
    46ea:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    46ec:	230f      	movs	r3, #15
    46ee:	18fb      	adds	r3, r7, r3
    46f0:	2200      	movs	r2, #0
    46f2:	569a      	ldrsb	r2, [r3, r2]
    46f4:	495e      	ldr	r1, [pc, #376]	; (4870 <_pwm_init+0x200>)
    46f6:	0013      	movs	r3, r2
    46f8:	009b      	lsls	r3, r3, #2
    46fa:	189b      	adds	r3, r3, r2
    46fc:	009b      	lsls	r3, r3, #2
    46fe:	18cb      	adds	r3, r1, r3
    4700:	3304      	adds	r3, #4
    4702:	781a      	ldrb	r2, [r3, #0]
    4704:	683b      	ldr	r3, [r7, #0]
    4706:	0011      	movs	r1, r2
    4708:	0018      	movs	r0, r3
    470a:	4b5a      	ldr	r3, [pc, #360]	; (4874 <_pwm_init+0x204>)
    470c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    470e:	230f      	movs	r3, #15
    4710:	18fb      	adds	r3, r7, r3
    4712:	2200      	movs	r2, #0
    4714:	569a      	ldrsb	r2, [r3, r2]
    4716:	4956      	ldr	r1, [pc, #344]	; (4870 <_pwm_init+0x200>)
    4718:	0013      	movs	r3, r2
    471a:	009b      	lsls	r3, r3, #2
    471c:	189b      	adds	r3, r3, r2
    471e:	009b      	lsls	r3, r3, #2
    4720:	18cb      	adds	r3, r1, r3
    4722:	3306      	adds	r3, #6
    4724:	881a      	ldrh	r2, [r3, #0]
    4726:	683b      	ldr	r3, [r7, #0]
    4728:	0011      	movs	r1, r2
    472a:	0018      	movs	r0, r3
    472c:	4b52      	ldr	r3, [pc, #328]	; (4878 <_pwm_init+0x208>)
    472e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    4730:	230f      	movs	r3, #15
    4732:	18fb      	adds	r3, r7, r3
    4734:	2200      	movs	r2, #0
    4736:	569a      	ldrsb	r2, [r3, r2]
    4738:	494d      	ldr	r1, [pc, #308]	; (4870 <_pwm_init+0x200>)
    473a:	0013      	movs	r3, r2
    473c:	009b      	lsls	r3, r3, #2
    473e:	189b      	adds	r3, r3, r2
    4740:	009b      	lsls	r3, r3, #2
    4742:	18cb      	adds	r3, r1, r3
    4744:	3302      	adds	r3, #2
    4746:	881b      	ldrh	r3, [r3, #0]
    4748:	001a      	movs	r2, r3
    474a:	230c      	movs	r3, #12
    474c:	4013      	ands	r3, r2
    474e:	2b08      	cmp	r3, #8
    4750:	d122      	bne.n	4798 <_pwm_init+0x128>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4752:	230f      	movs	r3, #15
    4754:	18fb      	adds	r3, r7, r3
    4756:	2200      	movs	r2, #0
    4758:	569a      	ldrsb	r2, [r3, r2]
    475a:	4945      	ldr	r1, [pc, #276]	; (4870 <_pwm_init+0x200>)
    475c:	0013      	movs	r3, r2
    475e:	009b      	lsls	r3, r3, #2
    4760:	189b      	adds	r3, r3, r2
    4762:	009b      	lsls	r3, r3, #2
    4764:	18cb      	adds	r3, r1, r3
    4766:	330c      	adds	r3, #12
    4768:	681a      	ldr	r2, [r3, #0]
    476a:	683b      	ldr	r3, [r7, #0]
    476c:	2100      	movs	r1, #0
    476e:	0018      	movs	r0, r3
    4770:	4b42      	ldr	r3, [pc, #264]	; (487c <_pwm_init+0x20c>)
    4772:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    4774:	230f      	movs	r3, #15
    4776:	18fb      	adds	r3, r7, r3
    4778:	2200      	movs	r2, #0
    477a:	569a      	ldrsb	r2, [r3, r2]
    477c:	493c      	ldr	r1, [pc, #240]	; (4870 <_pwm_init+0x200>)
    477e:	0013      	movs	r3, r2
    4780:	009b      	lsls	r3, r3, #2
    4782:	189b      	adds	r3, r3, r2
    4784:	009b      	lsls	r3, r3, #2
    4786:	18cb      	adds	r3, r1, r3
    4788:	3310      	adds	r3, #16
    478a:	681a      	ldr	r2, [r3, #0]
    478c:	683b      	ldr	r3, [r7, #0]
    478e:	2101      	movs	r1, #1
    4790:	0018      	movs	r0, r3
    4792:	4b3a      	ldr	r3, [pc, #232]	; (487c <_pwm_init+0x20c>)
    4794:	4798      	blx	r3
    4796:	e037      	b.n	4808 <_pwm_init+0x198>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4798:	230f      	movs	r3, #15
    479a:	18fb      	adds	r3, r7, r3
    479c:	2200      	movs	r2, #0
    479e:	569a      	ldrsb	r2, [r3, r2]
    47a0:	4933      	ldr	r1, [pc, #204]	; (4870 <_pwm_init+0x200>)
    47a2:	0013      	movs	r3, r2
    47a4:	009b      	lsls	r3, r3, #2
    47a6:	189b      	adds	r3, r3, r2
    47a8:	009b      	lsls	r3, r3, #2
    47aa:	18cb      	adds	r3, r1, r3
    47ac:	3302      	adds	r3, #2
    47ae:	881b      	ldrh	r3, [r3, #0]
    47b0:	001a      	movs	r2, r3
    47b2:	230c      	movs	r3, #12
    47b4:	4013      	ands	r3, r2
    47b6:	d124      	bne.n	4802 <_pwm_init+0x192>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    47b8:	230f      	movs	r3, #15
    47ba:	18fb      	adds	r3, r7, r3
    47bc:	2200      	movs	r2, #0
    47be:	569a      	ldrsb	r2, [r3, r2]
    47c0:	492b      	ldr	r1, [pc, #172]	; (4870 <_pwm_init+0x200>)
    47c2:	0013      	movs	r3, r2
    47c4:	009b      	lsls	r3, r3, #2
    47c6:	189b      	adds	r3, r3, r2
    47c8:	009b      	lsls	r3, r3, #2
    47ca:	18cb      	adds	r3, r1, r3
    47cc:	330c      	adds	r3, #12
    47ce:	681b      	ldr	r3, [r3, #0]
    47d0:	b29a      	uxth	r2, r3
    47d2:	683b      	ldr	r3, [r7, #0]
    47d4:	2100      	movs	r1, #0
    47d6:	0018      	movs	r0, r3
    47d8:	4b29      	ldr	r3, [pc, #164]	; (4880 <_pwm_init+0x210>)
    47da:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    47dc:	230f      	movs	r3, #15
    47de:	18fb      	adds	r3, r7, r3
    47e0:	2200      	movs	r2, #0
    47e2:	569a      	ldrsb	r2, [r3, r2]
    47e4:	4922      	ldr	r1, [pc, #136]	; (4870 <_pwm_init+0x200>)
    47e6:	0013      	movs	r3, r2
    47e8:	009b      	lsls	r3, r3, #2
    47ea:	189b      	adds	r3, r3, r2
    47ec:	009b      	lsls	r3, r3, #2
    47ee:	18cb      	adds	r3, r1, r3
    47f0:	3310      	adds	r3, #16
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	b29a      	uxth	r2, r3
    47f6:	683b      	ldr	r3, [r7, #0]
    47f8:	2101      	movs	r1, #1
    47fa:	0018      	movs	r0, r3
    47fc:	4b20      	ldr	r3, [pc, #128]	; (4880 <_pwm_init+0x210>)
    47fe:	4798      	blx	r3
    4800:	e002      	b.n	4808 <_pwm_init+0x198>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return ERR_INVALID_DATA;
    4802:	2301      	movs	r3, #1
    4804:	425b      	negs	r3, r3
    4806:	e027      	b.n	4858 <_pwm_init+0x1e8>
	}

	_tc_init_irq_param(hw, (void *)device);
    4808:	687a      	ldr	r2, [r7, #4]
    480a:	683b      	ldr	r3, [r7, #0]
    480c:	0011      	movs	r1, r2
    480e:	0018      	movs	r0, r3
    4810:	4b1c      	ldr	r3, [pc, #112]	; (4884 <_pwm_init+0x214>)
    4812:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    4814:	683b      	ldr	r3, [r7, #0]
    4816:	0018      	movs	r0, r3
    4818:	4b1b      	ldr	r3, [pc, #108]	; (4888 <_pwm_init+0x218>)
    481a:	4798      	blx	r3
    481c:	0003      	movs	r3, r0
    481e:	3312      	adds	r3, #18
    4820:	b2db      	uxtb	r3, r3
    4822:	b25b      	sxtb	r3, r3
    4824:	0018      	movs	r0, r3
    4826:	4b19      	ldr	r3, [pc, #100]	; (488c <_pwm_init+0x21c>)
    4828:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    482a:	683b      	ldr	r3, [r7, #0]
    482c:	0018      	movs	r0, r3
    482e:	4b16      	ldr	r3, [pc, #88]	; (4888 <_pwm_init+0x218>)
    4830:	4798      	blx	r3
    4832:	0003      	movs	r3, r0
    4834:	3312      	adds	r3, #18
    4836:	b2db      	uxtb	r3, r3
    4838:	b25b      	sxtb	r3, r3
    483a:	0018      	movs	r0, r3
    483c:	4b14      	ldr	r3, [pc, #80]	; (4890 <_pwm_init+0x220>)
    483e:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    4840:	683b      	ldr	r3, [r7, #0]
    4842:	0018      	movs	r0, r3
    4844:	4b10      	ldr	r3, [pc, #64]	; (4888 <_pwm_init+0x218>)
    4846:	4798      	blx	r3
    4848:	0003      	movs	r3, r0
    484a:	3312      	adds	r3, #18
    484c:	b2db      	uxtb	r3, r3
    484e:	b25b      	sxtb	r3, r3
    4850:	0018      	movs	r0, r3
    4852:	4b10      	ldr	r3, [pc, #64]	; (4894 <_pwm_init+0x224>)
    4854:	4798      	blx	r3

	return ERR_NONE;
    4856:	2300      	movs	r3, #0
}
    4858:	0018      	movs	r0, r3
    485a:	46bd      	mov	sp, r7
    485c:	b005      	add	sp, #20
    485e:	bd90      	pop	{r4, r7, pc}
    4860:	00004971 	.word	0x00004971
    4864:	000044f5 	.word	0x000044f5
    4868:	00004585 	.word	0x00004585
    486c:	000045bd 	.word	0x000045bd
    4870:	20000098 	.word	0x20000098
    4874:	000045db 	.word	0x000045db
    4878:	000045f9 	.word	0x000045f9
    487c:	00004647 	.word	0x00004647
    4880:	00004617 	.word	0x00004617
    4884:	00004a01 	.word	0x00004a01
    4888:	00004951 	.word	0x00004951
    488c:	0000447d 	.word	0x0000447d
    4890:	000044bd 	.word	0x000044bd
    4894:	00004449 	.word	0x00004449

00004898 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    4898:	b580      	push	{r7, lr}
    489a:	af00      	add	r7, sp, #0
	return NULL;
    489c:	2300      	movs	r3, #0
}
    489e:	0018      	movs	r0, r3
    48a0:	46bd      	mov	sp, r7
    48a2:	bd80      	pop	{r7, pc}

000048a4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    48a4:	b580      	push	{r7, lr}
    48a6:	b084      	sub	sp, #16
    48a8:	af00      	add	r7, sp, #0
    48aa:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	691b      	ldr	r3, [r3, #16]
    48b0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    48b2:	68fb      	ldr	r3, [r7, #12]
    48b4:	0018      	movs	r0, r3
    48b6:	4b14      	ldr	r3, [pc, #80]	; (4908 <tc_pwm_interrupt_handler+0x64>)
    48b8:	4798      	blx	r3
    48ba:	1e03      	subs	r3, r0, #0
    48bc:	d00c      	beq.n	48d8 <tc_pwm_interrupt_handler+0x34>
		hri_tc_clear_interrupt_OVF_bit(hw);
    48be:	68fb      	ldr	r3, [r7, #12]
    48c0:	0018      	movs	r0, r3
    48c2:	4b12      	ldr	r3, [pc, #72]	; (490c <tc_pwm_interrupt_handler+0x68>)
    48c4:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	681b      	ldr	r3, [r3, #0]
    48ca:	2b00      	cmp	r3, #0
    48cc:	d004      	beq.n	48d8 <tc_pwm_interrupt_handler+0x34>
			device->callback.pwm_period_cb(device);
    48ce:	687b      	ldr	r3, [r7, #4]
    48d0:	681b      	ldr	r3, [r3, #0]
    48d2:	687a      	ldr	r2, [r7, #4]
    48d4:	0010      	movs	r0, r2
    48d6:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    48d8:	68fb      	ldr	r3, [r7, #12]
    48da:	0018      	movs	r0, r3
    48dc:	4b0c      	ldr	r3, [pc, #48]	; (4910 <tc_pwm_interrupt_handler+0x6c>)
    48de:	4798      	blx	r3
    48e0:	1e03      	subs	r3, r0, #0
    48e2:	d00c      	beq.n	48fe <tc_pwm_interrupt_handler+0x5a>
		hri_tc_clear_interrupt_ERR_bit(hw);
    48e4:	68fb      	ldr	r3, [r7, #12]
    48e6:	0018      	movs	r0, r3
    48e8:	4b0a      	ldr	r3, [pc, #40]	; (4914 <tc_pwm_interrupt_handler+0x70>)
    48ea:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	685b      	ldr	r3, [r3, #4]
    48f0:	2b00      	cmp	r3, #0
    48f2:	d004      	beq.n	48fe <tc_pwm_interrupt_handler+0x5a>
			device->callback.pwm_error_cb(device);
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	685b      	ldr	r3, [r3, #4]
    48f8:	687a      	ldr	r2, [r7, #4]
    48fa:	0010      	movs	r0, r2
    48fc:	4798      	blx	r3
		}
	}
}
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	46bd      	mov	sp, r7
    4902:	b004      	add	sp, #16
    4904:	bd80      	pop	{r7, pc}
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	00004515 	.word	0x00004515
    490c:	00004537 	.word	0x00004537
    4910:	00004563 	.word	0x00004563
    4914:	0000454d 	.word	0x0000454d

00004918 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    4918:	b580      	push	{r7, lr}
    491a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc4_dev);
    491c:	4b03      	ldr	r3, [pc, #12]	; (492c <TC4_Handler+0x14>)
    491e:	681b      	ldr	r3, [r3, #0]
    4920:	0018      	movs	r0, r3
    4922:	4b03      	ldr	r3, [pc, #12]	; (4930 <TC4_Handler+0x18>)
    4924:	4798      	blx	r3
}
    4926:	46c0      	nop			; (mov r8, r8)
    4928:	46bd      	mov	sp, r7
    492a:	bd80      	pop	{r7, pc}
    492c:	20000144 	.word	0x20000144
    4930:	000048a5 	.word	0x000048a5

00004934 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    4934:	b580      	push	{r7, lr}
    4936:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc5_dev);
    4938:	4b03      	ldr	r3, [pc, #12]	; (4948 <TC5_Handler+0x14>)
    493a:	681b      	ldr	r3, [r3, #0]
    493c:	0018      	movs	r0, r3
    493e:	4b03      	ldr	r3, [pc, #12]	; (494c <TC5_Handler+0x18>)
    4940:	4798      	blx	r3
}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	46bd      	mov	sp, r7
    4946:	bd80      	pop	{r7, pc}
    4948:	20000148 	.word	0x20000148
    494c:	000048a5 	.word	0x000048a5

00004950 <tc_get_hardware_index>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
    4950:	b580      	push	{r7, lr}
    4952:	b082      	sub	sp, #8
    4954:	af00      	add	r7, sp, #0
    4956:	6078      	str	r0, [r7, #4]
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	4a04      	ldr	r2, [pc, #16]	; (496c <tc_get_hardware_index+0x1c>)
    495c:	4694      	mov	ip, r2
    495e:	4463      	add	r3, ip
    4960:	0a9b      	lsrs	r3, r3, #10
    4962:	b2db      	uxtb	r3, r3
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    4964:	0018      	movs	r0, r3
    4966:	46bd      	mov	sp, r7
    4968:	b002      	add	sp, #8
    496a:	bd80      	pop	{r7, pc}
    496c:	bdffd400 	.word	0xbdffd400

00004970 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    4970:	b580      	push	{r7, lr}
    4972:	b084      	sub	sp, #16
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    4978:	687b      	ldr	r3, [r7, #4]
    497a:	0018      	movs	r0, r3
    497c:	4b1c      	ldr	r3, [pc, #112]	; (49f0 <get_tc_index+0x80>)
    497e:	4798      	blx	r3
    4980:	0003      	movs	r3, r0
    4982:	001a      	movs	r2, r3
    4984:	230e      	movs	r3, #14
    4986:	18fb      	adds	r3, r7, r3
    4988:	3203      	adds	r2, #3
    498a:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    498c:	230f      	movs	r3, #15
    498e:	18fb      	adds	r3, r7, r3
    4990:	2200      	movs	r2, #0
    4992:	701a      	strb	r2, [r3, #0]
    4994:	e019      	b.n	49ca <get_tc_index+0x5a>
		if (_tcs[i].number == tc_offset) {
    4996:	230f      	movs	r3, #15
    4998:	18fb      	adds	r3, r7, r3
    499a:	781a      	ldrb	r2, [r3, #0]
    499c:	4915      	ldr	r1, [pc, #84]	; (49f4 <get_tc_index+0x84>)
    499e:	0013      	movs	r3, r2
    49a0:	009b      	lsls	r3, r3, #2
    49a2:	189b      	adds	r3, r3, r2
    49a4:	009b      	lsls	r3, r3, #2
    49a6:	5c5b      	ldrb	r3, [r3, r1]
    49a8:	220e      	movs	r2, #14
    49aa:	18ba      	adds	r2, r7, r2
    49ac:	7812      	ldrb	r2, [r2, #0]
    49ae:	429a      	cmp	r2, r3
    49b0:	d104      	bne.n	49bc <get_tc_index+0x4c>
			return i;
    49b2:	230f      	movs	r3, #15
    49b4:	18fb      	adds	r3, r7, r3
    49b6:	781b      	ldrb	r3, [r3, #0]
    49b8:	b25b      	sxtb	r3, r3
    49ba:	e015      	b.n	49e8 <get_tc_index+0x78>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    49bc:	230f      	movs	r3, #15
    49be:	18fb      	adds	r3, r7, r3
    49c0:	781a      	ldrb	r2, [r3, #0]
    49c2:	230f      	movs	r3, #15
    49c4:	18fb      	adds	r3, r7, r3
    49c6:	3201      	adds	r2, #1
    49c8:	701a      	strb	r2, [r3, #0]
    49ca:	230f      	movs	r3, #15
    49cc:	18fb      	adds	r3, r7, r3
    49ce:	781b      	ldrb	r3, [r3, #0]
    49d0:	2b01      	cmp	r3, #1
    49d2:	d9e0      	bls.n	4996 <get_tc_index+0x26>
		}
	}

	ASSERT(false);
    49d4:	2364      	movs	r3, #100	; 0x64
    49d6:	33ff      	adds	r3, #255	; 0xff
    49d8:	001a      	movs	r2, r3
    49da:	4b07      	ldr	r3, [pc, #28]	; (49f8 <get_tc_index+0x88>)
    49dc:	0019      	movs	r1, r3
    49de:	2000      	movs	r0, #0
    49e0:	4b06      	ldr	r3, [pc, #24]	; (49fc <get_tc_index+0x8c>)
    49e2:	4798      	blx	r3
	return -1;
    49e4:	2301      	movs	r3, #1
    49e6:	425b      	negs	r3, r3
}
    49e8:	0018      	movs	r0, r3
    49ea:	46bd      	mov	sp, r7
    49ec:	b004      	add	sp, #16
    49ee:	bd80      	pop	{r7, pc}
    49f0:	00004951 	.word	0x00004951
    49f4:	20000098 	.word	0x20000098
    49f8:	00004c98 	.word	0x00004c98
    49fc:	00001cf7 	.word	0x00001cf7

00004a00 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    4a00:	b580      	push	{r7, lr}
    4a02:	b082      	sub	sp, #8
    4a04:	af00      	add	r7, sp, #0
    4a06:	6078      	str	r0, [r7, #4]
    4a08:	6039      	str	r1, [r7, #0]
	if (hw == TC4) {
    4a0a:	687b      	ldr	r3, [r7, #4]
    4a0c:	4a08      	ldr	r2, [pc, #32]	; (4a30 <_tc_init_irq_param+0x30>)
    4a0e:	4293      	cmp	r3, r2
    4a10:	d102      	bne.n	4a18 <_tc_init_irq_param+0x18>
		_tc4_dev = (struct _pwm_device *)dev;
    4a12:	4b08      	ldr	r3, [pc, #32]	; (4a34 <_tc_init_irq_param+0x34>)
    4a14:	683a      	ldr	r2, [r7, #0]
    4a16:	601a      	str	r2, [r3, #0]
	}
	if (hw == TC5) {
    4a18:	687b      	ldr	r3, [r7, #4]
    4a1a:	4a07      	ldr	r2, [pc, #28]	; (4a38 <_tc_init_irq_param+0x38>)
    4a1c:	4293      	cmp	r3, r2
    4a1e:	d102      	bne.n	4a26 <_tc_init_irq_param+0x26>
		_tc5_dev = (struct _pwm_device *)dev;
    4a20:	4b06      	ldr	r3, [pc, #24]	; (4a3c <_tc_init_irq_param+0x3c>)
    4a22:	683a      	ldr	r2, [r7, #0]
    4a24:	601a      	str	r2, [r3, #0]
	}
}
    4a26:	46c0      	nop			; (mov r8, r8)
    4a28:	46bd      	mov	sp, r7
    4a2a:	b002      	add	sp, #8
    4a2c:	bd80      	pop	{r7, pc}
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	42003000 	.word	0x42003000
    4a34:	20000144 	.word	0x20000144
    4a38:	42003400 	.word	0x42003400
    4a3c:	20000148 	.word	0x20000148

00004a40 <main>:
#include <atmel_start.h>
#include <pca9517.h>

int main(void)
{
    4a40:	b580      	push	{r7, lr}
    4a42:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    4a44:	4b02      	ldr	r3, [pc, #8]	; (4a50 <main+0x10>)
    4a46:	4798      	blx	r3
	pca9517_setPWMFreq(0x79);
    4a48:	2079      	movs	r0, #121	; 0x79
    4a4a:	4b02      	ldr	r3, [pc, #8]	; (4a54 <main+0x14>)
    4a4c:	4798      	blx	r3
	/* Replace with your application code */
	while (1) { 
    4a4e:	e7fe      	b.n	4a4e <main+0xe>
    4a50:	00000115 	.word	0x00000115
    4a54:	00004a59 	.word	0x00004a59

00004a58 <pca9517_setPWMFreq>:
/*! 
    @brief  Sets the PWM frequency for the entire chip, up to ~1.6 KHz
    @param  freq Floating point frequency that we will attempt to match
*/
/**************************************************************************/
void pca9517_setPWMFreq(uint8_t freq) {
    4a58:	b580      	push	{r7, lr}
    4a5a:	b086      	sub	sp, #24
    4a5c:	af00      	add	r7, sp, #0
    4a5e:	0002      	movs	r2, r0
    4a60:	1dfb      	adds	r3, r7, #7
    4a62:	701a      	strb	r2, [r3, #0]
	
	struct io_descriptor *I2C_0_io;
	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    4a64:	2314      	movs	r3, #20
    4a66:	18fa      	adds	r2, r7, r3
    4a68:	4b1d      	ldr	r3, [pc, #116]	; (4ae0 <pca9517_setPWMFreq+0x88>)
    4a6a:	0011      	movs	r1, r2
    4a6c:	0018      	movs	r0, r3
    4a6e:	4b1d      	ldr	r3, [pc, #116]	; (4ae4 <pca9517_setPWMFreq+0x8c>)
    4a70:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_0, 0x40,I2C_M_SEVEN); 
    4a72:	2380      	movs	r3, #128	; 0x80
    4a74:	011a      	lsls	r2, r3, #4
    4a76:	4b1a      	ldr	r3, [pc, #104]	; (4ae0 <pca9517_setPWMFreq+0x88>)
    4a78:	2140      	movs	r1, #64	; 0x40
    4a7a:	0018      	movs	r0, r3
    4a7c:	4b1a      	ldr	r3, [pc, #104]	; (4ae8 <pca9517_setPWMFreq+0x90>)
    4a7e:	4798      	blx	r3
	
	uint8_t buffer[10]; 
	buffer[0] = PCA9685_MODE1; 
    4a80:	2308      	movs	r3, #8
    4a82:	18fb      	adds	r3, r7, r3
    4a84:	2200      	movs	r2, #0
    4a86:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x18; 
    4a88:	2308      	movs	r3, #8
    4a8a:	18fb      	adds	r3, r7, r3
    4a8c:	2218      	movs	r2, #24
    4a8e:	705a      	strb	r2, [r3, #1]
	io_write(I2C_0_io,buffer,2); 
    4a90:	697b      	ldr	r3, [r7, #20]
    4a92:	2208      	movs	r2, #8
    4a94:	18b9      	adds	r1, r7, r2
    4a96:	2202      	movs	r2, #2
    4a98:	0018      	movs	r0, r3
    4a9a:	4b14      	ldr	r3, [pc, #80]	; (4aec <pca9517_setPWMFreq+0x94>)
    4a9c:	4798      	blx	r3
	buffer[0] = PCA9685_PRESCALE;
    4a9e:	2308      	movs	r3, #8
    4aa0:	18fb      	adds	r3, r7, r3
    4aa2:	22fe      	movs	r2, #254	; 0xfe
    4aa4:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x79;  
    4aa6:	2308      	movs	r3, #8
    4aa8:	18fb      	adds	r3, r7, r3
    4aaa:	2279      	movs	r2, #121	; 0x79
    4aac:	705a      	strb	r2, [r3, #1]
	io_write(I2C_0_io,buffer,2);
    4aae:	697b      	ldr	r3, [r7, #20]
    4ab0:	2208      	movs	r2, #8
    4ab2:	18b9      	adds	r1, r7, r2
    4ab4:	2202      	movs	r2, #2
    4ab6:	0018      	movs	r0, r3
    4ab8:	4b0c      	ldr	r3, [pc, #48]	; (4aec <pca9517_setPWMFreq+0x94>)
    4aba:	4798      	blx	r3
	io_write(I2C_0_io,buffer,1); 
    4abc:	697b      	ldr	r3, [r7, #20]
    4abe:	2208      	movs	r2, #8
    4ac0:	18b9      	adds	r1, r7, r2
    4ac2:	2201      	movs	r2, #1
    4ac4:	0018      	movs	r0, r3
    4ac6:	4b09      	ldr	r3, [pc, #36]	; (4aec <pca9517_setPWMFreq+0x94>)
    4ac8:	4798      	blx	r3
	io_read(I2C_0_io,buffer,1); 
    4aca:	697b      	ldr	r3, [r7, #20]
    4acc:	2208      	movs	r2, #8
    4ace:	18b9      	adds	r1, r7, r2
    4ad0:	2201      	movs	r2, #1
    4ad2:	0018      	movs	r0, r3
    4ad4:	4b06      	ldr	r3, [pc, #24]	; (4af0 <pca9517_setPWMFreq+0x98>)
    4ad6:	4798      	blx	r3
	
	
}
    4ad8:	46c0      	nop			; (mov r8, r8)
    4ada:	46bd      	mov	sp, r7
    4adc:	b006      	add	sp, #24
    4ade:	bd80      	pop	{r7, pc}
    4ae0:	200002b8 	.word	0x200002b8
    4ae4:	00001611 	.word	0x00001611
    4ae8:	000015d1 	.word	0x000015d1
    4aec:	00001631 	.word	0x00001631
    4af0:	00001685 	.word	0x00001685

00004af4 <__libc_init_array>:
    4af4:	b570      	push	{r4, r5, r6, lr}
    4af6:	2600      	movs	r6, #0
    4af8:	4d0c      	ldr	r5, [pc, #48]	; (4b2c <__libc_init_array+0x38>)
    4afa:	4c0d      	ldr	r4, [pc, #52]	; (4b30 <__libc_init_array+0x3c>)
    4afc:	1b64      	subs	r4, r4, r5
    4afe:	10a4      	asrs	r4, r4, #2
    4b00:	42a6      	cmp	r6, r4
    4b02:	d109      	bne.n	4b18 <__libc_init_array+0x24>
    4b04:	2600      	movs	r6, #0
    4b06:	f000 f8d1 	bl	4cac <_init>
    4b0a:	4d0a      	ldr	r5, [pc, #40]	; (4b34 <__libc_init_array+0x40>)
    4b0c:	4c0a      	ldr	r4, [pc, #40]	; (4b38 <__libc_init_array+0x44>)
    4b0e:	1b64      	subs	r4, r4, r5
    4b10:	10a4      	asrs	r4, r4, #2
    4b12:	42a6      	cmp	r6, r4
    4b14:	d105      	bne.n	4b22 <__libc_init_array+0x2e>
    4b16:	bd70      	pop	{r4, r5, r6, pc}
    4b18:	00b3      	lsls	r3, r6, #2
    4b1a:	58eb      	ldr	r3, [r5, r3]
    4b1c:	4798      	blx	r3
    4b1e:	3601      	adds	r6, #1
    4b20:	e7ee      	b.n	4b00 <__libc_init_array+0xc>
    4b22:	00b3      	lsls	r3, r6, #2
    4b24:	58eb      	ldr	r3, [r5, r3]
    4b26:	4798      	blx	r3
    4b28:	3601      	adds	r6, #1
    4b2a:	e7f2      	b.n	4b12 <__libc_init_array+0x1e>
    4b2c:	00004cb8 	.word	0x00004cb8
    4b30:	00004cb8 	.word	0x00004cb8
    4b34:	00004cb8 	.word	0x00004cb8
    4b38:	00004cbc 	.word	0x00004cbc
    4b3c:	682f2e2e 	.word	0x682f2e2e
    4b40:	702f6c70 	.word	0x702f6c70
    4b44:	2f74726f 	.word	0x2f74726f
    4b48:	5f6c7068 	.word	0x5f6c7068
    4b4c:	6f697067 	.word	0x6f697067
    4b50:	7361625f 	.word	0x7361625f
    4b54:	00682e65 	.word	0x00682e65
    4b58:	682f2e2e 	.word	0x682f2e2e
    4b5c:	702f6c70 	.word	0x702f6c70
    4b60:	70682f6d 	.word	0x70682f6d
    4b64:	6d705f6c 	.word	0x6d705f6c
    4b68:	7361625f 	.word	0x7361625f
    4b6c:	00682e65 	.word	0x00682e65
    4b70:	682f2e2e 	.word	0x682f2e2e
    4b74:	732f6c61 	.word	0x732f6c61
    4b78:	682f6372 	.word	0x682f6372
    4b7c:	615f6c61 	.word	0x615f6c61
    4b80:	615f6364 	.word	0x615f6364
    4b84:	636e7973 	.word	0x636e7973
    4b88:	0000632e 	.word	0x0000632e
    4b8c:	682f2e2e 	.word	0x682f2e2e
    4b90:	732f6c61 	.word	0x732f6c61
    4b94:	682f6372 	.word	0x682f6372
    4b98:	695f6c61 	.word	0x695f6c61
    4b9c:	6d5f6332 	.word	0x6d5f6332
    4ba0:	6e79735f 	.word	0x6e79735f
    4ba4:	00632e63 	.word	0x00632e63
    4ba8:	682f2e2e 	.word	0x682f2e2e
    4bac:	732f6c61 	.word	0x732f6c61
    4bb0:	682f6372 	.word	0x682f6372
    4bb4:	695f6c61 	.word	0x695f6c61
    4bb8:	00632e6f 	.word	0x00632e6f
    4bbc:	682f2e2e 	.word	0x682f2e2e
    4bc0:	732f6c61 	.word	0x732f6c61
    4bc4:	682f6372 	.word	0x682f6372
    4bc8:	705f6c61 	.word	0x705f6c61
    4bcc:	632e6d77 	.word	0x632e6d77
    4bd0:	00000000 	.word	0x00000000
    4bd4:	682f2e2e 	.word	0x682f2e2e
    4bd8:	732f6c61 	.word	0x732f6c61
    4bdc:	682f6372 	.word	0x682f6372
    4be0:	745f6c61 	.word	0x745f6c61
    4be4:	72656d69 	.word	0x72656d69
    4be8:	0000632e 	.word	0x0000632e
    4bec:	682f2e2e 	.word	0x682f2e2e
    4bf0:	732f6c61 	.word	0x732f6c61
    4bf4:	682f6372 	.word	0x682f6372
    4bf8:	755f6c61 	.word	0x755f6c61
    4bfc:	74726173 	.word	0x74726173
    4c00:	7973615f 	.word	0x7973615f
    4c04:	632e636e 	.word	0x632e636e
    4c08:	00000000 	.word	0x00000000
    4c0c:	682f2e2e 	.word	0x682f2e2e
    4c10:	752f6c61 	.word	0x752f6c61
    4c14:	736c6974 	.word	0x736c6974
    4c18:	6372732f 	.word	0x6372732f
    4c1c:	6974752f 	.word	0x6974752f
    4c20:	6c5f736c 	.word	0x6c5f736c
    4c24:	2e747369 	.word	0x2e747369
    4c28:	00000063 	.word	0x00000063
    4c2c:	682f2e2e 	.word	0x682f2e2e
    4c30:	752f6c61 	.word	0x752f6c61
    4c34:	736c6974 	.word	0x736c6974
    4c38:	6372732f 	.word	0x6372732f
    4c3c:	6974752f 	.word	0x6974752f
    4c40:	725f736c 	.word	0x725f736c
    4c44:	62676e69 	.word	0x62676e69
    4c48:	65666675 	.word	0x65666675
    4c4c:	00632e72 	.word	0x00632e72
    4c50:	682f2e2e 	.word	0x682f2e2e
    4c54:	612f6c70 	.word	0x612f6c70
    4c58:	682f6364 	.word	0x682f6364
    4c5c:	615f6c70 	.word	0x615f6c70
    4c60:	632e6364 	.word	0x632e6364
    4c64:	00000000 	.word	0x00000000
    4c68:	682f2e2e 	.word	0x682f2e2e
    4c6c:	732f6c70 	.word	0x732f6c70
    4c70:	6f637265 	.word	0x6f637265
    4c74:	70682f6d 	.word	0x70682f6d
    4c78:	65735f6c 	.word	0x65735f6c
    4c7c:	6d6f6372 	.word	0x6d6f6372
    4c80:	0000632e 	.word	0x0000632e

00004c84 <sercomspi_regs>:
	...
    4c98:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    4ca8:	0000632e                                .c..

00004cac <_init>:
    4cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cae:	46c0      	nop			; (mov r8, r8)
    4cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cb2:	bc08      	pop	{r3}
    4cb4:	469e      	mov	lr, r3
    4cb6:	4770      	bx	lr

00004cb8 <__init_array_start>:
    4cb8:	000000dd 	.word	0x000000dd

00004cbc <_fini>:
    4cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cbe:	46c0      	nop			; (mov r8, r8)
    4cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cc2:	bc08      	pop	{r3}
    4cc4:	469e      	mov	lr, r3
    4cc6:	4770      	bx	lr

00004cc8 <__fini_array_start>:
    4cc8:	000000b5 	.word	0x000000b5
